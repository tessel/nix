var searchIndex = {};
searchIndex["nix"] = {"doc":"Rust friendly bindings to the various *nix system functions.","items":[[11,"clone","libc::unix","",0,null],[11,"clone","","",1,null],[11,"clone","","",2,null],[11,"clone","","",3,null],[11,"clone","","",4,null],[11,"clone","","",5,null],[11,"clone","","",6,null],[11,"clone","","",7,null],[11,"clone","","",8,null],[11,"clone","","",9,null],[11,"clone","","",10,null],[11,"clone","","",11,null],[11,"clone","","",12,null],[11,"clone","","",13,null],[11,"clone","","",14,null],[11,"clone","libc::unix::notbsd","",15,null],[11,"clone","","",16,null],[11,"clone","","",17,null],[11,"clone","","",18,null],[11,"clone","","",19,null],[11,"clone","","",20,null],[11,"clone","","",21,null],[11,"clone","","",22,null],[11,"clone","","",23,null],[11,"clone","","",24,null],[11,"clone","","",25,null],[11,"clone","","",26,null],[11,"clone","","",27,null],[11,"clone","","",28,null],[11,"clone","","",29,null],[11,"clone","libc::unix::notbsd::linux","",30,null],[11,"clone","","",31,null],[11,"clone","","",32,null],[11,"clone","","",33,null],[11,"clone","","",34,null],[11,"clone","","",35,null],[11,"clone","","",36,null],[11,"clone","","",37,null],[11,"clone","","",38,null],[11,"clone","","",39,null],[11,"clone","","",40,null],[11,"clone","","",41,null],[11,"clone","","",42,null],[11,"clone","","",43,null],[11,"clone","","",44,null],[11,"clone","","",45,null],[11,"clone","","",46,null],[11,"clone","","",47,null],[11,"clone","libc::unix::notbsd::linux::other","",48,null],[11,"clone","","",49,null],[11,"clone","","",50,null],[11,"clone","","",51,null],[11,"clone","","",52,null],[11,"clone","","",53,null],[11,"clone","","",54,null],[11,"clone","","",55,null],[11,"clone","","",56,null],[11,"clone","","",57,null],[11,"clone","","",58,null],[11,"clone","","",59,null],[11,"clone","","",60,null],[11,"clone","libc::unix::notbsd::linux::other::b64","",61,null],[11,"clone","","",62,null],[11,"clone","libc::unix::notbsd::linux::other::b64::x86_64","",63,null],[11,"clone","","",64,null],[11,"clone","","",65,null],[11,"clone","","",66,null],[11,"clone","","",67,null],[11,"clone","","",68,null],[11,"clone","","",69,null],[11,"clone","","",70,null],[11,"clone","","",71,null],[11,"clone","","",72,null],[6,"c_int","nix","",null,null],[4,"c_void","","",null,null],[4,"Errno","","",null,null],[13,"UnknownErrno","","",73,null],[13,"EPERM","","",73,null],[13,"ENOENT","","",73,null],[13,"ESRCH","","",73,null],[13,"EINTR","","",73,null],[13,"EIO","","",73,null],[13,"ENXIO","","",73,null],[13,"E2BIG","","",73,null],[13,"ENOEXEC","","",73,null],[13,"EBADF","","",73,null],[13,"ECHILD","","",73,null],[13,"EAGAIN","","",73,null],[13,"ENOMEM","","",73,null],[13,"EACCES","","",73,null],[13,"EFAULT","","",73,null],[13,"ENOTBLK","","",73,null],[13,"EBUSY","","",73,null],[13,"EEXIST","","",73,null],[13,"EXDEV","","",73,null],[13,"ENODEV","","",73,null],[13,"ENOTDIR","","",73,null],[13,"EISDIR","","",73,null],[13,"EINVAL","","",73,null],[13,"ENFILE","","",73,null],[13,"EMFILE","","",73,null],[13,"ENOTTY","","",73,null],[13,"ETXTBSY","","",73,null],[13,"EFBIG","","",73,null],[13,"ENOSPC","","",73,null],[13,"ESPIPE","","",73,null],[13,"EROFS","","",73,null],[13,"EMLINK","","",73,null],[13,"EPIPE","","",73,null],[13,"EDOM","","",73,null],[13,"ERANGE","","",73,null],[13,"EDEADLK","","",73,null],[13,"ENAMETOOLONG","","",73,null],[13,"ENOLCK","","",73,null],[13,"ENOSYS","","",73,null],[13,"ENOTEMPTY","","",73,null],[13,"ELOOP","","",73,null],[13,"ENOMSG","","",73,null],[13,"EIDRM","","",73,null],[13,"ECHRNG","","",73,null],[13,"EL2NSYNC","","",73,null],[13,"EL3HLT","","",73,null],[13,"EL3RST","","",73,null],[13,"ELNRNG","","",73,null],[13,"EUNATCH","","",73,null],[13,"ENOCSI","","",73,null],[13,"EL2HLT","","",73,null],[13,"EBADE","","",73,null],[13,"EBADR","","",73,null],[13,"EXFULL","","",73,null],[13,"ENOANO","","",73,null],[13,"EBADRQC","","",73,null],[13,"EBADSLT","","",73,null],[13,"EBFONT","","",73,null],[13,"ENOSTR","","",73,null],[13,"ENODATA","","",73,null],[13,"ETIME","","",73,null],[13,"ENOSR","","",73,null],[13,"ENONET","","",73,null],[13,"ENOPKG","","",73,null],[13,"EREMOTE","","",73,null],[13,"ENOLINK","","",73,null],[13,"EADV","","",73,null],[13,"ESRMNT","","",73,null],[13,"ECOMM","","",73,null],[13,"EPROTO","","",73,null],[13,"EMULTIHOP","","",73,null],[13,"EDOTDOT","","",73,null],[13,"EBADMSG","","",73,null],[13,"EOVERFLOW","","",73,null],[13,"ENOTUNIQ","","",73,null],[13,"EBADFD","","",73,null],[13,"EREMCHG","","",73,null],[13,"ELIBACC","","",73,null],[13,"ELIBBAD","","",73,null],[13,"ELIBSCN","","",73,null],[13,"ELIBMAX","","",73,null],[13,"ELIBEXEC","","",73,null],[13,"EILSEQ","","",73,null],[13,"ERESTART","","",73,null],[13,"ESTRPIPE","","",73,null],[13,"EUSERS","","",73,null],[13,"ENOTSOCK","","",73,null],[13,"EDESTADDRREQ","","",73,null],[13,"EMSGSIZE","","",73,null],[13,"EPROTOTYPE","","",73,null],[13,"ENOPROTOOPT","","",73,null],[13,"EPROTONOSUPPORT","","",73,null],[13,"ESOCKTNOSUPPORT","","",73,null],[13,"EOPNOTSUPP","","",73,null],[13,"EPFNOSUPPORT","","",73,null],[13,"EAFNOSUPPORT","","",73,null],[13,"EADDRINUSE","","",73,null],[13,"EADDRNOTAVAIL","","",73,null],[13,"ENETDOWN","","",73,null],[13,"ENETUNREACH","","",73,null],[13,"ENETRESET","","",73,null],[13,"ECONNABORTED","","",73,null],[13,"ECONNRESET","","",73,null],[13,"ENOBUFS","","",73,null],[13,"EISCONN","","",73,null],[13,"ENOTCONN","","",73,null],[13,"ESHUTDOWN","","",73,null],[13,"ETOOMANYREFS","","",73,null],[13,"ETIMEDOUT","","",73,null],[13,"ECONNREFUSED","","",73,null],[13,"EHOSTDOWN","","",73,null],[13,"EHOSTUNREACH","","",73,null],[13,"EALREADY","","",73,null],[13,"EINPROGRESS","","",73,null],[13,"ESTALE","","",73,null],[13,"EUCLEAN","","",73,null],[13,"ENOTNAM","","",73,null],[13,"ENAVAIL","","",73,null],[13,"EISNAM","","",73,null],[13,"EREMOTEIO","","",73,null],[13,"EDQUOT","","",73,null],[13,"ENOMEDIUM","","",73,null],[13,"EMEDIUMTYPE","","",73,null],[13,"ECANCELED","","",73,null],[13,"ENOKEY","","",73,null],[13,"EKEYEXPIRED","","",73,null],[13,"EKEYREVOKED","","",73,null],[13,"EKEYREJECTED","","",73,null],[13,"EOWNERDEAD","","",73,null],[13,"ENOTRECOVERABLE","","",73,null],[13,"ERFKILL","","",73,null],[13,"EHWPOISON","","",73,null],[4,"Error","","",null,null],[13,"Sys","","",74,null],[13,"InvalidPath","","",74,null],[0,"libc","","",null,null],[0,"errno","","",null,null],[4,"Errno","nix::errno","",null,null],[13,"UnknownErrno","","",73,null],[13,"EPERM","","",73,null],[13,"ENOENT","","",73,null],[13,"ESRCH","","",73,null],[13,"EINTR","","",73,null],[13,"EIO","","",73,null],[13,"ENXIO","","",73,null],[13,"E2BIG","","",73,null],[13,"ENOEXEC","","",73,null],[13,"EBADF","","",73,null],[13,"ECHILD","","",73,null],[13,"EAGAIN","","",73,null],[13,"ENOMEM","","",73,null],[13,"EACCES","","",73,null],[13,"EFAULT","","",73,null],[13,"ENOTBLK","","",73,null],[13,"EBUSY","","",73,null],[13,"EEXIST","","",73,null],[13,"EXDEV","","",73,null],[13,"ENODEV","","",73,null],[13,"ENOTDIR","","",73,null],[13,"EISDIR","","",73,null],[13,"EINVAL","","",73,null],[13,"ENFILE","","",73,null],[13,"EMFILE","","",73,null],[13,"ENOTTY","","",73,null],[13,"ETXTBSY","","",73,null],[13,"EFBIG","","",73,null],[13,"ENOSPC","","",73,null],[13,"ESPIPE","","",73,null],[13,"EROFS","","",73,null],[13,"EMLINK","","",73,null],[13,"EPIPE","","",73,null],[13,"EDOM","","",73,null],[13,"ERANGE","","",73,null],[13,"EDEADLK","","",73,null],[13,"ENAMETOOLONG","","",73,null],[13,"ENOLCK","","",73,null],[13,"ENOSYS","","",73,null],[13,"ENOTEMPTY","","",73,null],[13,"ELOOP","","",73,null],[13,"ENOMSG","","",73,null],[13,"EIDRM","","",73,null],[13,"ECHRNG","","",73,null],[13,"EL2NSYNC","","",73,null],[13,"EL3HLT","","",73,null],[13,"EL3RST","","",73,null],[13,"ELNRNG","","",73,null],[13,"EUNATCH","","",73,null],[13,"ENOCSI","","",73,null],[13,"EL2HLT","","",73,null],[13,"EBADE","","",73,null],[13,"EBADR","","",73,null],[13,"EXFULL","","",73,null],[13,"ENOANO","","",73,null],[13,"EBADRQC","","",73,null],[13,"EBADSLT","","",73,null],[13,"EBFONT","","",73,null],[13,"ENOSTR","","",73,null],[13,"ENODATA","","",73,null],[13,"ETIME","","",73,null],[13,"ENOSR","","",73,null],[13,"ENONET","","",73,null],[13,"ENOPKG","","",73,null],[13,"EREMOTE","","",73,null],[13,"ENOLINK","","",73,null],[13,"EADV","","",73,null],[13,"ESRMNT","","",73,null],[13,"ECOMM","","",73,null],[13,"EPROTO","","",73,null],[13,"EMULTIHOP","","",73,null],[13,"EDOTDOT","","",73,null],[13,"EBADMSG","","",73,null],[13,"EOVERFLOW","","",73,null],[13,"ENOTUNIQ","","",73,null],[13,"EBADFD","","",73,null],[13,"EREMCHG","","",73,null],[13,"ELIBACC","","",73,null],[13,"ELIBBAD","","",73,null],[13,"ELIBSCN","","",73,null],[13,"ELIBMAX","","",73,null],[13,"ELIBEXEC","","",73,null],[13,"EILSEQ","","",73,null],[13,"ERESTART","","",73,null],[13,"ESTRPIPE","","",73,null],[13,"EUSERS","","",73,null],[13,"ENOTSOCK","","",73,null],[13,"EDESTADDRREQ","","",73,null],[13,"EMSGSIZE","","",73,null],[13,"EPROTOTYPE","","",73,null],[13,"ENOPROTOOPT","","",73,null],[13,"EPROTONOSUPPORT","","",73,null],[13,"ESOCKTNOSUPPORT","","",73,null],[13,"EOPNOTSUPP","","",73,null],[13,"EPFNOSUPPORT","","",73,null],[13,"EAFNOSUPPORT","","",73,null],[13,"EADDRINUSE","","",73,null],[13,"EADDRNOTAVAIL","","",73,null],[13,"ENETDOWN","","",73,null],[13,"ENETUNREACH","","",73,null],[13,"ENETRESET","","",73,null],[13,"ECONNABORTED","","",73,null],[13,"ECONNRESET","","",73,null],[13,"ENOBUFS","","",73,null],[13,"EISCONN","","",73,null],[13,"ENOTCONN","","",73,null],[13,"ESHUTDOWN","","",73,null],[13,"ETOOMANYREFS","","",73,null],[13,"ETIMEDOUT","","",73,null],[13,"ECONNREFUSED","","",73,null],[13,"EHOSTDOWN","","",73,null],[13,"EHOSTUNREACH","","",73,null],[13,"EALREADY","","",73,null],[13,"EINPROGRESS","","",73,null],[13,"ESTALE","","",73,null],[13,"EUCLEAN","","",73,null],[13,"ENOTNAM","","",73,null],[13,"ENAVAIL","","",73,null],[13,"EISNAM","","",73,null],[13,"EREMOTEIO","","",73,null],[13,"EDQUOT","","",73,null],[13,"ENOMEDIUM","","",73,null],[13,"EMEDIUMTYPE","","",73,null],[13,"ECANCELED","","",73,null],[13,"ENOKEY","","",73,null],[13,"EKEYEXPIRED","","",73,null],[13,"EKEYREVOKED","","",73,null],[13,"EKEYREJECTED","","",73,null],[13,"EOWNERDEAD","","",73,null],[13,"ENOTRECOVERABLE","","",73,null],[13,"ERFKILL","","",73,null],[13,"EHWPOISON","","",73,null],[5,"from_i32","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"errno"}}],[5,"errno","","Returns the platform-specific value of errno",null,{"inputs":[],"output":{"name":"i32"}}],[11,"eq","nix","",73,null],[11,"clone","","",73,null],[11,"fmt","","",73,null],[17,"EWOULDBLOCK","nix::errno","",null,null],[17,"EDEADLOCK","","",null,null],[8,"ErrnoSentinel","","The sentinel value indicates that a function failed and more detailed\ninformation about the error can be found in `errno`",null,null],[10,"sentinel","","",75,{"inputs":[],"output":{"name":"self"}}],[11,"last","nix","",73,{"inputs":[],"output":{"name":"self"}}],[11,"desc","","",73,null],[11,"from_i32","","",73,{"inputs":[{"name":"i32"}],"output":{"name":"errno"}}],[11,"clear","","",73,null],[11,"result","","Returns `Ok(value)` if it does not contain the sentinel value. This\nshould not be used when `-1` is not the errno sentinel value.",73,{"inputs":[{"name":"s"}],"output":{"name":"result"}}],[11,"description","","",73,null],[11,"fmt","","",73,null],[11,"from","std::io::error","",76,{"inputs":[{"name":"errno"}],"output":{"name":"self"}}],[0,"features","nix","",null,null],[5,"socket_atomic_cloexec","nix::features","",null,{"inputs":[],"output":{"name":"bool"}}],[0,"fcntl","nix","",null,null],[3,"SpliceFFlags","nix::fcntl","",null,null],[3,"OFlag","","",null,null],[3,"FdFlag","","",null,null],[3,"SealFlag","","",null,null],[4,"FcntlArg","","",null,null],[13,"F_DUPFD","","",77,null],[13,"F_DUPFD_CLOEXEC","","",77,null],[13,"F_GETFD","","",77,null],[13,"F_SETFD","","",77,null],[13,"F_GETFL","","",77,null],[13,"F_SETFL","","",77,null],[13,"F_SETLK","","",77,null],[13,"F_SETLKW","","",77,null],[13,"F_GETLK","","",77,null],[13,"F_OFD_SETLK","","",77,null],[13,"F_OFD_SETLKW","","",77,null],[13,"F_OFD_GETLK","","",77,null],[13,"F_ADD_SEALS","","",77,null],[13,"F_GET_SEALS","","",77,null],[4,"FlockArg","","",null,null],[13,"LockShared","","",78,null],[13,"LockExclusive","","",78,null],[13,"Unlock","","",78,null],[13,"LockSharedNonblock","","",78,null],[13,"LockExclusiveNonblock","","",78,null],[13,"UnlockNonblock","","",78,null],[5,"open","","",null,{"inputs":[{"name":"p"},{"name":"oflag"},{"name":"mode"}],"output":{"name":"result"}}],[5,"fcntl","","",null,{"inputs":[{"name":"rawfd"},{"name":"fcntlarg"}],"output":{"name":"result"}}],[5,"flock","","",null,{"inputs":[{"name":"rawfd"},{"name":"flockarg"}],"output":{"name":"result"}}],[5,"splice","","",null,{"inputs":[{"name":"rawfd"},{"name":"option"},{"name":"rawfd"},{"name":"option"},{"name":"usize"},{"name":"splicefflags"}],"output":{"name":"result"}}],[5,"tee","","",null,{"inputs":[{"name":"rawfd"},{"name":"rawfd"},{"name":"usize"},{"name":"splicefflags"}],"output":{"name":"result"}}],[5,"vmsplice","","",null,null],[11,"hash","","",79,null],[11,"cmp","","",79,null],[11,"partial_cmp","","",79,null],[11,"lt","","",79,null],[11,"le","","",79,null],[11,"gt","","",79,null],[11,"ge","","",79,null],[11,"clone","","",79,null],[11,"eq","","",79,null],[11,"ne","","",79,null],[11,"fmt","","",79,null],[11,"empty","","Returns an empty set of flags.",79,{"inputs":[],"output":{"name":"splicefflags"}}],[11,"all","","Returns the set containing all flags.",79,{"inputs":[],"output":{"name":"splicefflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",79,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",79,{"inputs":[{"name":"c_uint"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",79,{"inputs":[{"name":"c_uint"}],"output":{"name":"splicefflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",79,null],[11,"is_all","","Returns `true` if all flags are currently set.",79,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",79,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",79,null],[11,"insert","","Inserts the specified flags in-place.",79,null],[11,"remove","","Removes the specified flags in-place.",79,null],[11,"toggle","","Toggles the specified flags in-place.",79,null],[11,"bitor","","Returns the union of the two sets of flags.",79,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",79,null],[11,"bitand","","Returns the intersection between the two sets of flags.",79,null],[11,"sub","","Returns the set difference of the two sets of flags.",79,null],[11,"not","","Returns the complement of this set of flags.",79,null],[11,"from_iter","","",79,{"inputs":[{"name":"t"}],"output":{"name":"splicefflags"}}],[11,"hash","","",80,null],[11,"cmp","","",80,null],[11,"partial_cmp","","",80,null],[11,"lt","","",80,null],[11,"le","","",80,null],[11,"gt","","",80,null],[11,"ge","","",80,null],[11,"clone","","",80,null],[11,"eq","","",80,null],[11,"ne","","",80,null],[11,"fmt","","",80,null],[11,"empty","","Returns an empty set of flags.",80,{"inputs":[],"output":{"name":"oflag"}}],[11,"all","","Returns the set containing all flags.",80,{"inputs":[],"output":{"name":"oflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",80,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",80,{"inputs":[{"name":"c_int"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",80,{"inputs":[{"name":"c_int"}],"output":{"name":"oflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",80,null],[11,"is_all","","Returns `true` if all flags are currently set.",80,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",80,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",80,null],[11,"insert","","Inserts the specified flags in-place.",80,null],[11,"remove","","Removes the specified flags in-place.",80,null],[11,"toggle","","Toggles the specified flags in-place.",80,null],[11,"bitor","","Returns the union of the two sets of flags.",80,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",80,null],[11,"bitand","","Returns the intersection between the two sets of flags.",80,null],[11,"sub","","Returns the set difference of the two sets of flags.",80,null],[11,"not","","Returns the complement of this set of flags.",80,null],[11,"from_iter","","",80,{"inputs":[{"name":"t"}],"output":{"name":"oflag"}}],[11,"hash","","",81,null],[11,"cmp","","",81,null],[11,"partial_cmp","","",81,null],[11,"lt","","",81,null],[11,"le","","",81,null],[11,"gt","","",81,null],[11,"ge","","",81,null],[11,"clone","","",81,null],[11,"eq","","",81,null],[11,"ne","","",81,null],[11,"fmt","","",81,null],[11,"empty","","Returns an empty set of flags.",81,{"inputs":[],"output":{"name":"fdflag"}}],[11,"all","","Returns the set containing all flags.",81,{"inputs":[],"output":{"name":"fdflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",81,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",81,{"inputs":[{"name":"c_int"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",81,{"inputs":[{"name":"c_int"}],"output":{"name":"fdflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",81,null],[11,"is_all","","Returns `true` if all flags are currently set.",81,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",81,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",81,null],[11,"insert","","Inserts the specified flags in-place.",81,null],[11,"remove","","Removes the specified flags in-place.",81,null],[11,"toggle","","Toggles the specified flags in-place.",81,null],[11,"bitor","","Returns the union of the two sets of flags.",81,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",81,null],[11,"bitand","","Returns the intersection between the two sets of flags.",81,null],[11,"sub","","Returns the set difference of the two sets of flags.",81,null],[11,"not","","Returns the complement of this set of flags.",81,null],[11,"from_iter","","",81,{"inputs":[{"name":"t"}],"output":{"name":"fdflag"}}],[11,"hash","","",82,null],[11,"cmp","","",82,null],[11,"partial_cmp","","",82,null],[11,"lt","","",82,null],[11,"le","","",82,null],[11,"gt","","",82,null],[11,"ge","","",82,null],[11,"clone","","",82,null],[11,"eq","","",82,null],[11,"ne","","",82,null],[11,"fmt","","",82,null],[11,"empty","","Returns an empty set of flags.",82,{"inputs":[],"output":{"name":"sealflag"}}],[11,"all","","Returns the set containing all flags.",82,{"inputs":[],"output":{"name":"sealflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",82,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",82,{"inputs":[{"name":"c_int"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",82,{"inputs":[{"name":"c_int"}],"output":{"name":"sealflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",82,null],[11,"is_all","","Returns `true` if all flags are currently set.",82,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",82,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",82,null],[11,"insert","","Inserts the specified flags in-place.",82,null],[11,"remove","","Removes the specified flags in-place.",82,null],[11,"toggle","","Toggles the specified flags in-place.",82,null],[11,"bitor","","Returns the union of the two sets of flags.",82,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",82,null],[11,"bitand","","Returns the intersection between the two sets of flags.",82,null],[11,"sub","","Returns the set difference of the two sets of flags.",82,null],[11,"not","","Returns the complement of this set of flags.",82,null],[11,"from_iter","","",82,{"inputs":[{"name":"t"}],"output":{"name":"sealflag"}}],[17,"SPLICE_F_MOVE","","",null,null],[17,"SPLICE_F_NONBLOCK","","",null,null],[17,"SPLICE_F_MORE","","",null,null],[17,"SPLICE_F_GIFT","","",null,null],[17,"O_ACCMODE","","",null,null],[17,"O_RDONLY","","",null,null],[17,"O_WRONLY","","",null,null],[17,"O_RDWR","","",null,null],[17,"O_CREAT","","",null,null],[17,"O_EXCL","","",null,null],[17,"O_NOCTTY","","",null,null],[17,"O_TRUNC","","",null,null],[17,"O_APPEND","","",null,null],[17,"O_NONBLOCK","","",null,null],[17,"O_DSYNC","","",null,null],[17,"O_DIRECT","","",null,null],[17,"O_LARGEFILE","","",null,null],[17,"O_DIRECTORY","","",null,null],[17,"O_NOFOLLOW","","",null,null],[17,"O_NOATIME","","",null,null],[17,"O_CLOEXEC","","",null,null],[17,"O_SYNC","","",null,null],[17,"O_PATH","","",null,null],[17,"O_TMPFILE","","",null,null],[17,"O_NDELAY","","",null,null],[17,"FD_CLOEXEC","","",null,null],[17,"F_SEAL_SEAL","","",null,null],[17,"F_SEAL_SHRINK","","",null,null],[17,"F_SEAL_GROW","","",null,null],[17,"F_SEAL_WRITE","","",null,null],[0,"mount","nix","",null,null],[3,"MsFlags","nix::mount","",null,null],[3,"MntFlags","","",null,null],[5,"mount","","",null,{"inputs":[{"name":"option"},{"name":"p2"},{"name":"option"},{"name":"msflags"},{"name":"option"}],"output":{"name":"result"}}],[5,"umount","","",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"umount2","","",null,{"inputs":[{"name":"p"},{"name":"mntflags"}],"output":{"name":"result"}}],[17,"MS_RDONLY","","",null,null],[17,"MS_NOSUID","","",null,null],[17,"MS_NODEV","","",null,null],[17,"MS_NOEXEC","","",null,null],[17,"MS_SYNCHRONOUS","","",null,null],[17,"MS_REMOUNT","","",null,null],[17,"MS_MANDLOCK","","",null,null],[17,"MS_DIRSYNC","","",null,null],[17,"MS_NOATIME","","",null,null],[17,"MS_NODIRATIME","","",null,null],[17,"MS_BIND","","",null,null],[17,"MS_MOVE","","",null,null],[17,"MS_REC","","",null,null],[17,"MS_VERBOSE","","",null,null],[17,"MS_SILENT","","",null,null],[17,"MS_POSIXACL","","",null,null],[17,"MS_UNBINDABLE","","",null,null],[17,"MS_PRIVATE","","",null,null],[17,"MS_SLAVE","","",null,null],[17,"MS_SHARED","","",null,null],[17,"MS_RELATIME","","",null,null],[17,"MS_KERNMOUNT","","",null,null],[17,"MS_I_VERSION","","",null,null],[17,"MS_STRICTATIME","","",null,null],[17,"MS_NOSEC","","",null,null],[17,"MS_BORN","","",null,null],[17,"MS_ACTIVE","","",null,null],[17,"MS_NOUSER","","",null,null],[17,"MS_RMT_MASK","","",null,null],[17,"MS_MGC_VAL","","",null,null],[17,"MS_MGC_MSK","","",null,null],[17,"MNT_FORCE","","",null,null],[17,"MNT_DETACH","","",null,null],[17,"MNT_EXPIRE","","",null,null],[11,"hash","","",83,null],[11,"cmp","","",83,null],[11,"partial_cmp","","",83,null],[11,"lt","","",83,null],[11,"le","","",83,null],[11,"gt","","",83,null],[11,"ge","","",83,null],[11,"clone","","",83,null],[11,"eq","","",83,null],[11,"ne","","",83,null],[11,"fmt","","",83,null],[11,"empty","","Returns an empty set of flags.",83,{"inputs":[],"output":{"name":"msflags"}}],[11,"all","","Returns the set containing all flags.",83,{"inputs":[],"output":{"name":"msflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",83,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",83,{"inputs":[{"name":"c_ulong"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",83,{"inputs":[{"name":"c_ulong"}],"output":{"name":"msflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",83,null],[11,"is_all","","Returns `true` if all flags are currently set.",83,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",83,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",83,null],[11,"insert","","Inserts the specified flags in-place.",83,null],[11,"remove","","Removes the specified flags in-place.",83,null],[11,"toggle","","Toggles the specified flags in-place.",83,null],[11,"bitor","","Returns the union of the two sets of flags.",83,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",83,null],[11,"bitand","","Returns the intersection between the two sets of flags.",83,null],[11,"sub","","Returns the set difference of the two sets of flags.",83,null],[11,"not","","Returns the complement of this set of flags.",83,null],[11,"from_iter","","",83,{"inputs":[{"name":"t"}],"output":{"name":"msflags"}}],[11,"hash","","",84,null],[11,"cmp","","",84,null],[11,"partial_cmp","","",84,null],[11,"lt","","",84,null],[11,"le","","",84,null],[11,"gt","","",84,null],[11,"ge","","",84,null],[11,"clone","","",84,null],[11,"eq","","",84,null],[11,"ne","","",84,null],[11,"fmt","","",84,null],[11,"empty","","Returns an empty set of flags.",84,{"inputs":[],"output":{"name":"mntflags"}}],[11,"all","","Returns the set containing all flags.",84,{"inputs":[],"output":{"name":"mntflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",84,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",84,{"inputs":[{"name":"c_int"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",84,{"inputs":[{"name":"c_int"}],"output":{"name":"mntflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",84,null],[11,"is_all","","Returns `true` if all flags are currently set.",84,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",84,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",84,null],[11,"insert","","Inserts the specified flags in-place.",84,null],[11,"remove","","Removes the specified flags in-place.",84,null],[11,"toggle","","Toggles the specified flags in-place.",84,null],[11,"bitor","","Returns the union of the two sets of flags.",84,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",84,null],[11,"bitand","","Returns the intersection between the two sets of flags.",84,null],[11,"sub","","Returns the set difference of the two sets of flags.",84,null],[11,"not","","Returns the complement of this set of flags.",84,null],[11,"from_iter","","",84,{"inputs":[{"name":"t"}],"output":{"name":"mntflags"}}],[0,"mqueue","nix","Posix Message Queue functions",null,null],[3,"MQ_OFlag","nix::mqueue","",null,null],[3,"FdFlag","","",null,null],[3,"MqAttr","","",null,null],[5,"mq_open","","",null,{"inputs":[{"name":"cstring"},{"name":"mq_oflag"},{"name":"mode"},{"name":"option"}],"output":{"name":"result"}}],[5,"mq_unlink","","",null,{"inputs":[{"name":"cstring"}],"output":{"name":"result"}}],[5,"mq_close","","",null,{"inputs":[{"name":"mqd_t"}],"output":{"name":"result"}}],[5,"mq_receive","","",null,null],[5,"mq_send","","",null,null],[5,"mq_getattr","","",null,{"inputs":[{"name":"mqd_t"}],"output":{"name":"result"}}],[5,"mq_setattr","","Set the attributes of the message queue. Only `O_NONBLOCK` can be set, everything else will be ignored\nReturns the old attributes\nIt is recommend to use the `mq_set_nonblock()` and `mq_remove_nonblock()` convenience functions as they are easier to use",null,{"inputs":[{"name":"mqd_t"},{"name":"mqattr"}],"output":{"name":"result"}}],[5,"mq_set_nonblock","","Convenience function.\nSets the `O_NONBLOCK` attribute for a given message queue descriptor\nReturns the old attributes",null,{"inputs":[{"name":"mqd_t"}],"output":{"name":"result"}}],[5,"mq_remove_nonblock","","Convenience function.\nRemoves `O_NONBLOCK` attribute for a given message queue descriptor\nReturns the old attributes",null,{"inputs":[{"name":"mqd_t"}],"output":{"name":"result"}}],[17,"O_RDONLY","","",null,null],[17,"O_WRONLY","","",null,null],[17,"O_RDWR","","",null,null],[17,"O_CREAT","","",null,null],[17,"O_EXCL","","",null,null],[17,"O_NONBLOCK","","",null,null],[17,"O_CLOEXEC","","",null,null],[17,"FD_CLOEXEC","","",null,null],[11,"hash","","",85,null],[11,"cmp","","",85,null],[11,"partial_cmp","","",85,null],[11,"lt","","",85,null],[11,"le","","",85,null],[11,"gt","","",85,null],[11,"ge","","",85,null],[11,"clone","","",85,null],[11,"eq","","",85,null],[11,"ne","","",85,null],[11,"fmt","","",85,null],[11,"empty","","Returns an empty set of flags.",85,{"inputs":[],"output":{"name":"mq_oflag"}}],[11,"all","","Returns the set containing all flags.",85,{"inputs":[],"output":{"name":"mq_oflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",85,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",85,{"inputs":[{"name":"c_int"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",85,{"inputs":[{"name":"c_int"}],"output":{"name":"mq_oflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",85,null],[11,"is_all","","Returns `true` if all flags are currently set.",85,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",85,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",85,null],[11,"insert","","Inserts the specified flags in-place.",85,null],[11,"remove","","Removes the specified flags in-place.",85,null],[11,"toggle","","Toggles the specified flags in-place.",85,null],[11,"bitor","","Returns the union of the two sets of flags.",85,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",85,null],[11,"bitand","","Returns the intersection between the two sets of flags.",85,null],[11,"sub","","Returns the set difference of the two sets of flags.",85,null],[11,"not","","Returns the complement of this set of flags.",85,null],[11,"from_iter","","",85,{"inputs":[{"name":"t"}],"output":{"name":"mq_oflag"}}],[11,"hash","","",86,null],[11,"cmp","","",86,null],[11,"partial_cmp","","",86,null],[11,"lt","","",86,null],[11,"le","","",86,null],[11,"gt","","",86,null],[11,"ge","","",86,null],[11,"clone","","",86,null],[11,"eq","","",86,null],[11,"ne","","",86,null],[11,"fmt","","",86,null],[11,"empty","","Returns an empty set of flags.",86,{"inputs":[],"output":{"name":"fdflag"}}],[11,"all","","Returns the set containing all flags.",86,{"inputs":[],"output":{"name":"fdflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",86,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",86,{"inputs":[{"name":"c_int"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",86,{"inputs":[{"name":"c_int"}],"output":{"name":"fdflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",86,null],[11,"is_all","","Returns `true` if all flags are currently set.",86,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",86,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",86,null],[11,"insert","","Inserts the specified flags in-place.",86,null],[11,"remove","","Removes the specified flags in-place.",86,null],[11,"toggle","","Toggles the specified flags in-place.",86,null],[11,"bitor","","Returns the union of the two sets of flags.",86,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",86,null],[11,"bitand","","Returns the intersection between the two sets of flags.",86,null],[11,"sub","","Returns the set difference of the two sets of flags.",86,null],[11,"not","","Returns the complement of this set of flags.",86,null],[11,"from_iter","","",86,{"inputs":[{"name":"t"}],"output":{"name":"fdflag"}}],[11,"clone","","",87,null],[11,"eq","","",87,null],[11,"new","","",87,{"inputs":[{"name":"c_long"},{"name":"c_long"},{"name":"c_long"},{"name":"c_long"}],"output":{"name":"mqattr"}}],[11,"flags","","",87,null],[0,"poll","nix","",null,null],[3,"PollFd","nix::poll","",null,null],[3,"EventFlags","","",null,null],[5,"poll","","",null,null],[17,"POLLIN","","",null,null],[17,"POLLPRI","","",null,null],[17,"POLLOUT","","",null,null],[17,"POLLRDNORM","","",null,null],[17,"POLLWRNORM","","",null,null],[17,"POLLRDBAND","","",null,null],[17,"POLLWRBAND","","",null,null],[17,"POLLERR","","",null,null],[17,"POLLHUP","","",null,null],[17,"POLLNVAL","","",null,null],[11,"clone","","",88,null],[11,"new","","",88,{"inputs":[{"name":"c_int"},{"name":"eventflags"},{"name":"eventflags"}],"output":{"name":"pollfd"}}],[11,"revents","","",88,null],[11,"hash","","",89,null],[11,"cmp","","",89,null],[11,"partial_cmp","","",89,null],[11,"lt","","",89,null],[11,"le","","",89,null],[11,"gt","","",89,null],[11,"ge","","",89,null],[11,"clone","","",89,null],[11,"eq","","",89,null],[11,"ne","","",89,null],[11,"fmt","","",89,null],[11,"empty","","Returns an empty set of flags.",89,{"inputs":[],"output":{"name":"eventflags"}}],[11,"all","","Returns the set containing all flags.",89,{"inputs":[],"output":{"name":"eventflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",89,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",89,{"inputs":[{"name":"c_short"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",89,{"inputs":[{"name":"c_short"}],"output":{"name":"eventflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",89,null],[11,"is_all","","Returns `true` if all flags are currently set.",89,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",89,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",89,null],[11,"insert","","Inserts the specified flags in-place.",89,null],[11,"remove","","Removes the specified flags in-place.",89,null],[11,"toggle","","Toggles the specified flags in-place.",89,null],[11,"bitor","","Returns the union of the two sets of flags.",89,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",89,null],[11,"bitand","","Returns the intersection between the two sets of flags.",89,null],[11,"sub","","Returns the set difference of the two sets of flags.",89,null],[11,"not","","Returns the complement of this set of flags.",89,null],[11,"from_iter","","",89,{"inputs":[{"name":"t"}],"output":{"name":"eventflags"}}],[0,"net","nix","",null,null],[0,"if_","nix::net","Network interface name resolution.",null,null],[5,"if_nametoindex","nix::net::if_","Resolve an interface into a interface number.",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[0,"sched","nix","",null,null],[3,"CloneFlags","nix::sched","",null,null],[3,"CpuSet","","",null,null],[5,"sched_setaffinity","","",null,{"inputs":[{"name":"isize"},{"name":"cpuset"}],"output":{"name":"result"}}],[5,"clone","","",null,null],[5,"unshare","","",null,{"inputs":[{"name":"cloneflags"}],"output":{"name":"result"}}],[5,"setns","","",null,{"inputs":[{"name":"rawfd"},{"name":"cloneflags"}],"output":{"name":"result"}}],[6,"CloneCb","","",null,null],[17,"CLONE_VM","","",null,null],[17,"CLONE_FS","","",null,null],[17,"CLONE_FILES","","",null,null],[17,"CLONE_SIGHAND","","",null,null],[17,"CLONE_PTRACE","","",null,null],[17,"CLONE_VFORK","","",null,null],[17,"CLONE_PARENT","","",null,null],[17,"CLONE_THREAD","","",null,null],[17,"CLONE_NEWNS","","",null,null],[17,"CLONE_SYSVSEM","","",null,null],[17,"CLONE_SETTLS","","",null,null],[17,"CLONE_PARENT_SETTID","","",null,null],[17,"CLONE_CHILD_CLEARTID","","",null,null],[17,"CLONE_DETACHED","","",null,null],[17,"CLONE_UNTRACED","","",null,null],[17,"CLONE_CHILD_SETTID","","",null,null],[17,"CLONE_NEWUTS","","",null,null],[17,"CLONE_NEWIPC","","",null,null],[17,"CLONE_NEWUSER","","",null,null],[17,"CLONE_NEWPID","","",null,null],[17,"CLONE_NEWNET","","",null,null],[17,"CLONE_IO","","",null,null],[11,"hash","","",90,null],[11,"cmp","","",90,null],[11,"partial_cmp","","",90,null],[11,"lt","","",90,null],[11,"le","","",90,null],[11,"gt","","",90,null],[11,"ge","","",90,null],[11,"clone","","",90,null],[11,"eq","","",90,null],[11,"ne","","",90,null],[11,"fmt","","",90,null],[11,"empty","","Returns an empty set of flags.",90,{"inputs":[],"output":{"name":"cloneflags"}}],[11,"all","","Returns the set containing all flags.",90,{"inputs":[],"output":{"name":"cloneflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",90,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",90,{"inputs":[{"name":"c_int"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",90,{"inputs":[{"name":"c_int"}],"output":{"name":"cloneflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",90,null],[11,"is_all","","Returns `true` if all flags are currently set.",90,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",90,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",90,null],[11,"insert","","Inserts the specified flags in-place.",90,null],[11,"remove","","Removes the specified flags in-place.",90,null],[11,"toggle","","Toggles the specified flags in-place.",90,null],[11,"bitor","","Returns the union of the two sets of flags.",90,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",90,null],[11,"bitand","","Returns the intersection between the two sets of flags.",90,null],[11,"sub","","Returns the set difference of the two sets of flags.",90,null],[11,"not","","Returns the complement of this set of flags.",90,null],[11,"from_iter","","",90,{"inputs":[{"name":"t"}],"output":{"name":"cloneflags"}}],[11,"clone","","",91,null],[11,"new","","",91,{"inputs":[],"output":{"name":"cpuset"}}],[11,"is_set","","",91,null],[11,"set","","",91,null],[11,"unset","","",91,null],[0,"sys","nix","",null,null],[0,"epoll","nix::sys","",null,null],[3,"EpollFlags","nix::sys::epoll","",null,null],[3,"EpollCreateFlags","","",null,null],[3,"EpollEvent","","",null,null],[4,"EpollOp","","",null,null],[13,"EpollCtlAdd","","",92,null],[13,"EpollCtlDel","","",92,null],[13,"EpollCtlMod","","",92,null],[5,"epoll_create","","",null,{"inputs":[],"output":{"name":"result"}}],[5,"epoll_create1","","",null,{"inputs":[{"name":"epollcreateflags"}],"output":{"name":"result"}}],[5,"epoll_ctl","","",null,{"inputs":[{"name":"rawfd"},{"name":"epollop"},{"name":"rawfd"},{"name":"epollevent"}],"output":{"name":"result"}}],[5,"epoll_wait","","",null,null],[17,"EPOLLIN","","",null,null],[17,"EPOLLPRI","","",null,null],[17,"EPOLLOUT","","",null,null],[17,"EPOLLRDNORM","","",null,null],[17,"EPOLLRDBAND","","",null,null],[17,"EPOLLWRNORM","","",null,null],[17,"EPOLLWRBAND","","",null,null],[17,"EPOLLMSG","","",null,null],[17,"EPOLLERR","","",null,null],[17,"EPOLLHUP","","",null,null],[17,"EPOLLRDHUP","","",null,null],[17,"EPOLLEXCLUSIVE","","",null,null],[17,"EPOLLWAKEUP","","",null,null],[17,"EPOLLONESHOT","","",null,null],[17,"EPOLLET","","",null,null],[17,"EPOLL_CLOEXEC","","",null,null],[11,"hash","","",93,null],[11,"cmp","","",93,null],[11,"partial_cmp","","",93,null],[11,"lt","","",93,null],[11,"le","","",93,null],[11,"gt","","",93,null],[11,"ge","","",93,null],[11,"clone","","",93,null],[11,"eq","","",93,null],[11,"ne","","",93,null],[11,"fmt","","",93,null],[11,"empty","","Returns an empty set of flags.",93,{"inputs":[],"output":{"name":"epollflags"}}],[11,"all","","Returns the set containing all flags.",93,{"inputs":[],"output":{"name":"epollflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",93,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",93,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",93,{"inputs":[{"name":"u32"}],"output":{"name":"epollflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",93,null],[11,"is_all","","Returns `true` if all flags are currently set.",93,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",93,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",93,null],[11,"insert","","Inserts the specified flags in-place.",93,null],[11,"remove","","Removes the specified flags in-place.",93,null],[11,"toggle","","Toggles the specified flags in-place.",93,null],[11,"bitor","","Returns the union of the two sets of flags.",93,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",93,null],[11,"bitand","","Returns the intersection between the two sets of flags.",93,null],[11,"sub","","Returns the set difference of the two sets of flags.",93,null],[11,"not","","Returns the complement of this set of flags.",93,null],[11,"from_iter","","",93,{"inputs":[{"name":"t"}],"output":{"name":"epollflags"}}],[11,"clone","","",92,null],[11,"hash","","",94,null],[11,"cmp","","",94,null],[11,"partial_cmp","","",94,null],[11,"lt","","",94,null],[11,"le","","",94,null],[11,"gt","","",94,null],[11,"ge","","",94,null],[11,"clone","","",94,null],[11,"eq","","",94,null],[11,"ne","","",94,null],[11,"fmt","","",94,null],[11,"empty","","Returns an empty set of flags.",94,{"inputs":[],"output":{"name":"epollcreateflags"}}],[11,"all","","Returns the set containing all flags.",94,{"inputs":[],"output":{"name":"epollcreateflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",94,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",94,{"inputs":[{"name":"c_int"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",94,{"inputs":[{"name":"c_int"}],"output":{"name":"epollcreateflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",94,null],[11,"is_all","","Returns `true` if all flags are currently set.",94,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",94,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",94,null],[11,"insert","","Inserts the specified flags in-place.",94,null],[11,"remove","","Removes the specified flags in-place.",94,null],[11,"toggle","","Toggles the specified flags in-place.",94,null],[11,"bitor","","Returns the union of the two sets of flags.",94,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",94,null],[11,"bitand","","Returns the intersection between the two sets of flags.",94,null],[11,"sub","","Returns the set difference of the two sets of flags.",94,null],[11,"not","","Returns the complement of this set of flags.",94,null],[11,"from_iter","","",94,{"inputs":[{"name":"t"}],"output":{"name":"epollcreateflags"}}],[11,"clone","","",95,null],[11,"new","","",95,{"inputs":[{"name":"epollflags"},{"name":"u64"}],"output":{"name":"epollevent"}}],[11,"events","","",95,null],[11,"data","","",95,null],[0,"memfd","nix::sys","",null,null],[3,"MemFdCreateFlag","nix::sys::memfd","",null,null],[5,"memfd_create","","",null,{"inputs":[{"name":"cstr"},{"name":"memfdcreateflag"}],"output":{"name":"result"}}],[17,"MFD_CLOEXEC","","",null,null],[17,"MFD_ALLOW_SEALING","","",null,null],[11,"hash","","",96,null],[11,"cmp","","",96,null],[11,"partial_cmp","","",96,null],[11,"lt","","",96,null],[11,"le","","",96,null],[11,"gt","","",96,null],[11,"ge","","",96,null],[11,"clone","","",96,null],[11,"eq","","",96,null],[11,"ne","","",96,null],[11,"fmt","","",96,null],[11,"empty","","Returns an empty set of flags.",96,{"inputs":[],"output":{"name":"memfdcreateflag"}}],[11,"all","","Returns the set containing all flags.",96,{"inputs":[],"output":{"name":"memfdcreateflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",96,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",96,{"inputs":[{"name":"c_uint"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",96,{"inputs":[{"name":"c_uint"}],"output":{"name":"memfdcreateflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",96,null],[11,"is_all","","Returns `true` if all flags are currently set.",96,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",96,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",96,null],[11,"insert","","Inserts the specified flags in-place.",96,null],[11,"remove","","Removes the specified flags in-place.",96,null],[11,"toggle","","Toggles the specified flags in-place.",96,null],[11,"bitor","","Returns the union of the two sets of flags.",96,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",96,null],[11,"bitand","","Returns the intersection between the two sets of flags.",96,null],[11,"sub","","Returns the set difference of the two sets of flags.",96,null],[11,"not","","Returns the complement of this set of flags.",96,null],[11,"from_iter","","",96,{"inputs":[{"name":"t"}],"output":{"name":"memfdcreateflag"}}],[0,"ioctl","nix::sys","Provide helpers for making ioctl system calls",null,null],[5,"ioc_dir","nix::sys::ioctl","Extracts the &quot;direction&quot; (read/write/none) from an encoded ioctl command.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[5,"ioc_type","","Extracts the type from an encoded ioctl command.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u32"}}],[5,"ioc_nr","","Extracts the ioctl number from an encoded ioctl command.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u32"}}],[5,"ioc_size","","Extracts the size from an encoded ioctl command.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u32"}}],[17,"NRBITS","","",null,null],[17,"TYPEBITS","","",null,null],[17,"NONE","","",null,null],[17,"READ","","",null,null],[17,"WRITE","","",null,null],[17,"SIZEBITS","","",null,null],[17,"DIRBITS","","",null,null],[17,"NRSHIFT","","",null,null],[17,"TYPESHIFT","","",null,null],[17,"SIZESHIFT","","",null,null],[17,"DIRSHIFT","","",null,null],[17,"NRMASK","","",null,null],[17,"TYPEMASK","","",null,null],[17,"SIZEMASK","","",null,null],[17,"DIRMASK","","",null,null],[17,"IN","","",null,null],[17,"OUT","","",null,null],[17,"INOUT","","",null,null],[17,"SIZE_MASK","","",null,null],[0,"sendfile","nix::sys","",null,null],[5,"sendfile","nix::sys::sendfile","",null,{"inputs":[{"name":"rawfd"},{"name":"rawfd"},{"name":"option"},{"name":"usize"}],"output":{"name":"result"}}],[0,"signal","nix::sys","",null,null],[3,"SignalIterator","nix::sys::signal","",null,null],[3,"SaFlags","","",null,null],[3,"SigFlags","","",null,null],[3,"SigSet","","",null,null],[3,"SigAction","","",null,null],[4,"Signal","","",null,null],[13,"SIGHUP","","",97,null],[13,"SIGINT","","",97,null],[13,"SIGQUIT","","",97,null],[13,"SIGILL","","",97,null],[13,"SIGTRAP","","",97,null],[13,"SIGABRT","","",97,null],[13,"SIGBUS","","",97,null],[13,"SIGFPE","","",97,null],[13,"SIGKILL","","",97,null],[13,"SIGUSR1","","",97,null],[13,"SIGSEGV","","",97,null],[13,"SIGUSR2","","",97,null],[13,"SIGPIPE","","",97,null],[13,"SIGALRM","","",97,null],[13,"SIGTERM","","",97,null],[13,"SIGSTKFLT","","",97,null],[13,"SIGCHLD","","",97,null],[13,"SIGCONT","","",97,null],[13,"SIGSTOP","","",97,null],[13,"SIGTSTP","","",97,null],[13,"SIGTTIN","","",97,null],[13,"SIGTTOU","","",97,null],[13,"SIGURG","","",97,null],[13,"SIGXCPU","","",97,null],[13,"SIGXFSZ","","",97,null],[13,"SIGVTALRM","","",97,null],[13,"SIGPROF","","",97,null],[13,"SIGWINCH","","",97,null],[13,"SIGIO","","",97,null],[13,"SIGPWR","","",97,null],[13,"SIGSYS","","",97,null],[4,"SigHandler","","",null,null],[13,"SigDfl","","",98,null],[13,"SigIgn","","",98,null],[13,"Handler","","",98,null],[13,"SigAction","","",98,null],[5,"sigaction","","",null,{"inputs":[{"name":"signal"},{"name":"sigaction"}],"output":{"name":"result"}}],[5,"pthread_sigmask","","Manages the signal mask (set of blocked signals) for the calling thread.",null,{"inputs":[{"name":"sigflags"},{"name":"option"},{"name":"option"}],"output":{"name":"result"}}],[5,"kill","","",null,{"inputs":[{"name":"pid_t"},{"name":"signal"}],"output":{"name":"result"}}],[5,"raise","","",null,{"inputs":[{"name":"signal"}],"output":{"name":"result"}}],[17,"NSIG","","",null,null],[17,"SIGIOT","","",null,null],[17,"SIGPOLL","","",null,null],[17,"SIGUNUSED","","",null,null],[17,"SA_NOCLDSTOP","","",null,null],[17,"SA_NOCLDWAIT","","",null,null],[17,"SA_NODEFER","","",null,null],[17,"SA_ONSTACK","","",null,null],[17,"SA_RESETHAND","","",null,null],[17,"SA_RESTART","","",null,null],[17,"SA_SIGINFO","","",null,null],[17,"SIG_BLOCK","","",null,null],[17,"SIG_UNBLOCK","","",null,null],[17,"SIG_SETMASK","","",null,null],[11,"eq","","",97,null],[11,"fmt","","",97,null],[11,"clone","","",97,null],[11,"next","","",99,null],[11,"iterator","","",97,{"inputs":[],"output":{"name":"signaliterator"}}],[11,"from_c_int","","",97,{"inputs":[{"name":"c_int"}],"output":{"name":"result"}}],[11,"hash","","",100,null],[11,"cmp","","",100,null],[11,"partial_cmp","","",100,null],[11,"lt","","",100,null],[11,"le","","",100,null],[11,"gt","","",100,null],[11,"ge","","",100,null],[11,"clone","","",100,null],[11,"eq","","",100,null],[11,"ne","","",100,null],[11,"fmt","","",100,null],[11,"empty","","Returns an empty set of flags.",100,{"inputs":[],"output":{"name":"saflags"}}],[11,"all","","Returns the set containing all flags.",100,{"inputs":[],"output":{"name":"saflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",100,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",100,{"inputs":[{"name":"c_int"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",100,{"inputs":[{"name":"c_int"}],"output":{"name":"saflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",100,null],[11,"is_all","","Returns `true` if all flags are currently set.",100,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",100,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",100,null],[11,"insert","","Inserts the specified flags in-place.",100,null],[11,"remove","","Removes the specified flags in-place.",100,null],[11,"toggle","","Toggles the specified flags in-place.",100,null],[11,"bitor","","Returns the union of the two sets of flags.",100,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",100,null],[11,"bitand","","Returns the intersection between the two sets of flags.",100,null],[11,"sub","","Returns the set difference of the two sets of flags.",100,null],[11,"not","","Returns the complement of this set of flags.",100,null],[11,"from_iter","","",100,{"inputs":[{"name":"t"}],"output":{"name":"saflags"}}],[11,"hash","","",101,null],[11,"cmp","","",101,null],[11,"partial_cmp","","",101,null],[11,"lt","","",101,null],[11,"le","","",101,null],[11,"gt","","",101,null],[11,"ge","","",101,null],[11,"clone","","",101,null],[11,"eq","","",101,null],[11,"ne","","",101,null],[11,"fmt","","",101,null],[11,"empty","","Returns an empty set of flags.",101,{"inputs":[],"output":{"name":"sigflags"}}],[11,"all","","Returns the set containing all flags.",101,{"inputs":[],"output":{"name":"sigflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",101,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",101,{"inputs":[{"name":"c_int"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",101,{"inputs":[{"name":"c_int"}],"output":{"name":"sigflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",101,null],[11,"is_all","","Returns `true` if all flags are currently set.",101,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",101,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",101,null],[11,"insert","","Inserts the specified flags in-place.",101,null],[11,"remove","","Removes the specified flags in-place.",101,null],[11,"toggle","","Toggles the specified flags in-place.",101,null],[11,"bitor","","Returns the union of the two sets of flags.",101,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",101,null],[11,"bitand","","Returns the intersection between the two sets of flags.",101,null],[11,"sub","","Returns the set difference of the two sets of flags.",101,null],[11,"not","","Returns the complement of this set of flags.",101,null],[11,"from_iter","","",101,{"inputs":[{"name":"t"}],"output":{"name":"sigflags"}}],[11,"clone","","",102,null],[11,"all","","",102,{"inputs":[],"output":{"name":"sigset"}}],[11,"empty","","",102,{"inputs":[],"output":{"name":"sigset"}}],[11,"add","","",102,null],[11,"clear","","",102,null],[11,"remove","","",102,null],[11,"contains","","",102,null],[11,"extend","","",102,null],[11,"thread_get_mask","","Gets the currently blocked (masked) set of signals for the calling thread.",102,{"inputs":[],"output":{"name":"result"}}],[11,"thread_set_mask","","Sets the set of signals as the signal mask for the calling thread.",102,null],[11,"thread_block","","Adds the set of signals to the signal mask for the calling thread.",102,null],[11,"thread_unblock","","Removes the set of signals from the signal mask for the calling thread.",102,null],[11,"thread_swap_mask","","Sets the set of signals as the signal mask, and returns the old mask.",102,null],[11,"wait","","Suspends execution of the calling thread until one of the signals in the\nsignal mask becomes pending, and returns the accepted signal.",102,null],[11,"as_ref","","",102,null],[11,"eq","","",98,null],[11,"ne","","",98,null],[11,"clone","","",98,null],[11,"new","","This function will set or unset the flag `SA_SIGINFO` depending on the\ntype of the `handler` argument.",103,{"inputs":[{"name":"sighandler"},{"name":"saflags"},{"name":"sigset"}],"output":{"name":"sigaction"}}],[0,"socket","nix::sys","Socket interface functions",null,null],[3,"in_addr","nix::sys::socket","",null,null],[12,"s_addr","","",6,null],[3,"in6_addr","","",null,null],[12,"s6_addr","","",7,null],[3,"sockaddr","","",null,null],[12,"sa_family","","",15,null],[12,"sa_data","","",15,null],[3,"sockaddr_in","","",null,null],[12,"sin_family","","",16,null],[12,"sin_port","","",16,null],[12,"sin_addr","","",16,null],[12,"sin_zero","","",16,null],[3,"sockaddr_in6","","",null,null],[12,"sin6_family","","",17,null],[12,"sin6_port","","",17,null],[12,"sin6_flowinfo","","",17,null],[12,"sin6_addr","","",17,null],[12,"sin6_scope_id","","",17,null],[3,"sockaddr_un","","",null,null],[12,"sun_family","","",18,null],[12,"sun_path","","",18,null],[6,"sa_family_t","","",null,null],[3,"sockaddr_storage","","",null,null],[12,"ss_family","","",19,null],[3,"UnixAddr","","A wrapper around `sockaddr_un`. We track the length of `sun_path`,\nbecause it may not be null-terminated (unconnected and abstract\nsockets). Note that the actual sockaddr length is greater by\n`size_of::&lt;sa_family_t&gt;()`.",null,null],[12,"0","","",104,null],[12,"1","","",104,null],[3,"Ipv4Addr","","",null,null],[12,"0","","",105,null],[3,"Ipv6Addr","","",null,null],[12,"0","","",106,null],[3,"NetlinkAddr","","",null,null],[12,"0","","",107,null],[3,"ip_mreq","","",null,null],[12,"imr_multiaddr","","",108,null],[12,"imr_interface","","",108,null],[3,"ipv6_mreq","","",null,null],[12,"ipv6mr_multiaddr","","",109,null],[12,"ipv6mr_interface","","",109,null],[3,"MsgFlags","","",null,null],[3,"SockFlag","","",null,null],[3,"CmsgSpace","","A structure used to make room in a cmsghdr passed to recvmsg. The\nsize and alignment match that of a cmsghdr followed by a T, but the\nfields are not accessible, as the actual types will change on a call\nto recvmsg.",null,null],[3,"RecvMsg","","",null,null],[12,"bytes","","",110,null],[12,"address","","",110,null],[12,"flags","","",110,null],[3,"CmsgIterator","","",null,null],[3,"linger","","",null,null],[12,"l_onoff","","",111,null],[12,"l_linger","","",111,null],[3,"ucred","","",null,null],[4,"AddressFamily","","",null,null],[13,"Unix","","",112,null],[13,"Inet","","",112,null],[13,"Inet6","","",112,null],[13,"Netlink","","",112,null],[13,"Packet","","",112,null],[4,"SockAddr","","Represents a socket address",null,null],[13,"Inet","","",113,null],[13,"Unix","","",113,null],[13,"Netlink","","",113,null],[4,"InetAddr","","",null,null],[13,"V4","","",114,null],[13,"V6","","",114,null],[4,"IpAddr","","",null,null],[13,"V4","","",115,null],[13,"V6","","",115,null],[4,"SockType","","",null,null],[13,"Stream","","",116,null],[13,"Datagram","","",116,null],[13,"SeqPacket","","",116,null],[13,"Raw","","",116,null],[13,"Rdm","","",116,null],[4,"ControlMessage","","A type-safe wrapper around a single control message. More types may\nbe added to this enum; do not exhaustively pattern-match it.\n[Further reading](http://man7.org/linux/man-pages/man3/cmsg.3.html)",null,null],[13,"ScmRights","","A message of type SCM_RIGHTS, containing an array of file\ndescriptors passed between processes. See the description in the\n&quot;Ancillary messages&quot; section of the\n[unix(7) man page](http://man7.org/linux/man-pages/man7/unix.7.html).",117,null],[4,"SockLevel","","The protocol level at which to get / set socket options. Used as an\nargument to `getsockopt` and `setsockopt`.",null,null],[13,"Socket","","",118,null],[13,"Tcp","","",118,null],[13,"Ip","","",118,null],[13,"Ipv6","","",118,null],[13,"Udp","","",118,null],[13,"Netlink","","",118,null],[4,"Shutdown","","",null,null],[13,"Read","","Further receptions will be disallowed.",119,null],[13,"Write","","Further  transmissions will be disallowed.",119,null],[13,"Both","","Further receptions and transmissions will be disallowed.",119,null],[5,"sendmsg","","Send data in scatter-gather vectors to a socket, possibly accompanied\nby ancillary data. Optionally direct the message at the given address,\nas with sendto.",null,null],[5,"recvmsg","","Receive message in scatter-gather vectors from a socket, and\noptionally receive ancillary data into the provided buffer.\nIf no ancillary data is desired, use () as the type parameter.",null,null],[5,"socket","","Create an endpoint for communication",null,{"inputs":[{"name":"addressfamily"},{"name":"socktype"},{"name":"sockflag"},{"name":"c_int"}],"output":{"name":"result"}}],[5,"socketpair","","Create a pair of connected sockets",null,{"inputs":[{"name":"addressfamily"},{"name":"socktype"},{"name":"c_int"},{"name":"sockflag"}],"output":{"name":"result"}}],[5,"listen","","Listen for connections on a socket",null,{"inputs":[{"name":"rawfd"},{"name":"usize"}],"output":{"name":"result"}}],[5,"bind","","Bind a name to a socket",null,{"inputs":[{"name":"rawfd"},{"name":"sockaddr"}],"output":{"name":"result"}}],[5,"accept","","Accept a connection on a socket",null,{"inputs":[{"name":"rawfd"}],"output":{"name":"result"}}],[5,"accept4","","Accept a connection on a socket",null,{"inputs":[{"name":"rawfd"},{"name":"sockflag"}],"output":{"name":"result"}}],[5,"connect","","Initiate a connection on a socket",null,{"inputs":[{"name":"rawfd"},{"name":"sockaddr"}],"output":{"name":"result"}}],[5,"recv","","Receive data from a connection-oriented socket. Returns the number of\nbytes read",null,null],[5,"recvfrom","","Receive data from a connectionless or connection-oriented socket. Returns\nthe number of bytes read and the socket address of the sender.",null,null],[5,"sendto","","",null,null],[5,"send","","Send data to a connection-oriented socket. Returns the number of bytes read",null,null],[5,"getsockopt","","Get the current value for the requested socket option",null,{"inputs":[{"name":"rawfd"},{"name":"o"}],"output":{"name":"result"}}],[5,"setsockopt","","Sets the value for the requested socket option",null,{"inputs":[{"name":"rawfd"},{"name":"o"},{"name":"val"}],"output":{"name":"result"}}],[5,"getpeername","","Get the address of the peer connected to the socket `fd`.",null,{"inputs":[{"name":"rawfd"}],"output":{"name":"result"}}],[5,"getsockname","","Get the current address to which the socket `fd` is bound.",null,{"inputs":[{"name":"rawfd"}],"output":{"name":"result"}}],[5,"sockaddr_storage_to_addr","","",null,{"inputs":[{"name":"sockaddr_storage"},{"name":"usize"}],"output":{"name":"result"}}],[5,"shutdown","","Shut down part of a full-duplex connection.",null,{"inputs":[{"name":"rawfd"},{"name":"shutdown"}],"output":{"name":"result"}}],[11,"clone","","",107,null],[11,"eq","","",107,null],[11,"hash","","",107,null],[11,"new","","",107,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"name":"netlinkaddr"}}],[11,"pid","","",107,null],[11,"groups","","",107,null],[11,"fmt","","",107,null],[11,"hash","","",112,null],[11,"fmt","","",112,null],[11,"eq","","",112,null],[11,"clone","","",112,null],[11,"from_std","","",114,{"inputs":[{"name":"socketaddr"}],"output":{"name":"inetaddr"}}],[11,"new","","",114,{"inputs":[{"name":"ipaddr"},{"name":"u16"}],"output":{"name":"inetaddr"}}],[11,"ip","","Gets the IP address associated with this socket address.",114,null],[11,"port","","Gets the port number associated with this socket address",114,null],[11,"to_std","","",114,null],[11,"to_str","","",114,null],[11,"eq","","",114,null],[11,"hash","","",114,null],[11,"clone","","",114,null],[11,"fmt","","",114,null],[11,"new_v4","","Create a new IpAddr that contains an IPv4 address.",115,{"inputs":[{"name":"u8"},{"name":"u8"},{"name":"u8"},{"name":"u8"}],"output":{"name":"ipaddr"}}],[11,"new_v6","","Create a new IpAddr that contains an IPv6 address.",115,{"inputs":[{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"}],"output":{"name":"ipaddr"}}],[11,"fmt","","",115,null],[11,"new","","",105,{"inputs":[{"name":"u8"},{"name":"u8"},{"name":"u8"},{"name":"u8"}],"output":{"name":"ipv4addr"}}],[11,"from_std","","",105,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"ipv4addr"}}],[11,"any","","",105,{"inputs":[],"output":{"name":"ipv4addr"}}],[11,"octets","","",105,null],[11,"to_std","","",105,null],[11,"eq","","",105,null],[11,"hash","","",105,null],[11,"clone","","",105,null],[11,"fmt","","",105,null],[11,"clone","","",106,null],[11,"new","","",106,{"inputs":[{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"}],"output":{"name":"ipv6addr"}}],[11,"from_std","","",106,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"ipv6addr"}}],[11,"segments","","Return the eight 16-bit segments that make up this address",106,null],[11,"to_std","","",106,null],[11,"fmt","","",106,null],[11,"new","","Create a new sockaddr_un representing a filesystem path.",104,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"new_abstract","","Create a new sockaddr_un representing an address in the\n&quot;abstract namespace&quot;. This is a Linux-specific extension,\nprimarily used to allow chrooted processes to communicate with\nspecific daemons.",104,null],[11,"path","","If this address represents a filesystem path, return that path.",104,null],[11,"eq","","",104,null],[11,"hash","","",104,null],[11,"clone","","",104,null],[11,"fmt","","",104,null],[11,"new_inet","","",113,{"inputs":[{"name":"inetaddr"}],"output":{"name":"sockaddr"}}],[11,"new_unix","","",113,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"new_netlink","","",113,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"name":"sockaddr"}}],[11,"family","","",113,null],[11,"to_str","","",113,null],[11,"as_ffi_pair","","",113,null],[11,"eq","","",113,null],[11,"hash","","",113,null],[11,"clone","","",113,null],[11,"fmt","","",113,null],[11,"hash","","",120,null],[11,"cmp","","",120,null],[11,"partial_cmp","","",120,null],[11,"lt","","",120,null],[11,"le","","",120,null],[11,"gt","","",120,null],[11,"ge","","",120,null],[11,"clone","","",120,null],[11,"eq","","",120,null],[11,"ne","","",120,null],[11,"fmt","","",120,null],[11,"empty","","Returns an empty set of flags.",120,{"inputs":[],"output":{"name":"msgflags"}}],[11,"all","","Returns the set containing all flags.",120,{"inputs":[],"output":{"name":"msgflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",120,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",120,{"inputs":[{"name":"c_int"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",120,{"inputs":[{"name":"c_int"}],"output":{"name":"msgflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",120,null],[11,"is_all","","Returns `true` if all flags are currently set.",120,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",120,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",120,null],[11,"insert","","Inserts the specified flags in-place.",120,null],[11,"remove","","Removes the specified flags in-place.",120,null],[11,"toggle","","Toggles the specified flags in-place.",120,null],[11,"bitor","","Returns the union of the two sets of flags.",120,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",120,null],[11,"bitand","","Returns the intersection between the two sets of flags.",120,null],[11,"sub","","Returns the set difference of the two sets of flags.",120,null],[11,"not","","Returns the complement of this set of flags.",120,null],[11,"from_iter","","",120,{"inputs":[{"name":"t"}],"output":{"name":"msgflags"}}],[11,"clone","","",108,null],[11,"fmt","","",108,null],[11,"new","","",108,{"inputs":[{"name":"ipv4addr"},{"name":"option"}],"output":{"name":"ip_mreq"}}],[11,"new","","",109,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"ipv6_mreq"}}],[0,"sockopt","","",null,null],[3,"ReuseAddr","nix::sys::socket::sockopt","",null,null],[3,"ReusePort","","",null,null],[3,"TcpNoDelay","","",null,null],[3,"Linger","","",null,null],[3,"IpAddMembership","","",null,null],[3,"IpDropMembership","","",null,null],[3,"Ipv6AddMembership","","",null,null],[3,"Ipv6DropMembership","","",null,null],[3,"IpMulticastTtl","","",null,null],[3,"IpMulticastLoop","","",null,null],[3,"ReceiveTimeout","","",null,null],[3,"SendTimeout","","",null,null],[3,"Broadcast","","",null,null],[3,"OobInline","","",null,null],[3,"SocketError","","",null,null],[3,"KeepAlive","","",null,null],[3,"PeerCredentials","","",null,null],[3,"TcpKeepIdle","","",null,null],[3,"RcvBuf","","",null,null],[3,"SndBuf","","",null,null],[3,"RcvBufForce","","",null,null],[3,"SndBufForce","","",null,null],[3,"SockType","","",null,null],[3,"AcceptConn","","",null,null],[3,"OriginalDst","","",null,null],[11,"fmt","","",121,null],[11,"clone","","",121,null],[11,"set","","",121,null],[11,"get","","",121,null],[11,"fmt","","",122,null],[11,"clone","","",122,null],[11,"set","","",122,null],[11,"get","","",122,null],[11,"fmt","","",123,null],[11,"clone","","",123,null],[11,"set","","",123,null],[11,"get","","",123,null],[11,"fmt","","",124,null],[11,"clone","","",124,null],[11,"set","","",124,null],[11,"get","","",124,null],[11,"fmt","","",125,null],[11,"clone","","",125,null],[11,"set","","",125,null],[11,"fmt","","",126,null],[11,"clone","","",126,null],[11,"set","","",126,null],[11,"fmt","","",127,null],[11,"clone","","",127,null],[11,"set","","",127,null],[11,"fmt","","",128,null],[11,"clone","","",128,null],[11,"set","","",128,null],[11,"fmt","","",129,null],[11,"clone","","",129,null],[11,"set","","",129,null],[11,"get","","",129,null],[11,"fmt","","",130,null],[11,"clone","","",130,null],[11,"set","","",130,null],[11,"get","","",130,null],[11,"fmt","","",131,null],[11,"clone","","",131,null],[11,"set","","",131,null],[11,"get","","",131,null],[11,"fmt","","",132,null],[11,"clone","","",132,null],[11,"set","","",132,null],[11,"get","","",132,null],[11,"fmt","","",133,null],[11,"clone","","",133,null],[11,"set","","",133,null],[11,"get","","",133,null],[11,"fmt","","",134,null],[11,"clone","","",134,null],[11,"set","","",134,null],[11,"get","","",134,null],[11,"fmt","","",135,null],[11,"clone","","",135,null],[11,"get","","",135,null],[11,"fmt","","",136,null],[11,"clone","","",136,null],[11,"set","","",136,null],[11,"get","","",136,null],[11,"fmt","","",137,null],[11,"clone","","",137,null],[11,"get","","",137,null],[11,"fmt","","",138,null],[11,"clone","","",138,null],[11,"set","","",138,null],[11,"get","","",138,null],[11,"fmt","","",139,null],[11,"clone","","",139,null],[11,"set","","",139,null],[11,"get","","",139,null],[11,"fmt","","",140,null],[11,"clone","","",140,null],[11,"set","","",140,null],[11,"get","","",140,null],[11,"fmt","","",141,null],[11,"clone","","",141,null],[11,"set","","",141,null],[11,"fmt","","",142,null],[11,"clone","","",142,null],[11,"set","","",142,null],[11,"fmt","","",143,null],[11,"clone","","",143,null],[11,"get","","",143,null],[11,"fmt","","",144,null],[11,"clone","","",144,null],[11,"get","","",144,null],[11,"fmt","","",145,null],[11,"clone","","",145,null],[11,"get","","",145,null],[6,"IpMulticastTtl","nix::sys::socket","",null,null],[6,"InAddrT","","",null,null],[17,"AF_UNIX","","",null,null],[17,"AF_LOCAL","","",null,null],[17,"AF_INET","","",null,null],[17,"AF_INET6","","",null,null],[17,"AF_NETLINK","","",null,null],[17,"AF_PACKET","","",null,null],[17,"SOCK_STREAM","","",null,null],[17,"SOCK_DGRAM","","",null,null],[17,"SOCK_SEQPACKET","","",null,null],[17,"SOCK_RAW","","",null,null],[17,"SOCK_RDM","","",null,null],[17,"SOL_IP","","",null,null],[17,"SOL_SOCKET","","",null,null],[17,"SOL_TCP","","",null,null],[17,"SOL_UDP","","",null,null],[17,"SOL_IPV6","","",null,null],[17,"SOL_NETLINK","","",null,null],[17,"IPPROTO_IP","","",null,null],[17,"IPPROTO_IPV6","","",null,null],[17,"IPPROTO_TCP","","",null,null],[17,"IPPROTO_UDP","","",null,null],[17,"SO_ACCEPTCONN","","",null,null],[17,"SO_BINDTODEVICE","","",null,null],[17,"SO_BROADCAST","","",null,null],[17,"SO_BSDCOMPAT","","",null,null],[17,"SO_DEBUG","","",null,null],[17,"SO_DOMAIN","","",null,null],[17,"SO_ERROR","","",null,null],[17,"SO_DONTROUTE","","",null,null],[17,"SO_KEEPALIVE","","",null,null],[17,"SO_LINGER","","",null,null],[17,"SO_MARK","","",null,null],[17,"SO_OOBINLINE","","",null,null],[17,"SO_PASSCRED","","",null,null],[17,"SO_PEEK_OFF","","",null,null],[17,"SO_PEERCRED","","",null,null],[17,"SO_PRIORITY","","",null,null],[17,"SO_PROTOCOL","","",null,null],[17,"SO_RCVBUF","","",null,null],[17,"SO_RCVBUFFORCE","","",null,null],[17,"SO_RCVLOWAT","","",null,null],[17,"SO_SNDLOWAT","","",null,null],[17,"SO_RCVTIMEO","","",null,null],[17,"SO_SNDTIMEO","","",null,null],[17,"SO_REUSEADDR","","",null,null],[17,"SO_REUSEPORT","","",null,null],[17,"SO_RXQ_OVFL","","",null,null],[17,"SO_SNDBUF","","",null,null],[17,"SO_SNDBUFFORCE","","",null,null],[17,"SO_TIMESTAMP","","",null,null],[17,"SO_TYPE","","",null,null],[17,"SO_BUSY_POLL","","",null,null],[17,"SO_ORIGINAL_DST","","",null,null],[17,"TCP_NODELAY","","",null,null],[17,"TCP_MAXSEG","","",null,null],[17,"TCP_CORK","","",null,null],[17,"TCP_KEEPIDLE","","",null,null],[17,"IP_MULTICAST_IF","","",null,null],[17,"IP_MULTICAST_TTL","","",null,null],[17,"IP_MULTICAST_LOOP","","",null,null],[17,"IP_ADD_MEMBERSHIP","","",null,null],[17,"IP_DROP_MEMBERSHIP","","",null,null],[17,"IPV6_ADD_MEMBERSHIP","","",null,null],[17,"IPV6_DROP_MEMBERSHIP","","",null,null],[17,"INADDR_ANY","","",null,null],[17,"INADDR_NONE","","",null,null],[17,"INADDR_BROADCAST","","",null,null],[17,"MSG_OOB","","",null,null],[17,"MSG_PEEK","","",null,null],[17,"MSG_CTRUNC","","",null,null],[17,"MSG_TRUNC","","",null,null],[17,"MSG_DONTWAIT","","",null,null],[17,"MSG_EOR","","",null,null],[17,"MSG_ERRQUEUE","","",null,null],[17,"MSG_CMSG_CLOEXEC","","",null,null],[17,"SHUT_RD","","",null,null],[17,"SHUT_WR","","",null,null],[17,"SHUT_RDWR","","",null,null],[17,"SCM_RIGHTS","","",null,null],[17,"SOCK_NONBLOCK","","",null,null],[17,"SOCK_CLOEXEC","","",null,null],[8,"GetSockOpt","","Represents a socket option that can be accessed or set. Used as an argument\nto `getsockopt`",null,null],[16,"Val","","",146,null],[8,"SetSockOpt","","Represents a socket option that can be accessed or set. Used as an argument\nto `setsockopt`",null,null],[16,"Val","","",147,null],[11,"fmt","","",116,null],[11,"eq","","",116,null],[11,"clone","","",116,null],[11,"hash","","",148,null],[11,"cmp","","",148,null],[11,"partial_cmp","","",148,null],[11,"lt","","",148,null],[11,"le","","",148,null],[11,"gt","","",148,null],[11,"ge","","",148,null],[11,"clone","","",148,null],[11,"eq","","",148,null],[11,"ne","","",148,null],[11,"fmt","","",148,null],[11,"empty","","Returns an empty set of flags.",148,{"inputs":[],"output":{"name":"sockflag"}}],[11,"all","","Returns the set containing all flags.",148,{"inputs":[],"output":{"name":"sockflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",148,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",148,{"inputs":[{"name":"c_int"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",148,{"inputs":[{"name":"c_int"}],"output":{"name":"sockflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",148,null],[11,"is_all","","Returns `true` if all flags are currently set.",148,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",148,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",148,null],[11,"insert","","Inserts the specified flags in-place.",148,null],[11,"remove","","Removes the specified flags in-place.",148,null],[11,"toggle","","Toggles the specified flags in-place.",148,null],[11,"bitor","","Returns the union of the two sets of flags.",148,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",148,null],[11,"bitand","","Returns the intersection between the two sets of flags.",148,null],[11,"sub","","Returns the set difference of the two sets of flags.",148,null],[11,"not","","Returns the complement of this set of flags.",148,null],[11,"from_iter","","",148,{"inputs":[{"name":"t"}],"output":{"name":"sockflag"}}],[11,"new","","Create a CmsgSpace&lt;T&gt;. The structure is used only for space, so\nthe fields are uninitialized.",149,{"inputs":[],"output":{"name":"self"}}],[11,"cmsgs","","Iterate over the valid control messages pointed to by this\nmsghdr.",110,null],[11,"next","","",150,null],[11,"fmt","","",111,null],[11,"clone","","",111,null],[11,"fmt","","",151,null],[11,"eq","","",151,null],[11,"ne","","",151,null],[11,"clone","","",151,null],[11,"fmt","","",119,null],[11,"eq","","",119,null],[11,"clone","","",119,null],[0,"stat","nix::sys","",null,null],[6,"dev_t","nix::sys::stat","",null,null],[3,"FileStat","","",null,null],[12,"st_dev","","",63,null],[12,"st_ino","","",63,null],[12,"st_nlink","","",63,null],[12,"st_mode","","",63,null],[12,"st_uid","","",63,null],[12,"st_gid","","",63,null],[12,"st_rdev","","",63,null],[12,"st_size","","",63,null],[12,"st_blksize","","",63,null],[12,"st_blocks","","",63,null],[12,"st_atime","","",63,null],[12,"st_atime_nsec","","",63,null],[12,"st_mtime","","",63,null],[12,"st_mtime_nsec","","",63,null],[12,"st_ctime","","",63,null],[12,"st_ctime_nsec","","",63,null],[3,"SFlag","","",null,null],[3,"Mode","","",null,null],[5,"mknod","","",null,{"inputs":[{"name":"p"},{"name":"sflag"},{"name":"mode"},{"name":"dev_t"}],"output":{"name":"result"}}],[5,"mkdev","","",null,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"dev_t"}}],[5,"umask","","",null,{"inputs":[{"name":"mode"}],"output":{"name":"mode"}}],[5,"stat","","",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"lstat","","",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"fstat","","",null,{"inputs":[{"name":"rawfd"}],"output":{"name":"result"}}],[17,"S_IFIFO","","",null,null],[17,"S_IFCHR","","",null,null],[17,"S_IFDIR","","",null,null],[17,"S_IFBLK","","",null,null],[17,"S_IFREG","","",null,null],[17,"S_IFLNK","","",null,null],[17,"S_IFSOCK","","",null,null],[17,"S_IFMT","","",null,null],[17,"S_IRWXU","","",null,null],[17,"S_IRUSR","","",null,null],[17,"S_IWUSR","","",null,null],[17,"S_IXUSR","","",null,null],[17,"S_IRWXG","","",null,null],[17,"S_IRGRP","","",null,null],[17,"S_IWGRP","","",null,null],[17,"S_IXGRP","","",null,null],[17,"S_IRWXO","","",null,null],[17,"S_IROTH","","",null,null],[17,"S_IWOTH","","",null,null],[17,"S_IXOTH","","",null,null],[17,"S_ISUID","","",null,null],[17,"S_ISGID","","",null,null],[17,"S_ISVTX","","",null,null],[11,"hash","","",152,null],[11,"cmp","","",152,null],[11,"partial_cmp","","",152,null],[11,"lt","","",152,null],[11,"le","","",152,null],[11,"gt","","",152,null],[11,"ge","","",152,null],[11,"clone","","",152,null],[11,"eq","","",152,null],[11,"ne","","",152,null],[11,"fmt","","",152,null],[11,"empty","","Returns an empty set of flags.",152,{"inputs":[],"output":{"name":"sflag"}}],[11,"all","","Returns the set containing all flags.",152,{"inputs":[],"output":{"name":"sflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",152,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",152,{"inputs":[{"name":"mode_t"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",152,{"inputs":[{"name":"mode_t"}],"output":{"name":"sflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",152,null],[11,"is_all","","Returns `true` if all flags are currently set.",152,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",152,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",152,null],[11,"insert","","Inserts the specified flags in-place.",152,null],[11,"remove","","Removes the specified flags in-place.",152,null],[11,"toggle","","Toggles the specified flags in-place.",152,null],[11,"bitor","","Returns the union of the two sets of flags.",152,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",152,null],[11,"bitand","","Returns the intersection between the two sets of flags.",152,null],[11,"sub","","Returns the set difference of the two sets of flags.",152,null],[11,"not","","Returns the complement of this set of flags.",152,null],[11,"from_iter","","",152,{"inputs":[{"name":"t"}],"output":{"name":"sflag"}}],[11,"hash","","",153,null],[11,"cmp","","",153,null],[11,"partial_cmp","","",153,null],[11,"lt","","",153,null],[11,"le","","",153,null],[11,"gt","","",153,null],[11,"ge","","",153,null],[11,"clone","","",153,null],[11,"eq","","",153,null],[11,"ne","","",153,null],[11,"fmt","","",153,null],[11,"empty","","Returns an empty set of flags.",153,{"inputs":[],"output":{"name":"mode"}}],[11,"all","","Returns the set containing all flags.",153,{"inputs":[],"output":{"name":"mode"}}],[11,"bits","","Returns the raw value of the flags currently stored.",153,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",153,{"inputs":[{"name":"mode_t"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",153,{"inputs":[{"name":"mode_t"}],"output":{"name":"mode"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",153,null],[11,"is_all","","Returns `true` if all flags are currently set.",153,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",153,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",153,null],[11,"insert","","Inserts the specified flags in-place.",153,null],[11,"remove","","Removes the specified flags in-place.",153,null],[11,"toggle","","Toggles the specified flags in-place.",153,null],[11,"bitor","","Returns the union of the two sets of flags.",153,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",153,null],[11,"bitand","","Returns the intersection between the two sets of flags.",153,null],[11,"sub","","Returns the set difference of the two sets of flags.",153,null],[11,"not","","Returns the complement of this set of flags.",153,null],[11,"from_iter","","",153,{"inputs":[{"name":"t"}],"output":{"name":"mode"}}],[0,"syscall","nix::sys","Indirect system call",null,null],[5,"syscall","nix::sys::syscall","",null,null],[6,"Syscall","","",null,null],[7,"SYSPIVOTROOT","","",null,null],[7,"MEMFD_CREATE","","",null,null],[0,"reboot","nix::sys","Reboot/shutdown or enable/disable Ctrl-Alt-Delete.",null,null],[4,"RebootMode","nix::sys::reboot","How exactly should the system be rebooted.",null,null],[13,"RB_HALT_SYSTEM","","",154,null],[13,"RB_KEXEC","","",154,null],[13,"RB_POWER_OFF","","",154,null],[13,"RB_AUTOBOOT","","",154,null],[13,"RB_SW_SUSPEND","","",154,null],[5,"reboot","","",null,{"inputs":[{"name":"rebootmode"}],"output":{"name":"result"}}],[5,"set_cad_enabled","","Enable or disable the reboot keystroke (Ctrl-Alt-Delete).",null,{"inputs":[{"name":"bool"}],"output":{"name":"result"}}],[11,"eq","","",154,null],[11,"fmt","","",154,null],[11,"clone","","",154,null],[0,"termios","nix::sys","",null,null],[3,"Termios","nix::sys::termios","",null,null],[12,"c_iflag","","",155,null],[12,"c_oflag","","",155,null],[12,"c_cflag","","",155,null],[12,"c_lflag","","",155,null],[12,"c_line","","",155,null],[12,"c_cc","","",155,null],[12,"c_ispeed","","",155,null],[12,"c_ospeed","","",155,null],[3,"InputFlags","","",null,null],[3,"OutputFlags","","",null,null],[3,"ControlFlags","","",null,null],[3,"LocalFlags","","",null,null],[4,"SetArg","","",null,null],[13,"TCSANOW","","",156,null],[13,"TCSADRAIN","","",156,null],[13,"TCSAFLUSH","","",156,null],[4,"FlushArg","","",null,null],[13,"TCIFLUSH","","",157,null],[13,"TCOFLUSH","","",157,null],[13,"TCIOFLUSH","","",157,null],[4,"FlowArg","","",null,null],[13,"TCOOFF","","",158,null],[13,"TCOON","","",158,null],[13,"TCIOFF","","",158,null],[13,"TCION","","",158,null],[5,"cfgetispeed","","",null,{"inputs":[{"name":"termios"}],"output":{"name":"speed_t"}}],[5,"cfgetospeed","","",null,{"inputs":[{"name":"termios"}],"output":{"name":"speed_t"}}],[5,"cfsetispeed","","",null,{"inputs":[{"name":"termios"},{"name":"speed_t"}],"output":{"name":"result"}}],[5,"cfsetospeed","","",null,{"inputs":[{"name":"termios"},{"name":"speed_t"}],"output":{"name":"result"}}],[5,"tcgetattr","","",null,{"inputs":[{"name":"rawfd"}],"output":{"name":"result"}}],[5,"tcsetattr","","",null,{"inputs":[{"name":"rawfd"},{"name":"setarg"},{"name":"termios"}],"output":{"name":"result"}}],[5,"tcdrain","","",null,{"inputs":[{"name":"rawfd"}],"output":{"name":"result"}}],[5,"tcflow","","",null,{"inputs":[{"name":"rawfd"},{"name":"flowarg"}],"output":{"name":"result"}}],[5,"tcflush","","",null,{"inputs":[{"name":"rawfd"},{"name":"flusharg"}],"output":{"name":"result"}}],[5,"tcsendbreak","","",null,{"inputs":[{"name":"rawfd"},{"name":"c_int"}],"output":{"name":"result"}}],[11,"clone","","",155,null],[11,"hash","","",159,null],[11,"cmp","","",159,null],[11,"partial_cmp","","",159,null],[11,"lt","","",159,null],[11,"le","","",159,null],[11,"gt","","",159,null],[11,"ge","","",159,null],[11,"clone","","",159,null],[11,"eq","","",159,null],[11,"ne","","",159,null],[11,"fmt","","",159,null],[11,"empty","","Returns an empty set of flags.",159,{"inputs":[],"output":{"name":"inputflags"}}],[11,"all","","Returns the set containing all flags.",159,{"inputs":[],"output":{"name":"inputflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",159,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",159,{"inputs":[{"name":"tcflag_t"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",159,{"inputs":[{"name":"tcflag_t"}],"output":{"name":"inputflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",159,null],[11,"is_all","","Returns `true` if all flags are currently set.",159,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",159,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",159,null],[11,"insert","","Inserts the specified flags in-place.",159,null],[11,"remove","","Removes the specified flags in-place.",159,null],[11,"toggle","","Toggles the specified flags in-place.",159,null],[11,"bitor","","Returns the union of the two sets of flags.",159,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",159,null],[11,"bitand","","Returns the intersection between the two sets of flags.",159,null],[11,"sub","","Returns the set difference of the two sets of flags.",159,null],[11,"not","","Returns the complement of this set of flags.",159,null],[11,"from_iter","","",159,{"inputs":[{"name":"t"}],"output":{"name":"inputflags"}}],[11,"hash","","",160,null],[11,"cmp","","",160,null],[11,"partial_cmp","","",160,null],[11,"lt","","",160,null],[11,"le","","",160,null],[11,"gt","","",160,null],[11,"ge","","",160,null],[11,"clone","","",160,null],[11,"eq","","",160,null],[11,"ne","","",160,null],[11,"fmt","","",160,null],[11,"empty","","Returns an empty set of flags.",160,{"inputs":[],"output":{"name":"outputflags"}}],[11,"all","","Returns the set containing all flags.",160,{"inputs":[],"output":{"name":"outputflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",160,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",160,{"inputs":[{"name":"tcflag_t"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",160,{"inputs":[{"name":"tcflag_t"}],"output":{"name":"outputflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",160,null],[11,"is_all","","Returns `true` if all flags are currently set.",160,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",160,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",160,null],[11,"insert","","Inserts the specified flags in-place.",160,null],[11,"remove","","Removes the specified flags in-place.",160,null],[11,"toggle","","Toggles the specified flags in-place.",160,null],[11,"bitor","","Returns the union of the two sets of flags.",160,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",160,null],[11,"bitand","","Returns the intersection between the two sets of flags.",160,null],[11,"sub","","Returns the set difference of the two sets of flags.",160,null],[11,"not","","Returns the complement of this set of flags.",160,null],[11,"from_iter","","",160,{"inputs":[{"name":"t"}],"output":{"name":"outputflags"}}],[11,"hash","","",161,null],[11,"cmp","","",161,null],[11,"partial_cmp","","",161,null],[11,"lt","","",161,null],[11,"le","","",161,null],[11,"gt","","",161,null],[11,"ge","","",161,null],[11,"clone","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"fmt","","",161,null],[11,"empty","","Returns an empty set of flags.",161,{"inputs":[],"output":{"name":"controlflags"}}],[11,"all","","Returns the set containing all flags.",161,{"inputs":[],"output":{"name":"controlflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",161,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",161,{"inputs":[{"name":"tcflag_t"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",161,{"inputs":[{"name":"tcflag_t"}],"output":{"name":"controlflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",161,null],[11,"is_all","","Returns `true` if all flags are currently set.",161,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",161,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",161,null],[11,"insert","","Inserts the specified flags in-place.",161,null],[11,"remove","","Removes the specified flags in-place.",161,null],[11,"toggle","","Toggles the specified flags in-place.",161,null],[11,"bitor","","Returns the union of the two sets of flags.",161,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",161,null],[11,"bitand","","Returns the intersection between the two sets of flags.",161,null],[11,"sub","","Returns the set difference of the two sets of flags.",161,null],[11,"not","","Returns the complement of this set of flags.",161,null],[11,"from_iter","","",161,{"inputs":[{"name":"t"}],"output":{"name":"controlflags"}}],[11,"hash","","",162,null],[11,"cmp","","",162,null],[11,"partial_cmp","","",162,null],[11,"lt","","",162,null],[11,"le","","",162,null],[11,"gt","","",162,null],[11,"ge","","",162,null],[11,"clone","","",162,null],[11,"eq","","",162,null],[11,"ne","","",162,null],[11,"fmt","","",162,null],[11,"empty","","Returns an empty set of flags.",162,{"inputs":[],"output":{"name":"localflags"}}],[11,"all","","Returns the set containing all flags.",162,{"inputs":[],"output":{"name":"localflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",162,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",162,{"inputs":[{"name":"tcflag_t"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",162,{"inputs":[{"name":"tcflag_t"}],"output":{"name":"localflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",162,null],[11,"is_all","","Returns `true` if all flags are currently set.",162,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",162,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",162,null],[11,"insert","","Inserts the specified flags in-place.",162,null],[11,"remove","","Removes the specified flags in-place.",162,null],[11,"toggle","","Toggles the specified flags in-place.",162,null],[11,"bitor","","Returns the union of the two sets of flags.",162,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",162,null],[11,"bitand","","Returns the intersection between the two sets of flags.",162,null],[11,"sub","","Returns the set difference of the two sets of flags.",162,null],[11,"not","","Returns the complement of this set of flags.",162,null],[11,"from_iter","","",162,{"inputs":[{"name":"t"}],"output":{"name":"localflags"}}],[11,"clone","","",156,null],[11,"clone","","",157,null],[11,"clone","","",158,null],[6,"tcflag_t","","",null,null],[6,"cc_t","","",null,null],[6,"speed_t","","",null,null],[17,"VEOF","","",null,null],[17,"VEOL","","",null,null],[17,"VEOL2","","",null,null],[17,"VERASE","","",null,null],[17,"VWERASE","","",null,null],[17,"VKILL","","",null,null],[17,"VREPRINT","","",null,null],[17,"VINTR","","",null,null],[17,"VQUIT","","",null,null],[17,"VSUSP","","",null,null],[17,"VSTART","","",null,null],[17,"VSTOP","","",null,null],[17,"VLNEXT","","",null,null],[17,"VDISCARD","","",null,null],[17,"VMIN","","",null,null],[17,"VTIME","","",null,null],[17,"NCCS","","",null,null],[17,"IGNBRK","","",null,null],[17,"BRKINT","","",null,null],[17,"IGNPAR","","",null,null],[17,"PARMRK","","",null,null],[17,"INPCK","","",null,null],[17,"ISTRIP","","",null,null],[17,"INLCR","","",null,null],[17,"IGNCR","","",null,null],[17,"ICRNL","","",null,null],[17,"IXON","","",null,null],[17,"IXOFF","","",null,null],[17,"IXANY","","",null,null],[17,"IMAXBEL","","",null,null],[17,"IUTF8","","",null,null],[17,"OPOST","","",null,null],[17,"ONLCR","","",null,null],[17,"CSIZE","","",null,null],[17,"CS5","","",null,null],[17,"CS6","","",null,null],[17,"CS7","","",null,null],[17,"CS8","","",null,null],[17,"CSTOPB","","",null,null],[17,"CREAD","","",null,null],[17,"PARENB","","",null,null],[17,"PARODD","","",null,null],[17,"HUPCL","","",null,null],[17,"CLOCAL","","",null,null],[17,"CRTSCTS","","",null,null],[17,"ECHOKE","","",null,null],[17,"ECHOE","","",null,null],[17,"ECHOK","","",null,null],[17,"ECHO","","",null,null],[17,"ECHONL","","",null,null],[17,"ECHOPRT","","",null,null],[17,"ECHOCTL","","",null,null],[17,"ISIG","","",null,null],[17,"ICANON","","",null,null],[17,"IEXTEN","","",null,null],[17,"EXTPROC","","",null,null],[17,"TOSTOP","","",null,null],[17,"FLUSHO","","",null,null],[17,"PENDIN","","",null,null],[17,"NOFLSH","","",null,null],[17,"NL0","","",null,null],[17,"NL1","","",null,null],[17,"TAB0","","",null,null],[17,"TAB1","","",null,null],[17,"TAB2","","",null,null],[17,"TAB3","","",null,null],[17,"CR0","","",null,null],[17,"CR1","","",null,null],[17,"CR2","","",null,null],[17,"CR3","","",null,null],[17,"FF0","","",null,null],[17,"FF1","","",null,null],[17,"BS0","","",null,null],[17,"BS1","","",null,null],[17,"VT0","","",null,null],[17,"VT1","","",null,null],[0,"utsname","nix::sys","",null,null],[3,"UtsName","nix::sys::utsname","",null,null],[5,"uname","","",null,{"inputs":[],"output":{"name":"utsname"}}],[11,"clone","","",163,null],[11,"sysname","","",163,null],[11,"nodename","","",163,null],[11,"release","","",163,null],[11,"version","","",163,null],[11,"machine","","",163,null],[0,"wait","nix::sys","",null,null],[3,"WaitPidFlag","nix::sys::wait","",null,null],[4,"WaitStatus","","",null,null],[13,"Exited","","",164,null],[13,"Signaled","","",164,null],[13,"Stopped","","",164,null],[13,"Continued","","",164,null],[13,"StillAlive","","",164,null],[5,"waitpid","","",null,{"inputs":[{"name":"pid_t"},{"name":"option"}],"output":{"name":"result"}}],[5,"wait","","",null,{"inputs":[],"output":{"name":"result"}}],[17,"WNOHANG","","",null,null],[17,"WUNTRACED","","",null,null],[17,"WEXITED","","",null,null],[17,"WCONTINUED","","",null,null],[17,"WNOWAIT","","",null,null],[17,"__WNOTHREAD","","",null,null],[17,"__WALL","","",null,null],[17,"__WCLONE","","",null,null],[11,"hash","","",165,null],[11,"cmp","","",165,null],[11,"partial_cmp","","",165,null],[11,"lt","","",165,null],[11,"le","","",165,null],[11,"gt","","",165,null],[11,"ge","","",165,null],[11,"clone","","",165,null],[11,"eq","","",165,null],[11,"ne","","",165,null],[11,"fmt","","",165,null],[11,"empty","","Returns an empty set of flags.",165,{"inputs":[],"output":{"name":"waitpidflag"}}],[11,"all","","Returns the set containing all flags.",165,{"inputs":[],"output":{"name":"waitpidflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",165,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",165,{"inputs":[{"name":"c_int"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",165,{"inputs":[{"name":"c_int"}],"output":{"name":"waitpidflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",165,null],[11,"is_all","","Returns `true` if all flags are currently set.",165,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",165,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",165,null],[11,"insert","","Inserts the specified flags in-place.",165,null],[11,"remove","","Removes the specified flags in-place.",165,null],[11,"toggle","","Toggles the specified flags in-place.",165,null],[11,"bitor","","Returns the union of the two sets of flags.",165,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",165,null],[11,"bitand","","Returns the intersection between the two sets of flags.",165,null],[11,"sub","","Returns the set difference of the two sets of flags.",165,null],[11,"not","","Returns the complement of this set of flags.",165,null],[11,"from_iter","","",165,{"inputs":[{"name":"t"}],"output":{"name":"waitpidflag"}}],[11,"fmt","","",164,null],[11,"clone","","",164,null],[11,"eq","","",164,null],[11,"ne","","",164,null],[0,"mman","nix::sys","",null,null],[3,"MapFlags","nix::sys::mman","",null,null],[3,"MsFlags","","",null,null],[3,"ProtFlags","","",null,null],[5,"mlock","","",null,null],[5,"munlock","","",null,null],[5,"mmap","","Calls to mmap are inherently unsafe, so they must be made in an unsafe block. Typically\na higher-level abstraction will hide the unsafe interactions with the mmap&#39;d region.",null,null],[5,"munmap","","",null,null],[5,"madvise","","",null,null],[5,"msync","","",null,null],[5,"shm_open","","",null,{"inputs":[{"name":"p"},{"name":"oflag"},{"name":"mode"}],"output":{"name":"result"}}],[5,"shm_unlink","","",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"hash","","",166,null],[11,"cmp","","",166,null],[11,"partial_cmp","","",166,null],[11,"lt","","",166,null],[11,"le","","",166,null],[11,"gt","","",166,null],[11,"ge","","",166,null],[11,"clone","","",166,null],[11,"eq","","",166,null],[11,"ne","","",166,null],[11,"fmt","","",166,null],[11,"empty","","Returns an empty set of flags.",166,{"inputs":[],"output":{"name":"mapflags"}}],[11,"all","","Returns the set containing all flags.",166,{"inputs":[],"output":{"name":"mapflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",166,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",166,{"inputs":[{"name":"c_int"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",166,{"inputs":[{"name":"c_int"}],"output":{"name":"mapflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",166,null],[11,"is_all","","Returns `true` if all flags are currently set.",166,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",166,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",166,null],[11,"insert","","Inserts the specified flags in-place.",166,null],[11,"remove","","Removes the specified flags in-place.",166,null],[11,"toggle","","Toggles the specified flags in-place.",166,null],[11,"bitor","","Returns the union of the two sets of flags.",166,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",166,null],[11,"bitand","","Returns the intersection between the two sets of flags.",166,null],[11,"sub","","Returns the set difference of the two sets of flags.",166,null],[11,"not","","Returns the complement of this set of flags.",166,null],[11,"from_iter","","",166,{"inputs":[{"name":"t"}],"output":{"name":"mapflags"}}],[11,"hash","","",167,null],[11,"cmp","","",167,null],[11,"partial_cmp","","",167,null],[11,"lt","","",167,null],[11,"le","","",167,null],[11,"gt","","",167,null],[11,"ge","","",167,null],[11,"clone","","",167,null],[11,"eq","","",167,null],[11,"ne","","",167,null],[11,"fmt","","",167,null],[11,"empty","","Returns an empty set of flags.",167,{"inputs":[],"output":{"name":"msflags"}}],[11,"all","","Returns the set containing all flags.",167,{"inputs":[],"output":{"name":"msflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",167,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",167,{"inputs":[{"name":"c_int"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",167,{"inputs":[{"name":"c_int"}],"output":{"name":"msflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",167,null],[11,"is_all","","Returns `true` if all flags are currently set.",167,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",167,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",167,null],[11,"insert","","Inserts the specified flags in-place.",167,null],[11,"remove","","Removes the specified flags in-place.",167,null],[11,"toggle","","Toggles the specified flags in-place.",167,null],[11,"bitor","","Returns the union of the two sets of flags.",167,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",167,null],[11,"bitand","","Returns the intersection between the two sets of flags.",167,null],[11,"sub","","Returns the set difference of the two sets of flags.",167,null],[11,"not","","Returns the complement of this set of flags.",167,null],[11,"from_iter","","",167,{"inputs":[{"name":"t"}],"output":{"name":"msflags"}}],[6,"MmapAdvise","","",null,null],[17,"MAP_FILE","","",null,null],[17,"MAP_SHARED","","",null,null],[17,"MAP_PRIVATE","","",null,null],[17,"MAP_FIXED","","",null,null],[17,"MAP_ANON","","",null,null],[17,"MAP_ANONYMOUS","","",null,null],[17,"MAP_32BIT","","",null,null],[17,"MAP_GROWSDOWN","","",null,null],[17,"MAP_DENYWRITE","","",null,null],[17,"MAP_EXECUTABLE","","",null,null],[17,"MAP_LOCKED","","",null,null],[17,"MAP_NORESERVE","","",null,null],[17,"MAP_POPULATE","","",null,null],[17,"MAP_NONBLOCK","","",null,null],[17,"MAP_STACK","","",null,null],[17,"MAP_HUGETLB","","",null,null],[17,"MADV_NORMAL","","",null,null],[17,"MADV_RANDOM","","",null,null],[17,"MADV_SEQUENTIAL","","",null,null],[17,"MADV_WILLNEED","","",null,null],[17,"MADV_DONTNEED","","",null,null],[17,"MADV_REMOVE","","",null,null],[17,"MADV_DONTFORK","","",null,null],[17,"MADV_DOFORK","","",null,null],[17,"MADV_MERGEABLE","","",null,null],[17,"MADV_UNMERGEABLE","","",null,null],[17,"MADV_HUGEPAGE","","",null,null],[17,"MADV_NOHUGEPAGE","","",null,null],[17,"MADV_DONTDUMP","","",null,null],[17,"MADV_DODUMP","","",null,null],[17,"MADV_HWPOISON","","",null,null],[17,"MS_ASYNC","","",null,null],[17,"MS_INVALIDATE","","",null,null],[17,"MS_SYNC","","",null,null],[17,"MAP_FAILED","","",null,null],[17,"PROT_NONE","","",null,null],[17,"PROT_READ","","",null,null],[17,"PROT_WRITE","","",null,null],[17,"PROT_EXEC","","",null,null],[17,"PROT_GROWSDOWN","","",null,null],[17,"PROT_GROWSUP","","",null,null],[11,"hash","","",168,null],[11,"cmp","","",168,null],[11,"partial_cmp","","",168,null],[11,"lt","","",168,null],[11,"le","","",168,null],[11,"gt","","",168,null],[11,"ge","","",168,null],[11,"clone","","",168,null],[11,"eq","","",168,null],[11,"ne","","",168,null],[11,"fmt","","",168,null],[11,"empty","","Returns an empty set of flags.",168,{"inputs":[],"output":{"name":"protflags"}}],[11,"all","","Returns the set containing all flags.",168,{"inputs":[],"output":{"name":"protflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",168,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",168,{"inputs":[{"name":"c_int"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",168,{"inputs":[{"name":"c_int"}],"output":{"name":"protflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",168,null],[11,"is_all","","Returns `true` if all flags are currently set.",168,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",168,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",168,null],[11,"insert","","Inserts the specified flags in-place.",168,null],[11,"remove","","Removes the specified flags in-place.",168,null],[11,"toggle","","Toggles the specified flags in-place.",168,null],[11,"bitor","","Returns the union of the two sets of flags.",168,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",168,null],[11,"bitand","","Returns the intersection between the two sets of flags.",168,null],[11,"sub","","Returns the set difference of the two sets of flags.",168,null],[11,"not","","Returns the complement of this set of flags.",168,null],[11,"from_iter","","",168,{"inputs":[{"name":"t"}],"output":{"name":"protflags"}}],[0,"uio","nix::sys","",null,null],[3,"IoVec","nix::sys::uio","",null,null],[5,"writev","","",null,null],[5,"readv","","",null,null],[5,"pwrite","","",null,null],[5,"pread","","",null,null],[11,"as_slice","","",169,null],[11,"from_slice","","",169,null],[11,"from_mut_slice","","",169,null],[0,"time","nix::sys","",null,null],[3,"TimeVal","nix::sys::time","",null,null],[12,"tv_sec","","",170,null],[12,"tv_usec","","",170,null],[11,"fmt","","",170,null],[11,"cmp","","",170,null],[11,"partial_cmp","","",170,null],[11,"lt","","",170,null],[11,"le","","",170,null],[11,"gt","","",170,null],[11,"ge","","",170,null],[11,"eq","","",170,null],[11,"ne","","",170,null],[11,"clone","","",170,null],[11,"zero","","",170,{"inputs":[],"output":{"name":"timeval"}}],[11,"hours","","",170,{"inputs":[{"name":"i64"}],"output":{"name":"timeval"}}],[11,"minutes","","",170,{"inputs":[{"name":"i64"}],"output":{"name":"timeval"}}],[11,"seconds","","",170,{"inputs":[{"name":"i64"}],"output":{"name":"timeval"}}],[11,"milliseconds","","",170,{"inputs":[{"name":"i64"}],"output":{"name":"timeval"}}],[11,"microseconds","","Makes a new `TimeVal` with given number of microseconds.",170,{"inputs":[{"name":"i64"}],"output":{"name":"timeval"}}],[11,"num_hours","","",170,null],[11,"num_minutes","","",170,null],[11,"num_seconds","","",170,null],[11,"num_milliseconds","","",170,null],[11,"num_microseconds","","",170,null],[11,"neg","","",170,null],[11,"add","","",170,null],[11,"sub","","",170,null],[11,"mul","","",170,null],[11,"div","","",170,null],[11,"fmt","","",170,null],[0,"ptrace","nix::sys","",null,null],[5,"ptrace","nix::sys::ptrace","",null,null],[5,"ptrace_setoptions","","Set options, as with `ptrace(PTRACE_SETOPTIONS,...)`.",null,{"inputs":[{"name":"pid_t"},{"name":"ptraceoptions"}],"output":{"name":"result"}}],[0,"ptrace","","",null,null],[6,"PtraceRequest","nix::sys::ptrace::ptrace","",null,null],[6,"PtraceEvent","","",null,null],[6,"PtraceOptions","","",null,null],[17,"PTRACE_TRACEME","","",null,null],[17,"PTRACE_PEEKTEXT","","",null,null],[17,"PTRACE_PEEKDATA","","",null,null],[17,"PTRACE_PEEKUSER","","",null,null],[17,"PTRACE_POKETEXT","","",null,null],[17,"PTRACE_POKEDATA","","",null,null],[17,"PTRACE_POKEUSER","","",null,null],[17,"PTRACE_CONT","","",null,null],[17,"PTRACE_KILL","","",null,null],[17,"PTRACE_SINGLESTEP","","",null,null],[17,"PTRACE_GETREGS","","",null,null],[17,"PTRACE_SETREGS","","",null,null],[17,"PTRACE_GETFPREGS","","",null,null],[17,"PTRACE_SETFPREGS","","",null,null],[17,"PTRACE_ATTACH","","",null,null],[17,"PTRACE_DETACH","","",null,null],[17,"PTRACE_GETFPXREGS","","",null,null],[17,"PTRACE_SETFPXREGS","","",null,null],[17,"PTRACE_SYSCALL","","",null,null],[17,"PTRACE_SETOPTIONS","","",null,null],[17,"PTRACE_GETEVENTMSG","","",null,null],[17,"PTRACE_GETSIGINFO","","",null,null],[17,"PTRACE_SETSIGINFO","","",null,null],[17,"PTRACE_GETREGSET","","",null,null],[17,"PTRACE_SETREGSET","","",null,null],[17,"PTRACE_SEIZE","","",null,null],[17,"PTRACE_INTERRUPT","","",null,null],[17,"PTRACE_LISTEN","","",null,null],[17,"PTRACE_PEEKSIGINFO","","",null,null],[17,"PTRACE_EVENT_FORK","","",null,null],[17,"PTRACE_EVENT_VFORK","","",null,null],[17,"PTRACE_EVENT_CLONE","","",null,null],[17,"PTRACE_EVENT_EXEC","","",null,null],[17,"PTRACE_EVENT_VFORK_DONE","","",null,null],[17,"PTRACE_EVENT_EXIT","","",null,null],[17,"PTRACE_EVENT_SECCOMP","","",null,null],[17,"PTRACE_EVENT_STOP","","",null,null],[17,"PTRACE_O_TRACESYSGOOD","","",null,null],[17,"PTRACE_O_TRACEFORK","","",null,null],[17,"PTRACE_O_TRACEVFORK","","",null,null],[17,"PTRACE_O_TRACECLONE","","",null,null],[17,"PTRACE_O_TRACEEXEC","","",null,null],[17,"PTRACE_O_TRACEVFORKDONE","","",null,null],[17,"PTRACE_O_TRACEEXIT","","",null,null],[17,"PTRACE_O_TRACESECCOMP","","",null,null],[0,"select","nix::sys","",null,null],[3,"FdSet","nix::sys::select","",null,null],[5,"select","","",null,{"inputs":[{"name":"c_int"},{"name":"option"},{"name":"option"},{"name":"option"},{"name":"option"}],"output":{"name":"result"}}],[17,"FD_SETSIZE","","",null,null],[11,"clone","","",171,null],[11,"new","","",171,{"inputs":[],"output":{"name":"fdset"}}],[11,"insert","","",171,null],[11,"remove","","",171,null],[11,"contains","","",171,null],[11,"clear","","",171,null],[0,"quota","nix::sys","",null,null],[5,"quotactl_on","nix::sys::quota","",null,{"inputs":[{"name":"quotatype"},{"name":"p"},{"name":"quotafmt"},{"name":"p"}],"output":{"name":"result"}}],[5,"quotactl_off","","",null,{"inputs":[{"name":"quotatype"},{"name":"p"}],"output":{"name":"result"}}],[5,"quotactl_sync","","",null,{"inputs":[{"name":"quotatype"},{"name":"option"}],"output":{"name":"result"}}],[5,"quotactl_get","","",null,{"inputs":[{"name":"quotatype"},{"name":"p"},{"name":"c_int"},{"name":"dqblk"}],"output":{"name":"result"}}],[5,"quotactl_set","","",null,{"inputs":[{"name":"quotatype"},{"name":"p"},{"name":"c_int"},{"name":"dqblk"}],"output":{"name":"result"}}],[0,"quota","","",null,null],[3,"QuotaCmd","nix::sys::quota::quota","",null,null],[12,"0","","",172,null],[12,"1","","",172,null],[3,"QuotaValidFlags","","",null,null],[3,"Dqblk","","",null,null],[12,"bhardlimit","","",173,null],[12,"bsoftlimit","","",173,null],[12,"curspace","","",173,null],[12,"ihardlimit","","",173,null],[12,"isoftlimit","","",173,null],[12,"curinodes","","",173,null],[12,"btime","","",173,null],[12,"itime","","",173,null],[12,"valid","","",173,null],[6,"QuotaSubCmd","","",null,null],[6,"QuotaType","","",null,null],[6,"QuotaFmt","","",null,null],[17,"Q_SYNC","","",null,null],[17,"Q_QUOTAON","","",null,null],[17,"Q_QUOTAOFF","","",null,null],[17,"Q_GETFMT","","",null,null],[17,"Q_GETINFO","","",null,null],[17,"Q_SETINFO","","",null,null],[17,"Q_GETQUOTA","","",null,null],[17,"Q_SETQUOTA","","",null,null],[17,"USRQUOTA","","",null,null],[17,"GRPQUOTA","","",null,null],[17,"QFMT_VFS_OLD","","",null,null],[17,"QFMT_VFS_V0","","",null,null],[17,"QFMT_VFS_V1","","",null,null],[17,"QIF_BLIMITS","","",null,null],[17,"QIF_SPACE","","",null,null],[17,"QIF_ILIMITS","","",null,null],[17,"QIF_INODES","","",null,null],[17,"QIF_BTIME","","",null,null],[17,"QIF_ITIME","","",null,null],[17,"QIF_LIMITS","","",null,null],[17,"QIF_USAGE","","",null,null],[17,"QIF_TIMES","","",null,null],[17,"QIF_ALL","","",null,null],[11,"as_int","","",172,null],[11,"hash","","",174,null],[11,"cmp","","",174,null],[11,"partial_cmp","","",174,null],[11,"lt","","",174,null],[11,"le","","",174,null],[11,"gt","","",174,null],[11,"ge","","",174,null],[11,"clone","","",174,null],[11,"eq","","",174,null],[11,"ne","","",174,null],[11,"default","","",174,{"inputs":[],"output":{"name":"quotavalidflags"}}],[11,"fmt","","",174,null],[11,"empty","","Returns an empty set of flags.",174,{"inputs":[],"output":{"name":"quotavalidflags"}}],[11,"all","","Returns the set containing all flags.",174,{"inputs":[],"output":{"name":"quotavalidflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",174,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",174,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",174,{"inputs":[{"name":"u32"}],"output":{"name":"quotavalidflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",174,null],[11,"is_all","","Returns `true` if all flags are currently set.",174,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",174,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",174,null],[11,"insert","","Inserts the specified flags in-place.",174,null],[11,"remove","","Removes the specified flags in-place.",174,null],[11,"toggle","","Toggles the specified flags in-place.",174,null],[11,"bitor","","Returns the union of the two sets of flags.",174,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",174,null],[11,"bitand","","Returns the intersection between the two sets of flags.",174,null],[11,"sub","","Returns the set difference of the two sets of flags.",174,null],[11,"not","","Returns the complement of this set of flags.",174,null],[11,"from_iter","","",174,{"inputs":[{"name":"t"}],"output":{"name":"quotavalidflags"}}],[11,"clone","","",173,null],[11,"fmt","","",173,null],[11,"default","","",173,{"inputs":[],"output":{"name":"dqblk"}}],[0,"statfs","nix::sys","",null,null],[5,"statfs","nix::sys::statfs","",null,{"inputs":[{"name":"p"},{"name":"statfs"}],"output":{"name":"result"}}],[5,"fstatfs","","",null,{"inputs":[{"name":"t"},{"name":"statfs"}],"output":{"name":"result"}}],[0,"vfs","","",null,null],[3,"Statfs","nix::sys::statfs::vfs","",null,null],[12,"f_type","","",175,null],[12,"f_bsize","","",175,null],[12,"f_blocks","","",175,null],[12,"f_bfree","","",175,null],[12,"f_bavail","","",175,null],[12,"f_files","","",175,null],[12,"f_ffree","","",175,null],[12,"f_fsid","","",175,null],[12,"f_namelen","","",175,null],[12,"f_frsize","","",175,null],[12,"f_spare","","",175,null],[0,"hwdep","","",null,null],[6,"FsType","nix::sys::statfs::vfs::hwdep","",null,null],[6,"BlockSize","","",null,null],[6,"NameLen","","",null,null],[6,"FragmentSize","","",null,null],[6,"SwordType","","",null,null],[17,"ADFS_SUPER_MAGIC","nix::sys::statfs::vfs","",null,null],[17,"AFFS_SUPER_MAGIC","","",null,null],[17,"BEFS_SUPER_MAGIC","","",null,null],[17,"BFS_MAGIC","","",null,null],[17,"CIFS_MAGIC_NUMBER","","",null,null],[17,"CODA_SUPER_MAGIC","","",null,null],[17,"COH_SUPER_MAGIC","","",null,null],[17,"CRAMFS_MAGIC","","",null,null],[17,"DEVFS_SUPER_MAGIC","","",null,null],[17,"EFS_SUPER_MAGIC","","",null,null],[17,"EXT_SUPER_MAGIC","","",null,null],[17,"EXT2_OLD_SUPER_MAGIC","","",null,null],[17,"EXT2_SUPER_MAGIC","","",null,null],[17,"EXT3_SUPER_MAGIC","","",null,null],[17,"EXT4_SUPER_MAGIC","","",null,null],[17,"HFS_SUPER_MAGIC","","",null,null],[17,"HPFS_SUPER_MAGIC","","",null,null],[17,"HUGETLBFS_MAGIC","","",null,null],[17,"ISOFS_SUPER_MAGIC","","",null,null],[17,"JFFS2_SUPER_MAGIC","","",null,null],[17,"JFS_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC2","","",null,null],[17,"MINIX2_SUPER_MAGIC","","",null,null],[17,"MINIX2_SUPER_MAGIC2","","",null,null],[17,"MSDOS_SUPER_MAGIC","","",null,null],[17,"NCP_SUPER_MAGIC","","",null,null],[17,"NFS_SUPER_MAGIC","","",null,null],[17,"NTFS_SB_MAGIC","","",null,null],[17,"OPENPROM_SUPER_MAGIC","","",null,null],[17,"PROC_SUPER_MAGIC","","",null,null],[17,"QNX4_SUPER_MAGIC","","",null,null],[17,"REISERFS_SUPER_MAGIC","","",null,null],[17,"ROMFS_MAGIC","","",null,null],[17,"SMB_SUPER_MAGIC","","",null,null],[17,"SYSV2_SUPER_MAGIC","","",null,null],[17,"SYSV4_SUPER_MAGIC","","",null,null],[17,"TMPFS_MAGIC","","",null,null],[17,"UDF_SUPER_MAGIC","","",null,null],[17,"UFS_MAGIC","","",null,null],[17,"USBDEVICE_SUPER_MAGIC","","",null,null],[17,"VXFS_SUPER_MAGIC","","",null,null],[17,"XENIX_SUPER_MAGIC","","",null,null],[17,"XFS_SUPER_MAGIC","","",null,null],[17,"_XIAFS_SUPER_MAGIC","","",null,null],[11,"clone","","",175,null],[11,"fmt","","",175,null],[0,"statvfs","nix::sys","FFI for statvfs functions",null,null],[5,"statvfs","nix::sys::statvfs","Fill an existing `Statvfs` object with information about the `path`",null,{"inputs":[{"name":"p"},{"name":"statvfs"}],"output":{"name":"result"}}],[5,"fstatvfs","","Fill an existing `Statvfs` object with information about `fd`",null,{"inputs":[{"name":"t"},{"name":"statvfs"}],"output":{"name":"result"}}],[0,"vfs","","Structs related to the `statvfs` and `fstatvfs` functions",null,null],[3,"FsFlags","nix::sys::statvfs::vfs","Mount Flags",null,null],[3,"Statvfs","","The posix statvfs struct",null,null],[12,"f_bsize","","Filesystem block size. This is the value that will lead to\nmost efficient use of the filesystem",176,null],[12,"f_frsize","","Fragment Size -- actual minimum unit of allocation on this\nfilesystem",176,null],[12,"f_blocks","","Total number of blocks on the filesystem",176,null],[12,"f_bfree","","Number of unused blocks on the filesystem, including those\nreserved for root",176,null],[12,"f_bavail","","Number of blocks available to non-root users",176,null],[12,"f_files","","Total number of inodes available on the filesystem",176,null],[12,"f_ffree","","Number of inodes available on the filesystem",176,null],[12,"f_favail","","Number of inodes available to non-root users",176,null],[12,"f_fsid","","File System ID",176,null],[12,"f_flag","","Mount Flags",176,null],[12,"f_namemax","","Maximum filename length",176,null],[17,"RDONLY","","Read Only",null,null],[17,"NOSUID","","Do not allow the set-uid bits to have an effect",null,null],[17,"NODEV","","Do not interpret character or block-special devices",null,null],[17,"NOEXEC","","Do not allow execution of binaries on the filesystem",null,null],[17,"SYNCHRONOUS","","All IO should be done synchronously",null,null],[17,"MANDLOCK","","Allow mandatory locks on the filesystem",null,null],[17,"WRITE","","",null,null],[17,"APPEND","","",null,null],[17,"IMMUTABLE","","",null,null],[17,"NOATIME","","Do not update access times on files",null,null],[17,"NODIRATIME","","Do not update access times on files",null,null],[17,"RELATIME","","Update access time relative to modify/change time",null,null],[11,"hash","","",177,null],[11,"cmp","","",177,null],[11,"partial_cmp","","",177,null],[11,"lt","","",177,null],[11,"le","","",177,null],[11,"gt","","",177,null],[11,"ge","","",177,null],[11,"clone","","",177,null],[11,"eq","","",177,null],[11,"ne","","",177,null],[11,"default","","",177,{"inputs":[],"output":{"name":"fsflags"}}],[11,"fmt","","",177,null],[11,"empty","","Returns an empty set of flags.",177,{"inputs":[],"output":{"name":"fsflags"}}],[11,"all","","Returns the set containing all flags.",177,{"inputs":[],"output":{"name":"fsflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",177,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",177,{"inputs":[{"name":"c_ulong"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",177,{"inputs":[{"name":"c_ulong"}],"output":{"name":"fsflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",177,null],[11,"is_all","","Returns `true` if all flags are currently set.",177,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",177,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",177,null],[11,"insert","","Inserts the specified flags in-place.",177,null],[11,"remove","","Removes the specified flags in-place.",177,null],[11,"toggle","","Toggles the specified flags in-place.",177,null],[11,"bitor","","Returns the union of the two sets of flags.",177,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",177,null],[11,"bitand","","Returns the intersection between the two sets of flags.",177,null],[11,"sub","","Returns the set difference of the two sets of flags.",177,null],[11,"not","","Returns the complement of this set of flags.",177,null],[11,"from_iter","","",177,{"inputs":[{"name":"t"}],"output":{"name":"fsflags"}}],[11,"clone","","",176,null],[11,"fmt","","",176,null],[11,"for_path","","Create a new `Statvfs` object and fill it with information about\nthe mount that contains `path`",176,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"update_with_path","","Replace information in this struct with information about `path`",176,null],[11,"for_fd","","Create a new `Statvfs` object and fill it with information from fd",176,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[11,"update_with_fd","","Replace information in this struct with information about `fd`",176,null],[11,"default","","Create a statvfs object initialized to all zeros",176,{"inputs":[],"output":{"name":"self"}}],[0,"ucontext","nix","",null,null],[3,"UContext","nix::ucontext","",null,null],[11,"clone","","",178,null],[11,"get","","",178,{"inputs":[],"output":{"name":"result"}}],[11,"set","","",178,null],[11,"sigmask_mut","","",178,null],[11,"sigmask","","",178,null],[0,"unistd","nix","Standard symbolic constants and types",null,null],[4,"ForkResult","nix::unistd","",null,null],[13,"Parent","","",179,null],[12,"child","nix::unistd::ForkResult","",179,null],[13,"Child","nix::unistd","",179,null],[4,"Whence","","",null,null],[13,"SeekSet","","",180,null],[13,"SeekCur","","",180,null],[13,"SeekEnd","","",180,null],[13,"SeekData","","",180,null],[13,"SeekHole","","",180,null],[5,"pivot_root","","",null,{"inputs":[{"name":"p1"},{"name":"p2"}],"output":{"name":"result"}}],[5,"fork","","",null,{"inputs":[],"output":{"name":"result"}}],[5,"getpid","","",null,{"inputs":[],"output":{"name":"pid_t"}}],[5,"getppid","","",null,{"inputs":[],"output":{"name":"pid_t"}}],[5,"setpgid","","",null,{"inputs":[{"name":"pid_t"},{"name":"pid_t"}],"output":{"name":"result"}}],[5,"gettid","","",null,{"inputs":[],"output":{"name":"pid_t"}}],[5,"dup","","",null,{"inputs":[{"name":"rawfd"}],"output":{"name":"result"}}],[5,"dup2","","",null,{"inputs":[{"name":"rawfd"},{"name":"rawfd"}],"output":{"name":"result"}}],[5,"dup3","","",null,{"inputs":[{"name":"rawfd"},{"name":"rawfd"},{"name":"oflag"}],"output":{"name":"result"}}],[5,"chdir","","",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"mkdir","","Creates new directory `path` with access rights `mode`.",null,{"inputs":[{"name":"p"},{"name":"mode"}],"output":{"name":"result"}}],[5,"getcwd","","Returns the current directory as a PathBuf",null,{"inputs":[],"output":{"name":"result"}}],[5,"chown","","",null,{"inputs":[{"name":"p"},{"name":"option"},{"name":"option"}],"output":{"name":"result"}}],[5,"execv","","",null,null],[5,"execve","","",null,null],[5,"execvp","","",null,null],[5,"daemon","","",null,{"inputs":[{"name":"bool"},{"name":"bool"}],"output":{"name":"result"}}],[5,"sethostname","","",null,null],[5,"gethostname","","",null,null],[5,"close","","",null,{"inputs":[{"name":"rawfd"}],"output":{"name":"result"}}],[5,"read","","",null,null],[5,"write","","",null,null],[5,"lseek","","",null,{"inputs":[{"name":"rawfd"},{"name":"off_t"},{"name":"whence"}],"output":{"name":"result"}}],[5,"lseek64","","",null,{"inputs":[{"name":"rawfd"},{"name":"off64_t"},{"name":"whence"}],"output":{"name":"result"}}],[5,"pipe","","",null,{"inputs":[],"output":{"name":"result"}}],[5,"pipe2","","",null,{"inputs":[{"name":"oflag"}],"output":{"name":"result"}}],[5,"ftruncate","","",null,{"inputs":[{"name":"rawfd"},{"name":"off_t"}],"output":{"name":"result"}}],[5,"isatty","","",null,{"inputs":[{"name":"rawfd"}],"output":{"name":"result"}}],[5,"unlink","","",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"chroot","","",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"fsync","","",null,{"inputs":[{"name":"rawfd"}],"output":{"name":"result"}}],[5,"fdatasync","","",null,{"inputs":[{"name":"rawfd"}],"output":{"name":"result"}}],[5,"getuid","","",null,{"inputs":[],"output":{"name":"uid_t"}}],[5,"geteuid","","",null,{"inputs":[],"output":{"name":"uid_t"}}],[5,"getgid","","",null,{"inputs":[],"output":{"name":"gid_t"}}],[5,"getegid","","",null,{"inputs":[],"output":{"name":"gid_t"}}],[5,"setuid","","",null,{"inputs":[{"name":"uid_t"}],"output":{"name":"result"}}],[5,"setgid","","",null,{"inputs":[{"name":"gid_t"}],"output":{"name":"result"}}],[5,"pause","","",null,{"inputs":[],"output":{"name":"result"}}],[5,"sleep","","",null,{"inputs":[{"name":"c_uint"}],"output":{"name":"c_uint"}}],[11,"clone","","",179,null],[11,"is_child","","",179,null],[11,"is_parent","","",179,null],[6,"Result","nix","",null,null],[8,"NixPath","","",null,null],[10,"len","","",181,null],[10,"with_nix_path","","",181,null],[11,"eq","","",74,null],[11,"ne","","",74,null],[11,"fmt","","",74,null],[11,"clone","","",74,null],[11,"from_errno","","",74,{"inputs":[{"name":"errno"}],"output":{"name":"error"}}],[11,"last","","",74,{"inputs":[],"output":{"name":"error"}}],[11,"invalid_argument","","",74,{"inputs":[],"output":{"name":"error"}}],[11,"errno","","",74,null],[11,"from","","",74,{"inputs":[{"name":"errno"}],"output":{"name":"error"}}],[11,"description","","",74,null],[11,"fmt","","",74,null],[11,"from","std::io::error","",76,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"len","std::ffi::os_str","",182,null],[11,"with_nix_path","","",182,null],[11,"len","std::ffi::c_str","",183,null],[11,"with_nix_path","","",183,null],[11,"len","std::path","",184,null],[11,"with_nix_path","","",184,null],[11,"len","","",185,null],[11,"with_nix_path","","",185,null],[11,"len","core::option","",186,null],[11,"with_nix_path","","",186,null],[14,"ioc!","nix","Encode an ioctl command.",null,null],[14,"io!","","Encode an ioctl command that has no associated data.",null,null],[14,"ior!","","Encode an ioctl command that reads.",null,null],[14,"iow!","","Encode an ioctl command that writes.",null,null],[14,"iorw!","","Encode an ioctl command that both reads and writes.",null,null],[14,"convert_ioctl_res!","","Convert raw ioctl return value to a Nix result",null,null],[14,"ioctl!","","Declare a wrapper function around an ioctl.",null,null]],"paths":[[3,"group"],[3,"utimbuf"],[3,"timeval"],[3,"timespec"],[3,"rlimit"],[3,"rusage"],[3,"in_addr"],[3,"in6_addr"],[3,"ip_mreq"],[3,"ipv6_mreq"],[3,"hostent"],[3,"iovec"],[3,"pollfd"],[3,"winsize"],[3,"linger"],[3,"sockaddr"],[3,"sockaddr_in"],[3,"sockaddr_in6"],[3,"sockaddr_un"],[3,"sockaddr_storage"],[3,"addrinfo"],[3,"sockaddr_nl"],[3,"sockaddr_ll"],[3,"fd_set"],[3,"tm"],[3,"sched_param"],[3,"Dl_info"],[3,"epoll_event"],[3,"utsname"],[3,"lconv"],[3,"dirent"],[3,"dirent64"],[3,"rlimit64"],[3,"glob_t"],[3,"ifaddrs"],[3,"pthread_mutex_t"],[3,"pthread_rwlock_t"],[3,"pthread_mutexattr_t"],[3,"pthread_cond_t"],[3,"pthread_condattr_t"],[3,"passwd"],[3,"statvfs"],[3,"dqblk"],[3,"signalfd_siginfo"],[3,"fsid_t"],[3,"mq_attr"],[3,"cpu_set_t"],[3,"if_nameindex"],[3,"__exit_status"],[3,"__timeval"],[3,"utmpx"],[3,"sigaction"],[3,"stack_t"],[3,"siginfo_t"],[3,"glob64_t"],[3,"ucred"],[3,"statfs"],[3,"msghdr"],[3,"termios"],[3,"flock"],[3,"sem_t"],[3,"sigset_t"],[3,"sysinfo"],[3,"FileStat"],[3,"stat64"],[3,"pthread_attr_t"],[3,"_libc_fpxreg"],[3,"_libc_xmmreg"],[3,"_libc_fpstate"],[3,"mcontext_t"],[3,"ucontext_t"],[3,"ipc_perm"],[3,"shmid_ds"],[4,"Errno"],[4,"Error"],[8,"ErrnoSentinel"],[3,"Error"],[4,"FcntlArg"],[4,"FlockArg"],[3,"SpliceFFlags"],[3,"OFlag"],[3,"FdFlag"],[3,"SealFlag"],[3,"MsFlags"],[3,"MntFlags"],[3,"MQ_OFlag"],[3,"FdFlag"],[3,"MqAttr"],[3,"PollFd"],[3,"EventFlags"],[3,"CloneFlags"],[3,"CpuSet"],[4,"EpollOp"],[3,"EpollFlags"],[3,"EpollCreateFlags"],[3,"EpollEvent"],[3,"MemFdCreateFlag"],[4,"Signal"],[4,"SigHandler"],[3,"SignalIterator"],[3,"SaFlags"],[3,"SigFlags"],[3,"SigSet"],[3,"SigAction"],[3,"UnixAddr"],[3,"Ipv4Addr"],[3,"Ipv6Addr"],[3,"NetlinkAddr"],[3,"ip_mreq"],[3,"ipv6_mreq"],[3,"RecvMsg"],[3,"linger"],[4,"AddressFamily"],[4,"SockAddr"],[4,"InetAddr"],[4,"IpAddr"],[4,"SockType"],[4,"ControlMessage"],[4,"SockLevel"],[4,"Shutdown"],[3,"MsgFlags"],[3,"ReuseAddr"],[3,"ReusePort"],[3,"TcpNoDelay"],[3,"Linger"],[3,"IpAddMembership"],[3,"IpDropMembership"],[3,"Ipv6AddMembership"],[3,"Ipv6DropMembership"],[3,"IpMulticastTtl"],[3,"IpMulticastLoop"],[3,"ReceiveTimeout"],[3,"SendTimeout"],[3,"Broadcast"],[3,"OobInline"],[3,"SocketError"],[3,"KeepAlive"],[3,"PeerCredentials"],[3,"TcpKeepIdle"],[3,"RcvBuf"],[3,"SndBuf"],[3,"RcvBufForce"],[3,"SndBufForce"],[3,"SockType"],[3,"AcceptConn"],[3,"OriginalDst"],[8,"GetSockOpt"],[8,"SetSockOpt"],[3,"SockFlag"],[3,"CmsgSpace"],[3,"CmsgIterator"],[3,"ucred"],[3,"SFlag"],[3,"Mode"],[4,"RebootMode"],[3,"Termios"],[4,"SetArg"],[4,"FlushArg"],[4,"FlowArg"],[3,"InputFlags"],[3,"OutputFlags"],[3,"ControlFlags"],[3,"LocalFlags"],[3,"UtsName"],[4,"WaitStatus"],[3,"WaitPidFlag"],[3,"MapFlags"],[3,"MsFlags"],[3,"ProtFlags"],[3,"IoVec"],[3,"TimeVal"],[3,"FdSet"],[3,"QuotaCmd"],[3,"Dqblk"],[3,"QuotaValidFlags"],[3,"Statfs"],[3,"Statvfs"],[3,"FsFlags"],[3,"UContext"],[4,"ForkResult"],[4,"Whence"],[8,"NixPath"],[3,"OsStr"],[3,"CStr"],[3,"Path"],[3,"PathBuf"],[4,"Option"]]};
searchIndex["cfg_if"] = {"doc":"A macro for defining #[cfg] if-else statements.","items":[[14,"cfg_if!","cfg_if","",null,null]],"paths":[]};
searchIndex["libc"] = {"doc":"Crate docs","items":[[3,"group","libc","",null,null],[12,"gr_name","","",0,null],[12,"gr_passwd","","",0,null],[12,"gr_gid","","",0,null],[12,"gr_mem","","",0,null],[3,"utimbuf","","",null,null],[12,"actime","","",1,null],[12,"modtime","","",1,null],[3,"timeval","","",null,null],[12,"tv_sec","","",2,null],[12,"tv_usec","","",2,null],[3,"timespec","","",null,null],[12,"tv_sec","","",3,null],[12,"tv_nsec","","",3,null],[3,"rlimit","","",null,null],[12,"rlim_cur","","",4,null],[12,"rlim_max","","",4,null],[3,"rusage","","",null,null],[12,"ru_utime","","",5,null],[12,"ru_stime","","",5,null],[12,"ru_maxrss","","",5,null],[12,"ru_ixrss","","",5,null],[12,"ru_idrss","","",5,null],[12,"ru_isrss","","",5,null],[12,"ru_minflt","","",5,null],[12,"ru_majflt","","",5,null],[12,"ru_nswap","","",5,null],[12,"ru_inblock","","",5,null],[12,"ru_oublock","","",5,null],[12,"ru_msgsnd","","",5,null],[12,"ru_msgrcv","","",5,null],[12,"ru_nsignals","","",5,null],[12,"ru_nvcsw","","",5,null],[12,"ru_nivcsw","","",5,null],[3,"in_addr","","",null,null],[12,"s_addr","","",6,null],[3,"in6_addr","","",null,null],[12,"s6_addr","","",7,null],[3,"ip_mreq","","",null,null],[12,"imr_multiaddr","","",8,null],[12,"imr_interface","","",8,null],[3,"ipv6_mreq","","",null,null],[12,"ipv6mr_multiaddr","","",9,null],[12,"ipv6mr_interface","","",9,null],[3,"hostent","","",null,null],[12,"h_name","","",10,null],[12,"h_aliases","","",10,null],[12,"h_addrtype","","",10,null],[12,"h_length","","",10,null],[12,"h_addr_list","","",10,null],[3,"iovec","","",null,null],[12,"iov_base","","",11,null],[12,"iov_len","","",11,null],[3,"pollfd","","",null,null],[12,"fd","","",12,null],[12,"events","","",12,null],[12,"revents","","",12,null],[3,"winsize","","",null,null],[12,"ws_row","","",13,null],[12,"ws_col","","",13,null],[12,"ws_xpixel","","",13,null],[12,"ws_ypixel","","",13,null],[3,"linger","","",null,null],[12,"l_onoff","","",14,null],[12,"l_linger","","",14,null],[3,"sockaddr","","",null,null],[12,"sa_family","","",15,null],[12,"sa_data","","",15,null],[3,"sockaddr_in","","",null,null],[12,"sin_family","","",16,null],[12,"sin_port","","",16,null],[12,"sin_addr","","",16,null],[12,"sin_zero","","",16,null],[3,"sockaddr_in6","","",null,null],[12,"sin6_family","","",17,null],[12,"sin6_port","","",17,null],[12,"sin6_flowinfo","","",17,null],[12,"sin6_addr","","",17,null],[12,"sin6_scope_id","","",17,null],[3,"sockaddr_un","","",null,null],[12,"sun_family","","",18,null],[12,"sun_path","","",18,null],[3,"sockaddr_storage","","",null,null],[12,"ss_family","","",19,null],[3,"addrinfo","","",null,null],[12,"ai_flags","","",20,null],[12,"ai_family","","",20,null],[12,"ai_socktype","","",20,null],[12,"ai_protocol","","",20,null],[12,"ai_addrlen","","",20,null],[12,"ai_addr","","",20,null],[12,"ai_canonname","","",20,null],[12,"ai_next","","",20,null],[3,"sockaddr_nl","","",null,null],[12,"nl_family","","",21,null],[12,"nl_pid","","",21,null],[12,"nl_groups","","",21,null],[3,"sockaddr_ll","","",null,null],[12,"sll_family","","",22,null],[12,"sll_protocol","","",22,null],[12,"sll_ifindex","","",22,null],[12,"sll_hatype","","",22,null],[12,"sll_pkttype","","",22,null],[12,"sll_halen","","",22,null],[12,"sll_addr","","",22,null],[3,"fd_set","","",null,null],[3,"tm","","",null,null],[12,"tm_sec","","",23,null],[12,"tm_min","","",23,null],[12,"tm_hour","","",23,null],[12,"tm_mday","","",23,null],[12,"tm_mon","","",23,null],[12,"tm_year","","",23,null],[12,"tm_wday","","",23,null],[12,"tm_yday","","",23,null],[12,"tm_isdst","","",23,null],[12,"tm_gmtoff","","",23,null],[12,"tm_zone","","",23,null],[3,"sched_param","","",null,null],[12,"sched_priority","","",24,null],[3,"Dl_info","","",null,null],[12,"dli_fname","","",25,null],[12,"dli_fbase","","",25,null],[12,"dli_sname","","",25,null],[12,"dli_saddr","","",25,null],[3,"epoll_event","","",null,null],[12,"events","","",26,null],[12,"u64","","",26,null],[3,"utsname","","",null,null],[12,"sysname","","",27,null],[12,"nodename","","",27,null],[12,"release","","",27,null],[12,"version","","",27,null],[12,"machine","","",27,null],[12,"domainname","","",27,null],[3,"lconv","","",null,null],[12,"decimal_point","","",28,null],[12,"thousands_sep","","",28,null],[12,"grouping","","",28,null],[12,"int_curr_symbol","","",28,null],[12,"currency_symbol","","",28,null],[12,"mon_decimal_point","","",28,null],[12,"mon_thousands_sep","","",28,null],[12,"mon_grouping","","",28,null],[12,"positive_sign","","",28,null],[12,"negative_sign","","",28,null],[12,"int_frac_digits","","",28,null],[12,"frac_digits","","",28,null],[12,"p_cs_precedes","","",28,null],[12,"p_sep_by_space","","",28,null],[12,"n_cs_precedes","","",28,null],[12,"n_sep_by_space","","",28,null],[12,"p_sign_posn","","",28,null],[12,"n_sign_posn","","",28,null],[12,"int_p_cs_precedes","","",28,null],[12,"int_p_sep_by_space","","",28,null],[12,"int_n_cs_precedes","","",28,null],[12,"int_n_sep_by_space","","",28,null],[12,"int_p_sign_posn","","",28,null],[12,"int_n_sign_posn","","",28,null],[3,"dirent","","",null,null],[12,"d_ino","","",29,null],[12,"d_off","","",29,null],[12,"d_reclen","","",29,null],[12,"d_type","","",29,null],[12,"d_name","","",29,null],[3,"dirent64","","",null,null],[12,"d_ino","","",30,null],[12,"d_off","","",30,null],[12,"d_reclen","","",30,null],[12,"d_type","","",30,null],[12,"d_name","","",30,null],[3,"rlimit64","","",null,null],[12,"rlim_cur","","",31,null],[12,"rlim_max","","",31,null],[3,"glob_t","","",null,null],[12,"gl_pathc","","",32,null],[12,"gl_pathv","","",32,null],[12,"gl_offs","","",32,null],[12,"gl_flags","","",32,null],[3,"ifaddrs","","",null,null],[12,"ifa_next","","",33,null],[12,"ifa_name","","",33,null],[12,"ifa_flags","","",33,null],[12,"ifa_addr","","",33,null],[12,"ifa_netmask","","",33,null],[12,"ifa_ifu","","",33,null],[12,"ifa_data","","",33,null],[3,"pthread_mutex_t","","",null,null],[3,"pthread_rwlock_t","","",null,null],[3,"pthread_mutexattr_t","","",null,null],[3,"pthread_cond_t","","",null,null],[3,"pthread_condattr_t","","",null,null],[3,"passwd","","",null,null],[12,"pw_name","","",34,null],[12,"pw_passwd","","",34,null],[12,"pw_uid","","",34,null],[12,"pw_gid","","",34,null],[12,"pw_gecos","","",34,null],[12,"pw_dir","","",34,null],[12,"pw_shell","","",34,null],[3,"statvfs","","",null,null],[12,"f_bsize","","",35,null],[12,"f_frsize","","",35,null],[12,"f_blocks","","",35,null],[12,"f_bfree","","",35,null],[12,"f_bavail","","",35,null],[12,"f_files","","",35,null],[12,"f_ffree","","",35,null],[12,"f_favail","","",35,null],[12,"f_fsid","","",35,null],[12,"f_flag","","",35,null],[12,"f_namemax","","",35,null],[3,"dqblk","","",null,null],[12,"dqb_bhardlimit","","",36,null],[12,"dqb_bsoftlimit","","",36,null],[12,"dqb_curspace","","",36,null],[12,"dqb_ihardlimit","","",36,null],[12,"dqb_isoftlimit","","",36,null],[12,"dqb_curinodes","","",36,null],[12,"dqb_btime","","",36,null],[12,"dqb_itime","","",36,null],[12,"dqb_valid","","",36,null],[3,"signalfd_siginfo","","",null,null],[12,"ssi_signo","","",37,null],[12,"ssi_errno","","",37,null],[12,"ssi_code","","",37,null],[12,"ssi_pid","","",37,null],[12,"ssi_uid","","",37,null],[12,"ssi_fd","","",37,null],[12,"ssi_tid","","",37,null],[12,"ssi_band","","",37,null],[12,"ssi_overrun","","",37,null],[12,"ssi_trapno","","",37,null],[12,"ssi_status","","",37,null],[12,"ssi_int","","",37,null],[12,"ssi_ptr","","",37,null],[12,"ssi_utime","","",37,null],[12,"ssi_stime","","",37,null],[12,"ssi_addr","","",37,null],[3,"fsid_t","","",null,null],[3,"mq_attr","","",null,null],[12,"mq_flags","","",38,null],[12,"mq_maxmsg","","",38,null],[12,"mq_msgsize","","",38,null],[12,"mq_curmsgs","","",38,null],[3,"cpu_set_t","","",null,null],[3,"if_nameindex","","",null,null],[12,"if_index","","",39,null],[12,"if_name","","",39,null],[3,"__exit_status","","",null,null],[12,"e_termination","","",40,null],[12,"e_exit","","",40,null],[3,"__timeval","","",null,null],[12,"tv_sec","","",41,null],[12,"tv_usec","","",41,null],[3,"utmpx","","",null,null],[12,"ut_type","","",42,null],[12,"ut_pid","","",42,null],[12,"ut_line","","",42,null],[12,"ut_id","","",42,null],[12,"ut_user","","",42,null],[12,"ut_host","","",42,null],[12,"ut_exit","","",42,null],[12,"ut_session","","",42,null],[12,"ut_tv","","",42,null],[12,"ut_addr_v6","","",42,null],[3,"sigaction","","",null,null],[12,"sa_sigaction","","",43,null],[12,"sa_mask","","",43,null],[12,"sa_flags","","",43,null],[3,"stack_t","","",null,null],[12,"ss_sp","","",44,null],[12,"ss_flags","","",44,null],[12,"ss_size","","",44,null],[3,"siginfo_t","","",null,null],[12,"si_signo","","",45,null],[12,"si_errno","","",45,null],[12,"si_code","","",45,null],[12,"_pad","","",45,null],[3,"glob64_t","","",null,null],[12,"gl_pathc","","",46,null],[12,"gl_pathv","","",46,null],[12,"gl_offs","","",46,null],[12,"gl_flags","","",46,null],[3,"ucred","","",null,null],[12,"pid","","",47,null],[12,"uid","","",47,null],[12,"gid","","",47,null],[3,"statfs","","",null,null],[12,"f_type","","",48,null],[12,"f_bsize","","",48,null],[12,"f_blocks","","",48,null],[12,"f_bfree","","",48,null],[12,"f_bavail","","",48,null],[12,"f_files","","",48,null],[12,"f_ffree","","",48,null],[12,"f_fsid","","",48,null],[12,"f_namelen","","",48,null],[12,"f_frsize","","",48,null],[3,"msghdr","","",null,null],[12,"msg_name","","",49,null],[12,"msg_namelen","","",49,null],[12,"msg_iov","","",49,null],[12,"msg_iovlen","","",49,null],[12,"msg_control","","",49,null],[12,"msg_controllen","","",49,null],[12,"msg_flags","","",49,null],[3,"termios","","",null,null],[12,"c_iflag","","",50,null],[12,"c_oflag","","",50,null],[12,"c_cflag","","",50,null],[12,"c_lflag","","",50,null],[12,"c_line","","",50,null],[12,"c_cc","","",50,null],[12,"c_ispeed","","",50,null],[12,"c_ospeed","","",50,null],[3,"flock","","",null,null],[12,"l_type","","",51,null],[12,"l_whence","","",51,null],[12,"l_start","","",51,null],[12,"l_len","","",51,null],[12,"l_pid","","",51,null],[3,"sem_t","","",null,null],[3,"sigset_t","","",null,null],[3,"sysinfo","","",null,null],[12,"uptime","","",52,null],[12,"loads","","",52,null],[12,"totalram","","",52,null],[12,"freeram","","",52,null],[12,"sharedram","","",52,null],[12,"bufferram","","",52,null],[12,"totalswap","","",52,null],[12,"freeswap","","",52,null],[12,"procs","","",52,null],[12,"pad","","",52,null],[12,"totalhigh","","",52,null],[12,"freehigh","","",52,null],[12,"mem_unit","","",52,null],[12,"_f","","",52,null],[3,"stat","","",null,null],[12,"st_dev","","",53,null],[12,"st_ino","","",53,null],[12,"st_nlink","","",53,null],[12,"st_mode","","",53,null],[12,"st_uid","","",53,null],[12,"st_gid","","",53,null],[12,"st_rdev","","",53,null],[12,"st_size","","",53,null],[12,"st_blksize","","",53,null],[12,"st_blocks","","",53,null],[12,"st_atime","","",53,null],[12,"st_atime_nsec","","",53,null],[12,"st_mtime","","",53,null],[12,"st_mtime_nsec","","",53,null],[12,"st_ctime","","",53,null],[12,"st_ctime_nsec","","",53,null],[3,"stat64","","",null,null],[12,"st_dev","","",54,null],[12,"st_ino","","",54,null],[12,"st_nlink","","",54,null],[12,"st_mode","","",54,null],[12,"st_uid","","",54,null],[12,"st_gid","","",54,null],[12,"st_rdev","","",54,null],[12,"st_size","","",54,null],[12,"st_blksize","","",54,null],[12,"st_blocks","","",54,null],[12,"st_atime","","",54,null],[12,"st_atime_nsec","","",54,null],[12,"st_mtime","","",54,null],[12,"st_mtime_nsec","","",54,null],[12,"st_ctime","","",54,null],[12,"st_ctime_nsec","","",54,null],[3,"pthread_attr_t","","",null,null],[3,"_libc_fpxreg","","",null,null],[12,"significand","","",55,null],[12,"exponent","","",55,null],[3,"_libc_xmmreg","","",null,null],[12,"element","","",56,null],[3,"_libc_fpstate","","",null,null],[12,"cwd","","",57,null],[12,"swd","","",57,null],[12,"ftw","","",57,null],[12,"fop","","",57,null],[12,"rip","","",57,null],[12,"rdp","","",57,null],[12,"mxcsr","","",57,null],[12,"mxcr_mask","","",57,null],[12,"_st","","",57,null],[12,"_xmm","","",57,null],[3,"mcontext_t","","",null,null],[12,"gregs","","",58,null],[12,"fpregs","","",58,null],[3,"ucontext_t","","",null,null],[12,"uc_flags","","",59,null],[12,"uc_link","","",59,null],[12,"uc_stack","","",59,null],[12,"uc_mcontext","","",59,null],[12,"uc_sigmask","","",59,null],[3,"ipc_perm","","",null,null],[12,"__key","","",60,null],[12,"uid","","",60,null],[12,"gid","","",60,null],[12,"cuid","","",60,null],[12,"cgid","","",60,null],[12,"mode","","",60,null],[12,"__seq","","",60,null],[3,"shmid_ds","","",null,null],[12,"shm_perm","","",61,null],[12,"shm_segsz","","",61,null],[12,"shm_atime","","",61,null],[12,"shm_dtime","","",61,null],[12,"shm_ctime","","",61,null],[12,"shm_cpid","","",61,null],[12,"shm_lpid","","",61,null],[12,"shm_nattch","","",61,null],[4,"c_void","","",null,null],[4,"FILE","","",null,null],[4,"fpos_t","","",null,null],[4,"DIR","","",null,null],[4,"locale_t","","",null,null],[4,"timezone","","",null,null],[4,"fpos64_t","","",null,null],[5,"FD_CLR","","",null,null],[5,"FD_ISSET","","",null,null],[5,"FD_SET","","",null,null],[5,"FD_ZERO","","",null,null],[5,"WIFSTOPPED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WSTOPSIG","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WIFSIGNALED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WTERMSIG","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WIFEXITED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WEXITSTATUS","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WCOREDUMP","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"CPU_ZERO","","",null,null],[5,"CPU_SET","","",null,null],[5,"CPU_CLR","","",null,null],[5,"CPU_ISSET","","",null,{"inputs":[{"name":"usize"},{"name":"cpu_set_t"}],"output":{"name":"bool"}}],[5,"CPU_EQUAL","","",null,{"inputs":[{"name":"cpu_set_t"},{"name":"cpu_set_t"}],"output":{"name":"bool"}}],[5,"isalnum","","",null,null],[5,"isalpha","","",null,null],[5,"iscntrl","","",null,null],[5,"isdigit","","",null,null],[5,"isgraph","","",null,null],[5,"islower","","",null,null],[5,"isprint","","",null,null],[5,"ispunct","","",null,null],[5,"isspace","","",null,null],[5,"isupper","","",null,null],[5,"isxdigit","","",null,null],[5,"tolower","","",null,null],[5,"toupper","","",null,null],[5,"fopen","","",null,null],[5,"freopen","","",null,null],[5,"fflush","","",null,null],[5,"fclose","","",null,null],[5,"remove","","",null,null],[5,"rename","","",null,null],[5,"tmpfile","","",null,null],[5,"setvbuf","","",null,null],[5,"setbuf","","",null,null],[5,"getchar","","",null,null],[5,"putchar","","",null,null],[5,"fgetc","","",null,null],[5,"fgets","","",null,null],[5,"fputc","","",null,null],[5,"fputs","","",null,null],[5,"puts","","",null,null],[5,"ungetc","","",null,null],[5,"fread","","",null,null],[5,"fwrite","","",null,null],[5,"fseek","","",null,null],[5,"ftell","","",null,null],[5,"rewind","","",null,null],[5,"fgetpos","","",null,null],[5,"fsetpos","","",null,null],[5,"feof","","",null,null],[5,"ferror","","",null,null],[5,"perror","","",null,null],[5,"atoi","","",null,null],[5,"strtod","","",null,null],[5,"strtol","","",null,null],[5,"strtoul","","",null,null],[5,"calloc","","",null,null],[5,"malloc","","",null,null],[5,"realloc","","",null,null],[5,"free","","",null,null],[5,"abort","","",null,null],[5,"exit","","",null,null],[5,"_exit","","",null,null],[5,"atexit","","",null,null],[5,"system","","",null,null],[5,"getenv","","",null,null],[5,"strcpy","","",null,null],[5,"strncpy","","",null,null],[5,"strcat","","",null,null],[5,"strncat","","",null,null],[5,"strcmp","","",null,null],[5,"strncmp","","",null,null],[5,"strcoll","","",null,null],[5,"strchr","","",null,null],[5,"strrchr","","",null,null],[5,"strspn","","",null,null],[5,"strcspn","","",null,null],[5,"strdup","","",null,null],[5,"strpbrk","","",null,null],[5,"strstr","","",null,null],[5,"strlen","","",null,null],[5,"strnlen","","",null,null],[5,"strerror","","",null,null],[5,"strtok","","",null,null],[5,"strxfrm","","",null,null],[5,"wcslen","","",null,null],[5,"memchr","","",null,null],[5,"memcmp","","",null,null],[5,"memcpy","","",null,null],[5,"memmove","","",null,null],[5,"memset","","",null,null],[5,"abs","","",null,null],[5,"atof","","",null,null],[5,"labs","","",null,null],[5,"rand","","",null,null],[5,"srand","","",null,null],[5,"getgrnam","","",null,null],[5,"getgrgid","","",null,null],[5,"endpwent","","",null,null],[5,"getpwnam","","",null,null],[5,"getpwuid","","",null,null],[5,"fprintf","","",null,null],[5,"printf","","",null,null],[5,"snprintf","","",null,null],[5,"sprintf","","",null,null],[5,"fscanf","","",null,null],[5,"scanf","","",null,null],[5,"sscanf","","",null,null],[5,"socket","","",null,null],[5,"connect","","",null,null],[5,"bind","","",null,null],[5,"listen","","",null,null],[5,"accept","","",null,null],[5,"getpeername","","",null,null],[5,"getsockname","","",null,null],[5,"setsockopt","","",null,null],[5,"socketpair","","",null,null],[5,"sendto","","",null,null],[5,"shutdown","","",null,null],[5,"chmod","","",null,null],[5,"fchmod","","",null,null],[5,"fstat","","",null,null],[5,"mkdir","","",null,null],[5,"stat","","",null,null],[5,"popen","","",null,null],[5,"pclose","","",null,null],[5,"fdopen","","",null,null],[5,"fileno","","",null,null],[5,"open","","",null,null],[5,"creat","","",null,null],[5,"fcntl","","",null,null],[5,"opendir","","",null,null],[5,"readdir_r","","",null,null],[5,"closedir","","",null,null],[5,"rewinddir","","",null,null],[5,"access","","",null,null],[5,"alarm","","",null,null],[5,"chdir","","",null,null],[5,"chown","","",null,null],[5,"lchown","","",null,null],[5,"close","","",null,null],[5,"dup","","",null,null],[5,"dup2","","",null,null],[5,"execv","","",null,null],[5,"execve","","",null,null],[5,"execvp","","",null,null],[5,"fork","","",null,null],[5,"fpathconf","","",null,null],[5,"getcwd","","",null,null],[5,"getegid","","",null,null],[5,"geteuid","","",null,null],[5,"getgid","","",null,null],[5,"getgroups","","",null,null],[5,"getlogin","","",null,null],[5,"getopt","","",null,null],[5,"getpgid","","",null,null],[5,"getpgrp","","",null,null],[5,"getpid","","",null,null],[5,"getppid","","",null,null],[5,"getuid","","",null,null],[5,"isatty","","",null,null],[5,"link","","",null,null],[5,"lseek","","",null,null],[5,"pathconf","","",null,null],[5,"pause","","",null,null],[5,"pipe","","",null,null],[5,"posix_memalign","","",null,null],[5,"read","","",null,null],[5,"rmdir","","",null,null],[5,"setgid","","",null,null],[5,"setpgid","","",null,null],[5,"setsid","","",null,null],[5,"setuid","","",null,null],[5,"sleep","","",null,null],[5,"nanosleep","","",null,null],[5,"tcgetpgrp","","",null,null],[5,"ttyname","","",null,null],[5,"unlink","","",null,null],[5,"wait","","",null,null],[5,"waitpid","","",null,null],[5,"write","","",null,null],[5,"pread","","",null,null],[5,"pwrite","","",null,null],[5,"umask","","",null,null],[5,"utime","","",null,null],[5,"kill","","",null,null],[5,"mlock","","",null,null],[5,"munlock","","",null,null],[5,"mlockall","","",null,null],[5,"munlockall","","",null,null],[5,"mmap","","",null,null],[5,"munmap","","",null,null],[5,"if_nametoindex","","",null,null],[5,"if_indextoname","","",null,null],[5,"lstat","","",null,null],[5,"fsync","","",null,null],[5,"setenv","","",null,null],[5,"unsetenv","","",null,null],[5,"symlink","","",null,null],[5,"ftruncate","","",null,null],[5,"signal","","",null,null],[5,"getrlimit","","",null,null],[5,"setrlimit","","",null,null],[5,"getrusage","","",null,null],[5,"getdtablesize","","",null,null],[5,"realpath","","",null,null],[5,"flock","","",null,null],[5,"gettimeofday","","",null,null],[5,"pthread_self","","",null,null],[5,"pthread_create","","",null,null],[5,"pthread_join","","",null,null],[5,"pthread_attr_init","","",null,null],[5,"pthread_attr_destroy","","",null,null],[5,"pthread_attr_setstacksize","","",null,null],[5,"pthread_attr_setdetachstate","","",null,null],[5,"pthread_detach","","",null,null],[5,"sched_yield","","",null,null],[5,"pthread_key_create","","",null,null],[5,"pthread_key_delete","","",null,null],[5,"pthread_getspecific","","",null,null],[5,"pthread_setspecific","","",null,null],[5,"pthread_mutex_init","","",null,null],[5,"pthread_mutex_destroy","","",null,null],[5,"pthread_mutex_lock","","",null,null],[5,"pthread_mutex_trylock","","",null,null],[5,"pthread_mutex_unlock","","",null,null],[5,"pthread_mutexattr_init","","",null,null],[5,"pthread_mutexattr_destroy","","",null,null],[5,"pthread_mutexattr_settype","","",null,null],[5,"pthread_cond_init","","",null,null],[5,"pthread_cond_wait","","",null,null],[5,"pthread_cond_timedwait","","",null,null],[5,"pthread_cond_signal","","",null,null],[5,"pthread_cond_broadcast","","",null,null],[5,"pthread_cond_destroy","","",null,null],[5,"pthread_condattr_init","","",null,null],[5,"pthread_condattr_destroy","","",null,null],[5,"pthread_rwlock_destroy","","",null,null],[5,"pthread_rwlock_rdlock","","",null,null],[5,"pthread_rwlock_tryrdlock","","",null,null],[5,"pthread_rwlock_wrlock","","",null,null],[5,"pthread_rwlock_trywrlock","","",null,null],[5,"pthread_rwlock_unlock","","",null,null],[5,"pthread_sigmask","","",null,null],[5,"pthread_kill","","",null,null],[5,"strerror_r","","",null,null],[5,"getsockopt","","",null,null],[5,"raise","","",null,null],[5,"sigaction","","",null,null],[5,"sigaltstack","","",null,null],[5,"sigwait","","",null,null],[5,"utimes","","",null,null],[5,"dlopen","","",null,null],[5,"dlerror","","",null,null],[5,"dlsym","","",null,null],[5,"dlclose","","",null,null],[5,"dladdr","","",null,null],[5,"getaddrinfo","","",null,null],[5,"freeaddrinfo","","",null,null],[5,"gai_strerror","","",null,null],[5,"gmtime_r","","",null,null],[5,"localtime_r","","",null,null],[5,"mktime","","",null,null],[5,"mknod","","",null,null],[5,"writev","","",null,null],[5,"readv","","",null,null],[5,"uname","","",null,null],[5,"daemon","","",null,null],[5,"gethostname","","",null,null],[5,"chroot","","",null,null],[5,"usleep","","",null,null],[5,"send","","",null,null],[5,"recv","","",null,null],[5,"putenv","","",null,null],[5,"sendmsg","","",null,null],[5,"recvmsg","","",null,null],[5,"poll","","",null,null],[5,"select","","",null,null],[5,"setlocale","","",null,null],[5,"localeconv","","",null,null],[5,"sem_destroy","","",null,null],[5,"sem_open","","",null,null],[5,"sem_close","","",null,null],[5,"sem_unlink","","",null,null],[5,"sem_wait","","",null,null],[5,"sem_trywait","","",null,null],[5,"sem_post","","",null,null],[5,"sem_init","","",null,null],[5,"getifaddrs","","",null,null],[5,"freeifaddrs","","",null,null],[5,"glob","","",null,null],[5,"globfree","","",null,null],[5,"posix_madvise","","",null,null],[5,"shm_unlink","","",null,null],[5,"seekdir","","",null,null],[5,"telldir","","",null,null],[5,"getsid","","",null,null],[5,"madvise","","",null,null],[5,"readlink","","",null,null],[5,"msync","","",null,null],[5,"sysconf","","",null,null],[5,"recvfrom","","",null,null],[5,"mkfifo","","",null,null],[5,"sigemptyset","","",null,null],[5,"sigaddset","","",null,null],[5,"sigfillset","","",null,null],[5,"sigdelset","","",null,null],[5,"sigismember","","",null,null],[5,"pselect","","",null,null],[5,"fseeko","","",null,null],[5,"ftello","","",null,null],[5,"timegm","","",null,null],[5,"statvfs","","",null,null],[5,"fstatvfs","","",null,null],[5,"tcdrain","","",null,null],[5,"cfgetispeed","","",null,null],[5,"cfgetospeed","","",null,null],[5,"cfsetispeed","","",null,null],[5,"cfsetospeed","","",null,null],[5,"tcgetattr","","",null,null],[5,"tcsetattr","","",null,null],[5,"tcflow","","",null,null],[5,"tcflush","","",null,null],[5,"tcsendbreak","","",null,null],[5,"mkstemp","","",null,null],[5,"mkstemps","","",null,null],[5,"mkdtemp","","",null,null],[5,"futimes","","",null,null],[5,"nl_langinfo","","",null,null],[5,"openlog","","",null,null],[5,"closelog","","",null,null],[5,"setlogmask","","",null,null],[5,"syslog","","",null,null],[5,"nice","","",null,null],[5,"getpwnam_r","","",null,null],[5,"getpwuid_r","","",null,null],[5,"fdatasync","","",null,null],[5,"mincore","","",null,null],[5,"clock_getres","","",null,null],[5,"clock_gettime","","",null,null],[5,"clock_nanosleep","","",null,null],[5,"prctl","","",null,null],[5,"pthread_getattr_np","","",null,null],[5,"pthread_attr_getguardsize","","",null,null],[5,"pthread_attr_getstack","","",null,null],[5,"memalign","","",null,null],[5,"setgroups","","",null,null],[5,"sched_setscheduler","","",null,null],[5,"sched_getscheduler","","",null,null],[5,"sched_get_priority_max","","",null,null],[5,"sched_get_priority_min","","",null,null],[5,"epoll_create","","",null,null],[5,"epoll_create1","","",null,null],[5,"epoll_ctl","","",null,null],[5,"epoll_wait","","",null,null],[5,"pipe2","","",null,null],[5,"mount","","",null,null],[5,"umount","","",null,null],[5,"umount2","","",null,null],[5,"clone","","",null,null],[5,"statfs","","",null,null],[5,"fstatfs","","",null,null],[5,"memrchr","","",null,null],[5,"syscall","","",null,null],[5,"sendfile","","",null,null],[5,"splice","","",null,null],[5,"tee","","",null,null],[5,"vmsplice","","",null,null],[5,"posix_fadvise","","",null,null],[5,"futimens","","",null,null],[5,"utimensat","","",null,null],[5,"duplocale","","",null,null],[5,"freelocale","","",null,null],[5,"newlocale","","",null,null],[5,"uselocale","","",null,null],[5,"creat64","","",null,null],[5,"fstat64","","",null,null],[5,"ftruncate64","","",null,null],[5,"getrlimit64","","",null,null],[5,"lseek64","","",null,null],[5,"lstat64","","",null,null],[5,"mmap64","","",null,null],[5,"open64","","",null,null],[5,"pread64","","",null,null],[5,"pwrite64","","",null,null],[5,"readdir64_r","","",null,null],[5,"setrlimit64","","",null,null],[5,"stat64","","",null,null],[5,"eventfd","","",null,null],[5,"sysinfo","","",null,null],[5,"openat","","",null,null],[5,"faccessat","","",null,null],[5,"fchmodat","","",null,null],[5,"fchownat","","",null,null],[5,"fstatat","","",null,null],[5,"linkat","","",null,null],[5,"mkdirat","","",null,null],[5,"mknodat","","",null,null],[5,"readlinkat","","",null,null],[5,"renameat","","",null,null],[5,"symlinkat","","",null,null],[5,"unlinkat","","",null,null],[5,"pthread_condattr_getclock","","",null,null],[5,"pthread_condattr_setclock","","",null,null],[5,"sched_getaffinity","","",null,null],[5,"sched_setaffinity","","",null,null],[5,"unshare","","",null,null],[5,"setns","","",null,null],[5,"sem_timedwait","","",null,null],[5,"accept4","","",null,null],[5,"lutimes","","",null,null],[5,"setpwent","","",null,null],[5,"getpwent","","",null,null],[5,"shm_open","","",null,null],[5,"shmget","","",null,null],[5,"shmat","","",null,null],[5,"shmdt","","",null,null],[5,"shmctl","","",null,null],[5,"mprotect","","",null,null],[5,"__errno_location","","",null,null],[5,"fopen64","","",null,null],[5,"freopen64","","",null,null],[5,"tmpfile64","","",null,null],[5,"fgetpos64","","",null,null],[5,"fsetpos64","","",null,null],[5,"fseeko64","","",null,null],[5,"ftello64","","",null,null],[5,"fallocate","","",null,null],[5,"posix_fallocate","","",null,null],[5,"readahead","","",null,null],[5,"getxattr","","",null,null],[5,"lgetxattr","","",null,null],[5,"fgetxattr","","",null,null],[5,"setxattr","","",null,null],[5,"lsetxattr","","",null,null],[5,"fsetxattr","","",null,null],[5,"listxattr","","",null,null],[5,"llistxattr","","",null,null],[5,"flistxattr","","",null,null],[5,"removexattr","","",null,null],[5,"lremovexattr","","",null,null],[5,"fremovexattr","","",null,null],[5,"signalfd","","",null,null],[5,"pwritev","","",null,null],[5,"preadv","","",null,null],[5,"quotactl","","",null,null],[5,"mq_open","","",null,null],[5,"mq_close","","",null,null],[5,"mq_unlink","","",null,null],[5,"mq_receive","","",null,null],[5,"mq_send","","",null,null],[5,"mq_getattr","","",null,null],[5,"mq_setattr","","",null,null],[5,"epoll_pwait","","",null,null],[5,"dup3","","",null,null],[5,"sethostname","","",null,null],[5,"mkostemp","","",null,null],[5,"mkostemps","","",null,null],[5,"sigtimedwait","","",null,null],[5,"sigwaitinfo","","",null,null],[5,"openpty","","",null,null],[5,"forkpty","","",null,null],[5,"nl_langinfo_l","","",null,null],[5,"getnameinfo","","",null,null],[5,"prlimit","","",null,null],[5,"prlimit64","","",null,null],[5,"getloadavg","","",null,null],[5,"process_vm_readv","","",null,null],[5,"process_vm_writev","","",null,null],[5,"reboot","","",null,null],[5,"mkfifoat","","",null,null],[5,"if_nameindex","","",null,null],[5,"if_freenameindex","","",null,null],[5,"sync_file_range","","",null,null],[5,"utmpxname","","",null,null],[5,"getutxent","","",null,null],[5,"getutxid","","",null,null],[5,"getutxline","","",null,null],[5,"pututxline","","",null,null],[5,"setutxent","","",null,null],[5,"endutxent","","",null,null],[5,"sysctl","","",null,null],[5,"ioctl","","",null,null],[5,"backtrace","","",null,null],[5,"glob64","","",null,null],[5,"globfree64","","",null,null],[5,"ptrace","","",null,null],[5,"pthread_attr_getaffinity_np","","",null,null],[5,"pthread_attr_setaffinity_np","","",null,null],[5,"getpriority","","",null,null],[5,"setpriority","","",null,null],[5,"pthread_getaffinity_np","","",null,null],[5,"pthread_setaffinity_np","","",null,null],[5,"sched_getcpu","","",null,null],[5,"getcontext","","",null,null],[5,"setcontext","","",null,null],[5,"makecontext","","",null,null],[5,"swapcontext","","",null,null],[11,"is_some","core::option","Returns `true` if the option is a `Some` value",62,null],[11,"is_none","","Returns `true` if the option is a `None` value",62,null],[11,"as_ref","","Converts from `Option&lt;T&gt;` to `Option&lt;&amp;T&gt;`",62,null],[11,"as_mut","","Converts from `Option&lt;T&gt;` to `Option&lt;&amp;mut T&gt;`",62,null],[11,"expect","","Unwraps an option, yielding the content of a `Some`.",62,null],[11,"unwrap","","Moves the value `v` out of the `Option&lt;T&gt;` if it is `Some(v)`.",62,null],[11,"unwrap_or","","Returns the contained value or a default.",62,null],[11,"unwrap_or_else","","Returns the contained value or computes it from a closure.",62,null],[11,"map","","Maps an `Option&lt;T&gt;` to `Option&lt;U&gt;` by applying a function to a contained value",62,null],[11,"map_or","","Applies a function to the contained value (if any),\nor returns a `default` (if not).",62,null],[11,"map_or_else","","Applies a function to the contained value (if any),\nor computes a `default` (if not).",62,null],[11,"ok_or","","Transforms the `Option&lt;T&gt;` into a `Result&lt;T, E&gt;`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err)`.",62,null],[11,"ok_or_else","","Transforms the `Option&lt;T&gt;` into a `Result&lt;T, E&gt;`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err())`.",62,null],[11,"iter","","Returns an iterator over the possibly contained value.",62,null],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",62,null],[11,"and","","Returns `None` if the option is `None`, otherwise returns `optb`.",62,null],[11,"and_then","","Returns `None` if the option is `None`, otherwise calls `f` with the\nwrapped value and returns the result.",62,null],[11,"or","","Returns the option if it contains a value, otherwise returns `optb`.",62,null],[11,"or_else","","Returns the option if it contains a value, otherwise calls `f` and\nreturns the result.",62,null],[11,"take","","Takes the value out of the option, leaving a `None` in its place.",62,null],[11,"cloned","","Maps an `Option&lt;&amp;T&gt;` to an `Option&lt;T&gt;` by cloning the contents of the\noption.",62,null],[11,"unwrap_or_default","","Returns the contained value or a default",62,null],[11,"hash","core::num","",63,null],[11,"default","","",63,{"inputs":[],"output":{"name":"wrapping"}}],[11,"clone","","",63,null],[11,"cmp","","",63,null],[11,"partial_cmp","","",63,null],[11,"lt","","",63,null],[11,"le","","",63,null],[11,"gt","","",63,null],[11,"ge","","",63,null],[11,"eq","","",63,null],[11,"ne","","",63,null],[11,"fmt","","",63,null],[11,"fmt","","",63,null],[11,"fmt","","",63,null],[11,"fmt","","",63,null],[11,"fmt","","",63,null],[11,"fmt","","",63,null],[11,"shl","","",63,null],[11,"shl_assign","","",63,null],[11,"shr","","",63,null],[11,"shr_assign","","",63,null],[11,"shl","","",63,null],[11,"shl_assign","","",63,null],[11,"shr","","",63,null],[11,"shr_assign","","",63,null],[11,"shl","","",63,null],[11,"shl_assign","","",63,null],[11,"shr","","",63,null],[11,"shr_assign","","",63,null],[11,"shl","","",63,null],[11,"shl_assign","","",63,null],[11,"shr","","",63,null],[11,"shr_assign","","",63,null],[11,"shl","","",63,null],[11,"shl_assign","","",63,null],[11,"shr","","",63,null],[11,"shr_assign","","",63,null],[11,"shl","","",63,null],[11,"shl_assign","","",63,null],[11,"shr","","",63,null],[11,"shr_assign","","",63,null],[11,"shl","","",63,null],[11,"shl_assign","","",63,null],[11,"shr","","",63,null],[11,"shr_assign","","",63,null],[11,"shl","","",63,null],[11,"shl_assign","","",63,null],[11,"shr","","",63,null],[11,"shr_assign","","",63,null],[11,"shl","","",63,null],[11,"shl_assign","","",63,null],[11,"shr","","",63,null],[11,"shr_assign","","",63,null],[11,"shl","","",63,null],[11,"shl_assign","","",63,null],[11,"shr","","",63,null],[11,"shr_assign","","",63,null],[11,"add","","",63,null],[11,"add_assign","","",63,null],[11,"sub","","",63,null],[11,"sub_assign","","",63,null],[11,"mul","","",63,null],[11,"mul_assign","","",63,null],[11,"div","","",63,null],[11,"div_assign","","",63,null],[11,"rem","","",63,null],[11,"rem_assign","","",63,null],[11,"not","","",63,null],[11,"bitxor","","",63,null],[11,"bitxor_assign","","",63,null],[11,"bitor","","",63,null],[11,"bitor_assign","","",63,null],[11,"bitand","","",63,null],[11,"bitand_assign","","",63,null],[11,"neg","","",63,null],[11,"add","","",63,null],[11,"add_assign","","",63,null],[11,"sub","","",63,null],[11,"sub_assign","","",63,null],[11,"mul","","",63,null],[11,"mul_assign","","",63,null],[11,"div","","",63,null],[11,"div_assign","","",63,null],[11,"rem","","",63,null],[11,"rem_assign","","",63,null],[11,"not","","",63,null],[11,"bitxor","","",63,null],[11,"bitxor_assign","","",63,null],[11,"bitor","","",63,null],[11,"bitor_assign","","",63,null],[11,"bitand","","",63,null],[11,"bitand_assign","","",63,null],[11,"neg","","",63,null],[11,"add","","",63,null],[11,"add_assign","","",63,null],[11,"sub","","",63,null],[11,"sub_assign","","",63,null],[11,"mul","","",63,null],[11,"mul_assign","","",63,null],[11,"div","","",63,null],[11,"div_assign","","",63,null],[11,"rem","","",63,null],[11,"rem_assign","","",63,null],[11,"not","","",63,null],[11,"bitxor","","",63,null],[11,"bitxor_assign","","",63,null],[11,"bitor","","",63,null],[11,"bitor_assign","","",63,null],[11,"bitand","","",63,null],[11,"bitand_assign","","",63,null],[11,"neg","","",63,null],[11,"add","","",63,null],[11,"add_assign","","",63,null],[11,"sub","","",63,null],[11,"sub_assign","","",63,null],[11,"mul","","",63,null],[11,"mul_assign","","",63,null],[11,"div","","",63,null],[11,"div_assign","","",63,null],[11,"rem","","",63,null],[11,"rem_assign","","",63,null],[11,"not","","",63,null],[11,"bitxor","","",63,null],[11,"bitxor_assign","","",63,null],[11,"bitor","","",63,null],[11,"bitor_assign","","",63,null],[11,"bitand","","",63,null],[11,"bitand_assign","","",63,null],[11,"neg","","",63,null],[11,"add","","",63,null],[11,"add_assign","","",63,null],[11,"sub","","",63,null],[11,"sub_assign","","",63,null],[11,"mul","","",63,null],[11,"mul_assign","","",63,null],[11,"div","","",63,null],[11,"div_assign","","",63,null],[11,"rem","","",63,null],[11,"rem_assign","","",63,null],[11,"not","","",63,null],[11,"bitxor","","",63,null],[11,"bitxor_assign","","",63,null],[11,"bitor","","",63,null],[11,"bitor_assign","","",63,null],[11,"bitand","","",63,null],[11,"bitand_assign","","",63,null],[11,"neg","","",63,null],[11,"add","","",63,null],[11,"add_assign","","",63,null],[11,"sub","","",63,null],[11,"sub_assign","","",63,null],[11,"mul","","",63,null],[11,"mul_assign","","",63,null],[11,"div","","",63,null],[11,"div_assign","","",63,null],[11,"rem","","",63,null],[11,"rem_assign","","",63,null],[11,"not","","",63,null],[11,"bitxor","","",63,null],[11,"bitxor_assign","","",63,null],[11,"bitor","","",63,null],[11,"bitor_assign","","",63,null],[11,"bitand","","",63,null],[11,"bitand_assign","","",63,null],[11,"neg","","",63,null],[11,"add","","",63,null],[11,"add_assign","","",63,null],[11,"sub","","",63,null],[11,"sub_assign","","",63,null],[11,"mul","","",63,null],[11,"mul_assign","","",63,null],[11,"div","","",63,null],[11,"div_assign","","",63,null],[11,"rem","","",63,null],[11,"rem_assign","","",63,null],[11,"not","","",63,null],[11,"bitxor","","",63,null],[11,"bitxor_assign","","",63,null],[11,"bitor","","",63,null],[11,"bitor_assign","","",63,null],[11,"bitand","","",63,null],[11,"bitand_assign","","",63,null],[11,"neg","","",63,null],[11,"add","","",63,null],[11,"add_assign","","",63,null],[11,"sub","","",63,null],[11,"sub_assign","","",63,null],[11,"mul","","",63,null],[11,"mul_assign","","",63,null],[11,"div","","",63,null],[11,"div_assign","","",63,null],[11,"rem","","",63,null],[11,"rem_assign","","",63,null],[11,"not","","",63,null],[11,"bitxor","","",63,null],[11,"bitxor_assign","","",63,null],[11,"bitor","","",63,null],[11,"bitor_assign","","",63,null],[11,"bitand","","",63,null],[11,"bitand_assign","","",63,null],[11,"neg","","",63,null],[11,"add","","",63,null],[11,"add_assign","","",63,null],[11,"sub","","",63,null],[11,"sub_assign","","",63,null],[11,"mul","","",63,null],[11,"mul_assign","","",63,null],[11,"div","","",63,null],[11,"div_assign","","",63,null],[11,"rem","","",63,null],[11,"rem_assign","","",63,null],[11,"not","","",63,null],[11,"bitxor","","",63,null],[11,"bitxor_assign","","",63,null],[11,"bitor","","",63,null],[11,"bitor_assign","","",63,null],[11,"bitand","","",63,null],[11,"bitand_assign","","",63,null],[11,"neg","","",63,null],[11,"add","","",63,null],[11,"add_assign","","",63,null],[11,"sub","","",63,null],[11,"sub_assign","","",63,null],[11,"mul","","",63,null],[11,"mul_assign","","",63,null],[11,"div","","",63,null],[11,"div_assign","","",63,null],[11,"rem","","",63,null],[11,"rem_assign","","",63,null],[11,"not","","",63,null],[11,"bitxor","","",63,null],[11,"bitxor_assign","","",63,null],[11,"bitor","","",63,null],[11,"bitor_assign","","",63,null],[11,"bitand","","",63,null],[11,"bitand_assign","","",63,null],[11,"neg","","",63,null],[11,"eq","core::num::dec2flt","",64,null],[11,"ne","","",64,null],[11,"clone","","",64,null],[11,"fmt","","",64,null],[11,"fmt","","",64,null],[11,"fmt","core::num","",65,null],[11,"eq","","",65,null],[11,"clone","","",65,null],[11,"clone","","",66,null],[11,"fmt","","",66,null],[11,"fmt","","",66,null],[11,"eq","","",67,null],[11,"ne","","",67,null],[11,"clone","","",67,null],[11,"fmt","","",67,null],[11,"fmt","","",67,null],[11,"hash","core::nonzero","",68,null],[11,"fmt","","",68,null],[11,"partial_cmp","","",68,null],[11,"lt","","",68,null],[11,"le","","",68,null],[11,"gt","","",68,null],[11,"ge","","",68,null],[11,"cmp","","",68,null],[11,"eq","","",68,null],[11,"ne","","",68,null],[11,"clone","","",68,null],[11,"new","","Creates an instance of NonZero with the provided value.\nYou must indeed ensure that the value is actually &quot;non-zero&quot;.",68,{"inputs":[{"name":"t"}],"output":{"name":"nonzero"}}],[11,"deref","","",68,null],[11,"new","core::ptr","Creates a new `Unique`.",69,null],[11,"get","","Dereferences the content.",69,null],[11,"get_mut","","Mutably dereferences the content.",69,null],[11,"deref","","",69,null],[11,"fmt","","",69,null],[11,"new","","Creates a new `Shared`.",70,null],[11,"clone","","",70,null],[11,"deref","","",70,null],[11,"fmt","","",70,null],[11,"hash","core::marker","",71,null],[11,"eq","","",71,null],[11,"partial_cmp","","",71,null],[11,"cmp","","",71,null],[11,"clone","","",71,null],[11,"default","","",71,{"inputs":[],"output":{"name":"phantomdata"}}],[11,"hash","core::ops","",72,null],[11,"eq","","",72,null],[11,"clone","","",72,null],[11,"fmt","","",72,null],[11,"hash","","",73,null],[11,"eq","","",73,null],[11,"ne","","",73,null],[11,"clone","","",73,null],[11,"fmt","","",73,null],[11,"contains","","# Examples",73,null],[11,"hash","","",74,null],[11,"eq","","",74,null],[11,"ne","","",74,null],[11,"clone","","",74,null],[11,"fmt","","",74,null],[11,"contains","","# Examples",74,null],[11,"hash","","",75,null],[11,"eq","","",75,null],[11,"ne","","",75,null],[11,"clone","","",75,null],[11,"fmt","","",75,null],[11,"contains","","# Examples",75,null],[11,"hash","","",76,null],[11,"eq","","",76,null],[11,"ne","","",76,null],[11,"clone","","",76,null],[11,"fmt","","",76,null],[11,"contains","","# Examples",76,null],[11,"hash","","",77,null],[11,"eq","","",77,null],[11,"ne","","",77,null],[11,"clone","","",77,null],[11,"fmt","","",77,null],[11,"contains","","# Examples",77,null],[11,"hash","core::cmp","",78,null],[11,"fmt","","",78,null],[11,"eq","","",78,null],[11,"clone","","",78,null],[11,"reverse","","Reverse the `Ordering`.",78,null],[11,"cmp","","",78,null],[11,"partial_cmp","","",78,null],[11,"fmt","libc","",79,null],[11,"fmt","","",79,null],[11,"is","","Returns true if the boxed type is the same as `T`",79,null],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or\n`None` if it isn&#39;t.",79,null],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or\n`None` if it isn&#39;t.",79,null],[11,"is","","Forwards to the method defined on the type `Any`.",79,null],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",79,null],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",79,null],[11,"hash","core::any","",80,null],[11,"fmt","","",80,null],[11,"eq","","",80,null],[11,"ne","","",80,null],[11,"clone","","",80,null],[11,"of","","Returns the `TypeId` of the type this generic function has been\ninstantiated with",80,{"inputs":[],"output":{"name":"typeid"}}],[11,"default","core::sync::atomic","",81,{"inputs":[],"output":{"name":"atomicbool"}}],[11,"default","","",82,{"inputs":[],"output":{"name":"atomicptr"}}],[11,"fmt","","",83,null],[11,"clone","","",83,null],[11,"new","","Creates a new `AtomicBool`.",81,{"inputs":[{"name":"bool"}],"output":{"name":"atomicbool"}}],[11,"load","","Loads a value from the bool.",81,null],[11,"store","","Stores a value into the bool.",81,null],[11,"swap","","Stores a value into the bool, returning the old value.",81,null],[11,"compare_and_swap","","Stores a value into the `bool` if the current value is the same as the `current` value.",81,null],[11,"compare_exchange","","Stores a value into the `bool` if the current value is the same as the `current` value.",81,null],[11,"compare_exchange_weak","","Stores a value into the `bool` if the current value is the same as the `current` value.",81,null],[11,"fetch_and","","Logical &quot;and&quot; with a boolean value.",81,null],[11,"fetch_nand","","Logical &quot;nand&quot; with a boolean value.",81,null],[11,"fetch_or","","Logical &quot;or&quot; with a boolean value.",81,null],[11,"fetch_xor","","Logical &quot;xor&quot; with a boolean value.",81,null],[11,"new","","Creates a new `AtomicPtr`.",82,null],[11,"load","","Loads a value from the pointer.",82,null],[11,"store","","Stores a value into the pointer.",82,null],[11,"swap","","Stores a value into the pointer, returning the old value.",82,null],[11,"compare_and_swap","","Stores a value into the pointer if the current value is the same as the `current` value.",82,null],[11,"compare_exchange","","Stores a value into the pointer if the current value is the same as the `current` value.",82,null],[11,"compare_exchange_weak","","Stores a value into the pointer if the current value is the same as the `current` value.",82,null],[11,"default","","",84,{"inputs":[],"output":{"name":"atomici8"}}],[11,"fmt","","",84,null],[11,"new","","Creates a new atomic integer.",84,{"inputs":[{"name":"i8"}],"output":{"name":"atomici8"}}],[11,"load","","Loads a value from the atomic integer.",84,null],[11,"store","","Stores a value into the atomic integer.",84,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",84,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",84,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",84,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",84,null],[11,"fetch_add","","Add to the current value, returning the previous value.",84,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",84,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",84,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",84,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",84,null],[11,"default","","",85,{"inputs":[],"output":{"name":"atomicu8"}}],[11,"fmt","","",85,null],[11,"new","","Creates a new atomic integer.",85,{"inputs":[{"name":"u8"}],"output":{"name":"atomicu8"}}],[11,"load","","Loads a value from the atomic integer.",85,null],[11,"store","","Stores a value into the atomic integer.",85,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",85,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",85,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",85,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",85,null],[11,"fetch_add","","Add to the current value, returning the previous value.",85,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",85,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",85,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",85,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",85,null],[11,"default","","",86,{"inputs":[],"output":{"name":"atomici16"}}],[11,"fmt","","",86,null],[11,"new","","Creates a new atomic integer.",86,{"inputs":[{"name":"i16"}],"output":{"name":"atomici16"}}],[11,"load","","Loads a value from the atomic integer.",86,null],[11,"store","","Stores a value into the atomic integer.",86,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",86,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",86,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",86,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",86,null],[11,"fetch_add","","Add to the current value, returning the previous value.",86,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",86,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",86,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",86,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",86,null],[11,"default","","",87,{"inputs":[],"output":{"name":"atomicu16"}}],[11,"fmt","","",87,null],[11,"new","","Creates a new atomic integer.",87,{"inputs":[{"name":"u16"}],"output":{"name":"atomicu16"}}],[11,"load","","Loads a value from the atomic integer.",87,null],[11,"store","","Stores a value into the atomic integer.",87,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",87,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",87,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",87,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",87,null],[11,"fetch_add","","Add to the current value, returning the previous value.",87,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",87,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",87,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",87,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",87,null],[11,"default","","",88,{"inputs":[],"output":{"name":"atomici32"}}],[11,"fmt","","",88,null],[11,"new","","Creates a new atomic integer.",88,{"inputs":[{"name":"i32"}],"output":{"name":"atomici32"}}],[11,"load","","Loads a value from the atomic integer.",88,null],[11,"store","","Stores a value into the atomic integer.",88,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",88,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",88,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",88,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",88,null],[11,"fetch_add","","Add to the current value, returning the previous value.",88,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",88,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",88,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",88,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",88,null],[11,"default","","",89,{"inputs":[],"output":{"name":"atomicu32"}}],[11,"fmt","","",89,null],[11,"new","","Creates a new atomic integer.",89,{"inputs":[{"name":"u32"}],"output":{"name":"atomicu32"}}],[11,"load","","Loads a value from the atomic integer.",89,null],[11,"store","","Stores a value into the atomic integer.",89,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",89,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",89,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",89,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",89,null],[11,"fetch_add","","Add to the current value, returning the previous value.",89,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",89,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",89,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",89,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",89,null],[11,"default","","",90,{"inputs":[],"output":{"name":"atomici64"}}],[11,"fmt","","",90,null],[11,"new","","Creates a new atomic integer.",90,{"inputs":[{"name":"i64"}],"output":{"name":"atomici64"}}],[11,"load","","Loads a value from the atomic integer.",90,null],[11,"store","","Stores a value into the atomic integer.",90,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",90,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",90,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",90,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",90,null],[11,"fetch_add","","Add to the current value, returning the previous value.",90,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",90,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",90,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",90,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",90,null],[11,"default","","",91,{"inputs":[],"output":{"name":"atomicu64"}}],[11,"fmt","","",91,null],[11,"new","","Creates a new atomic integer.",91,{"inputs":[{"name":"u64"}],"output":{"name":"atomicu64"}}],[11,"load","","Loads a value from the atomic integer.",91,null],[11,"store","","Stores a value into the atomic integer.",91,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",91,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",91,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",91,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",91,null],[11,"fetch_add","","Add to the current value, returning the previous value.",91,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",91,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",91,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",91,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",91,null],[11,"default","","",92,{"inputs":[],"output":{"name":"atomicisize"}}],[11,"fmt","","",92,null],[11,"new","","Creates a new atomic integer.",92,{"inputs":[{"name":"isize"}],"output":{"name":"atomicisize"}}],[11,"load","","Loads a value from the atomic integer.",92,null],[11,"store","","Stores a value into the atomic integer.",92,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",92,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",92,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",92,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",92,null],[11,"fetch_add","","Add to the current value, returning the previous value.",92,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",92,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",92,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",92,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",92,null],[11,"default","","",93,{"inputs":[],"output":{"name":"atomicusize"}}],[11,"fmt","","",93,null],[11,"new","","Creates a new atomic integer.",93,{"inputs":[{"name":"usize"}],"output":{"name":"atomicusize"}}],[11,"load","","Loads a value from the atomic integer.",93,null],[11,"store","","Stores a value into the atomic integer.",93,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",93,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",93,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",93,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",93,null],[11,"fetch_add","","Add to the current value, returning the previous value.",93,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",93,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",93,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",93,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",93,null],[11,"fmt","","",81,null],[11,"fmt","","",82,null],[11,"new","core::cell","Creates a new `Cell` containing the given value.",94,{"inputs":[{"name":"t"}],"output":{"name":"cell"}}],[11,"get","","Returns a copy of the contained value.",94,null],[11,"set","","Sets the contained value.",94,null],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",94,null],[11,"get_mut","","Returns a mutable reference to the underlying data.",94,null],[11,"clone","","",94,null],[11,"default","","",94,{"inputs":[],"output":{"name":"cell"}}],[11,"eq","","",94,null],[11,"partial_cmp","","",94,null],[11,"lt","","",94,null],[11,"le","","",94,null],[11,"gt","","",94,null],[11,"ge","","",94,null],[11,"cmp","","",94,null],[11,"fmt","","",95,null],[11,"eq","","",95,null],[11,"clone","","",95,null],[11,"new","","Creates a new `RefCell` containing `value`.",96,{"inputs":[{"name":"t"}],"output":{"name":"refcell"}}],[11,"into_inner","","Consumes the `RefCell`, returning the wrapped value.",96,null],[11,"borrow_state","","Query the current state of this `RefCell`",96,null],[11,"borrow","","Immutably borrows the wrapped value.",96,null],[11,"borrow_mut","","Mutably borrows the wrapped value.",96,null],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",96,null],[11,"get_mut","","Returns a mutable reference to the underlying data.",96,null],[11,"clone","","",96,null],[11,"default","","",96,{"inputs":[],"output":{"name":"refcell"}}],[11,"eq","","",96,null],[11,"partial_cmp","","",96,null],[11,"lt","","",96,null],[11,"le","","",96,null],[11,"gt","","",96,null],[11,"ge","","",96,null],[11,"cmp","","",96,null],[11,"deref","","",97,null],[11,"clone","","Copies a `Ref`.",97,{"inputs":[{"name":"ref"}],"output":{"name":"ref"}}],[11,"map","","Make a new `Ref` for a component of the borrowed data.",97,{"inputs":[{"name":"ref"},{"name":"f"}],"output":{"name":"ref"}}],[11,"map","","Make a new `RefMut` for a component of the borrowed data, e.g. an enum\nvariant.",98,{"inputs":[{"name":"refmut"},{"name":"f"}],"output":{"name":"refmut"}}],[11,"deref","","",98,null],[11,"deref_mut","","",98,null],[11,"new","","Constructs a new instance of `UnsafeCell` which will wrap the specified\nvalue.",99,{"inputs":[{"name":"t"}],"output":{"name":"unsafecell"}}],[11,"into_inner","","Unwraps the value.",99,null],[11,"get","","Gets a mutable pointer to the wrapped value.",99,null],[11,"default","","",99,{"inputs":[],"output":{"name":"unsafecell"}}],[11,"fmt","core::char","",100,null],[11,"clone","","",100,null],[11,"next","","",100,null],[11,"size_hint","","",100,null],[11,"count","","",100,null],[11,"last","","",100,null],[11,"len","","",100,null],[11,"fmt","","",101,null],[11,"clone","","",101,null],[11,"next","","",101,null],[11,"size_hint","","",101,null],[11,"count","","",101,null],[11,"nth","","",101,null],[11,"last","","",101,null],[11,"len","","",101,null],[11,"fmt","","",102,null],[11,"as_slice","","Returns the remaining bytes of this iterator as a slice.",102,null],[11,"next","","",102,null],[11,"size_hint","","",102,null],[11,"fmt","","",103,null],[11,"as_slice","","Returns the remaining bytes of this iterator as a slice.",103,null],[11,"next","","",103,null],[11,"size_hint","","",103,null],[11,"fmt","core::iter::range","",104,null],[11,"clone","","",104,null],[11,"step_by","core::ops","Creates an iterator starting at the same point, but stepping by\nthe given amount at each iteration.",74,null],[11,"step_by","","Creates an iterator with the same range, but stepping by the\ngiven amount at each iteration.",73,null],[11,"step_by","","Creates an iterator with the same range, but stepping by the\ngiven amount at each iteration.",76,null],[11,"next","core::iter::range","",104,null],[11,"size_hint","","",104,null],[11,"next","","",104,null],[11,"size_hint","","",104,null],[11,"next","","",104,null],[11,"size_hint","","",104,null],[11,"next","core::ops","",73,null],[11,"size_hint","","",73,null],[11,"next_back","","",73,null],[11,"next","","",74,null],[11,"next","","",76,null],[11,"size_hint","","",76,null],[11,"next_back","","",76,null],[11,"fmt","core::iter::sources","",105,null],[11,"clone","","",105,null],[11,"next","","",105,null],[11,"size_hint","","",105,null],[11,"next_back","","",105,null],[11,"fmt","","",106,null],[11,"next","","",106,null],[11,"size_hint","","",106,null],[11,"next_back","","",106,null],[11,"len","","",106,null],[11,"clone","","",106,null],[11,"default","","",106,{"inputs":[],"output":{"name":"empty"}}],[11,"fmt","","",107,null],[11,"clone","","",107,null],[11,"next","","",107,null],[11,"size_hint","","",107,null],[11,"next_back","","",107,null],[11,"len","","",107,null],[11,"fmt","core::iter","",108,null],[11,"clone","","",108,null],[11,"next","","",108,null],[11,"size_hint","","",108,null],[11,"next_back","","",108,null],[11,"fmt","","",109,null],[11,"clone","","",109,null],[11,"next","","",109,null],[11,"size_hint","","",109,null],[11,"next_back","","",109,null],[11,"fmt","","",110,null],[11,"clone","","",110,null],[11,"next","","",110,null],[11,"size_hint","","",110,null],[11,"fmt","","",111,null],[11,"clone","","",111,null],[11,"next","","",111,null],[11,"count","","",111,null],[11,"nth","","",111,null],[11,"find","","",111,null],[11,"last","","",111,null],[11,"size_hint","","",111,null],[11,"next_back","","",111,null],[11,"fmt","","",112,null],[11,"clone","","",112,null],[11,"next","","",112,null],[11,"size_hint","","",112,null],[11,"next_back","","",112,null],[11,"clone","","",113,null],[11,"fmt","","",113,null],[11,"next","","",113,null],[11,"size_hint","","",113,null],[11,"next_back","","",113,null],[11,"clone","","",114,null],[11,"fmt","","",114,null],[11,"next","","",114,null],[11,"size_hint","","",114,null],[11,"next_back","","",114,null],[11,"clone","","",115,null],[11,"fmt","","",115,null],[11,"next","","",115,null],[11,"size_hint","","",115,null],[11,"next_back","","",115,null],[11,"fmt","","",116,null],[11,"clone","","",116,null],[11,"next","","# Overflow Behavior",116,null],[11,"size_hint","","",116,null],[11,"nth","","",116,null],[11,"count","","",116,null],[11,"next_back","","",116,null],[11,"fmt","","",117,null],[11,"clone","","",117,null],[11,"next","","",117,null],[11,"count","","",117,null],[11,"nth","","",117,null],[11,"last","","",117,null],[11,"size_hint","","",117,null],[11,"peek","","Returns a reference to the next() value without advancing the iterator.",117,null],[11,"is_empty","","Checks if the iterator has finished iterating.",117,null],[11,"clone","","",118,null],[11,"fmt","","",118,null],[11,"next","","",118,null],[11,"size_hint","","",118,null],[11,"clone","","",119,null],[11,"fmt","","",119,null],[11,"next","","",119,null],[11,"size_hint","","",119,null],[11,"fmt","","",120,null],[11,"clone","","",120,null],[11,"next","","",120,null],[11,"nth","","",120,null],[11,"count","","",120,null],[11,"last","","",120,null],[11,"size_hint","","",120,null],[11,"next_back","","",120,null],[11,"fmt","","",121,null],[11,"clone","","",121,null],[11,"next","","",121,null],[11,"nth","","",121,null],[11,"size_hint","","",121,null],[11,"clone","","",122,null],[11,"fmt","","",122,null],[11,"next","","",122,null],[11,"size_hint","","",122,null],[11,"clone","","",123,null],[11,"fmt","","",123,null],[11,"next","","",123,null],[11,"size_hint","","",123,null],[11,"next_back","","",123,null],[11,"fmt","","",124,null],[11,"clone","","",124,null],[11,"next","","",124,null],[11,"nth","","",124,null],[11,"last","","",124,null],[11,"count","","",124,null],[11,"size_hint","","",124,null],[11,"next_back","","",124,null],[11,"clone","","",125,null],[11,"fmt","","",125,null],[11,"next","","",125,null],[11,"size_hint","","",125,null],[11,"next_back","","",125,null],[11,"hash","core::option","",62,null],[11,"fmt","","",62,null],[11,"cmp","","",62,null],[11,"partial_cmp","","",62,null],[11,"lt","","",62,null],[11,"le","","",62,null],[11,"gt","","",62,null],[11,"ge","","",62,null],[11,"eq","","",62,null],[11,"ne","","",62,null],[11,"clone","","",62,null],[11,"default","","",62,{"inputs":[],"output":{"name":"option"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",62,null],[11,"fmt","","",126,null],[11,"next","","",126,null],[11,"size_hint","","",126,null],[11,"next_back","","",126,null],[11,"clone","","",126,null],[11,"fmt","","",127,null],[11,"next","","",127,null],[11,"size_hint","","",127,null],[11,"next_back","","",127,null],[11,"fmt","","",128,null],[11,"clone","","",128,null],[11,"next","","",128,null],[11,"size_hint","","",128,null],[11,"next_back","","",128,null],[11,"from_iter","","Takes each element in the `Iterator`: if it is `None`, no further\nelements are taken, and the `None` is returned. Should no `None` occur, a\ncontainer with the values of each `Option` is returned.",62,{"inputs":[{"name":"i"}],"output":{"name":"option"}}],[11,"clone","core::raw","",129,null],[11,"hash","core::result","",130,null],[11,"fmt","","",130,null],[11,"cmp","","",130,null],[11,"partial_cmp","","",130,null],[11,"lt","","",130,null],[11,"le","","",130,null],[11,"gt","","",130,null],[11,"ge","","",130,null],[11,"eq","","",130,null],[11,"ne","","",130,null],[11,"clone","","",130,null],[11,"is_ok","","Returns true if the result is `Ok`",130,null],[11,"is_err","","Returns true if the result is `Err`",130,null],[11,"ok","","Converts from `Result&lt;T, E&gt;` to `Option&lt;T&gt;`",130,null],[11,"err","","Converts from `Result&lt;T, E&gt;` to `Option&lt;E&gt;`",130,null],[11,"as_ref","","Converts from `Result&lt;T, E&gt;` to `Result&lt;&amp;T, &amp;E&gt;`",130,null],[11,"as_mut","","Converts from `Result&lt;T, E&gt;` to `Result&lt;&amp;mut T, &amp;mut E&gt;`",130,null],[11,"map","","Maps a `Result&lt;T, E&gt;` to `Result&lt;U, E&gt;` by applying a function to a\ncontained `Ok` value, leaving an `Err` value untouched.",130,null],[11,"map_err","","Maps a `Result&lt;T, E&gt;` to `Result&lt;T, F&gt;` by applying a function to a\ncontained `Err` value, leaving an `Ok` value untouched.",130,null],[11,"iter","","Returns an iterator over the possibly contained value.",130,null],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",130,null],[11,"and","","Returns `res` if the result is `Ok`, otherwise returns the `Err` value of `self`.",130,null],[11,"and_then","","Calls `op` if the result is `Ok`, otherwise returns the `Err` value of `self`.",130,null],[11,"or","","Returns `res` if the result is `Err`, otherwise returns the `Ok` value of `self`.",130,null],[11,"or_else","","Calls `op` if the result is `Err`, otherwise returns the `Ok` value of `self`.",130,null],[11,"unwrap_or","","Unwraps a result, yielding the content of an `Ok`.\nElse it returns `optb`.",130,null],[11,"unwrap_or_else","","Unwraps a result, yielding the content of an `Ok`.\nIf the value is an `Err` then it calls `op` with its value.",130,null],[11,"unwrap","","Unwraps a result, yielding the content of an `Ok`.",130,null],[11,"expect","","Unwraps a result, yielding the content of an `Ok`.",130,null],[11,"unwrap_err","","Unwraps a result, yielding the content of an `Err`.",130,null],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",130,null],[11,"fmt","","",131,null],[11,"next","","",131,null],[11,"size_hint","","",131,null],[11,"next_back","","",131,null],[11,"clone","","",131,null],[11,"fmt","","",132,null],[11,"next","","",132,null],[11,"size_hint","","",132,null],[11,"next_back","","",132,null],[11,"fmt","","",133,null],[11,"next","","",133,null],[11,"size_hint","","",133,null],[11,"next_back","","",133,null],[11,"from_iter","","Takes each element in the `Iterator`: if it is an `Err`, no further\nelements are taken, and the `Err` is returned. Should no `Err` occur, a\ncontainer with the values of each `Result` is returned.",130,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"fmt","core::slice","",134,null],[11,"as_slice","","View the underlying data as a subslice of the original data.",134,null],[11,"next","","",134,null],[11,"size_hint","","",134,null],[11,"count","","",134,null],[11,"nth","","",134,null],[11,"last","","",134,null],[11,"next_back","","",134,null],[11,"clone","","",134,null],[11,"fmt","","",135,null],[11,"into_slice","","View the underlying data as a subslice of the original data.",135,null],[11,"next","","",135,null],[11,"size_hint","","",135,null],[11,"count","","",135,null],[11,"nth","","",135,null],[11,"last","","",135,null],[11,"next_back","","",135,null],[11,"fmt","","",136,null],[11,"clone","","",136,null],[11,"next","","",136,null],[11,"size_hint","","",136,null],[11,"next_back","","",136,null],[11,"fmt","","",137,null],[11,"next","","",137,null],[11,"size_hint","","",137,null],[11,"next_back","","",137,null],[11,"fmt","","",138,null],[11,"fmt","","",139,null],[11,"fmt","","",140,null],[11,"fmt","","",141,null],[11,"next","","",138,null],[11,"size_hint","","",138,null],[11,"next","","",139,null],[11,"size_hint","","",139,null],[11,"next","","",140,null],[11,"size_hint","","",140,null],[11,"next","","",141,null],[11,"size_hint","","",141,null],[11,"fmt","","",142,null],[11,"clone","","",142,null],[11,"next","","",142,null],[11,"size_hint","","",142,null],[11,"count","","",142,null],[11,"nth","","",142,null],[11,"last","","",142,null],[11,"next_back","","",142,null],[11,"fmt","","",143,null],[11,"clone","","",143,null],[11,"next","","",143,null],[11,"size_hint","","",143,null],[11,"count","","",143,null],[11,"nth","","",143,null],[11,"last","","",143,null],[11,"next_back","","",143,null],[11,"fmt","","",144,null],[11,"next","","",144,null],[11,"size_hint","","",144,null],[11,"count","","",144,null],[11,"nth","","",144,null],[11,"last","","",144,null],[11,"next_back","","",144,null],[11,"fmt","core::str::pattern","",145,null],[11,"eq","","",145,null],[11,"ne","","",145,null],[11,"clone","","",145,null],[11,"fmt","","",146,null],[11,"clone","","",146,null],[11,"haystack","","",146,null],[11,"next","","",146,null],[11,"next_match","","",146,null],[11,"next_reject","","",146,null],[11,"next_back","","",146,null],[11,"next_match_back","","",146,null],[11,"next_reject_back","","",146,null],[11,"fmt","","",147,null],[11,"clone","","",147,null],[11,"haystack","","",147,null],[11,"next","","",147,null],[11,"next_match","","",147,null],[11,"next_reject","","",147,null],[11,"next_back","","",147,null],[11,"next_match_back","","",147,null],[11,"next_reject_back","","",147,null],[11,"clone","","",148,null],[11,"fmt","","",148,null],[11,"haystack","","",148,null],[11,"next","","",148,null],[11,"next_match","","",148,null],[11,"next_reject","","",148,null],[11,"next_back","","",148,null],[11,"next_match_back","","",148,null],[11,"next_reject_back","","",148,null],[11,"fmt","","",149,null],[11,"clone","","",149,null],[11,"haystack","","",149,null],[11,"next","","",149,null],[11,"next_match","","",149,null],[11,"next_back","","",149,null],[11,"next_match_back","","",149,null],[11,"eq","core::str","",150,null],[11,"ne","","",150,null],[11,"clone","","",150,null],[11,"fmt","","",150,null],[11,"fmt","","",150,null],[11,"fmt","","",151,null],[11,"clone","","",151,null],[11,"eq","","",151,null],[11,"ne","","",151,null],[11,"valid_up_to","","Returns the index in the given string up to which valid UTF-8 was\nverified.",151,null],[11,"fmt","","",151,null],[11,"fmt","","",152,null],[11,"clone","","",152,null],[11,"next","","",152,null],[11,"size_hint","","",152,null],[11,"next_back","","",152,null],[11,"as_str","","View the underlying data as a subslice of the original data.",152,null],[11,"fmt","","",153,null],[11,"clone","","",153,null],[11,"next","","",153,null],[11,"size_hint","","",153,null],[11,"next_back","","",153,null],[11,"as_str","","View the underlying data as a subslice of the original data.",153,null],[11,"fmt","","",154,null],[11,"clone","","",154,null],[11,"next","","",154,null],[11,"size_hint","","",154,null],[11,"count","","",154,null],[11,"last","","",154,null],[11,"nth","","",154,null],[11,"next_back","","",154,null],[11,"len","","",154,null],[11,"fmt","","",155,null],[11,"next","","",155,null],[11,"clone","","",155,null],[11,"fmt","","",156,null],[11,"next","","",156,null],[11,"clone","","",156,null],[11,"next_back","","",155,null],[11,"next_back","","",156,null],[11,"fmt","","",157,null],[11,"next","","",157,null],[11,"clone","","",157,null],[11,"fmt","","",158,null],[11,"next","","",158,null],[11,"clone","","",158,null],[11,"next_back","","",157,null],[11,"next_back","","",158,null],[11,"fmt","","",159,null],[11,"next","","",159,null],[11,"clone","","",159,null],[11,"fmt","","",160,null],[11,"next","","",160,null],[11,"clone","","",160,null],[11,"fmt","","",161,null],[11,"next","","",161,null],[11,"clone","","",161,null],[11,"fmt","","",162,null],[11,"next","","",162,null],[11,"clone","","",162,null],[11,"next_back","","",161,null],[11,"next_back","","",162,null],[11,"fmt","","",163,null],[11,"next","","",163,null],[11,"clone","","",163,null],[11,"fmt","","",164,null],[11,"next","","",164,null],[11,"clone","","",164,null],[11,"next_back","","",163,null],[11,"next_back","","",164,null],[11,"fmt","","",165,null],[11,"clone","","",165,null],[11,"next","","",165,null],[11,"size_hint","","",165,null],[11,"next_back","","",165,null],[11,"fmt","","",166,null],[11,"clone","","",166,null],[11,"next","","",166,null],[11,"size_hint","","",166,null],[11,"next_back","","",166,null],[11,"default","core::hash::sip","",167,{"inputs":[],"output":{"name":"siphasher13"}}],[11,"clone","","",167,null],[11,"fmt","","",167,null],[11,"default","","",168,{"inputs":[],"output":{"name":"siphasher24"}}],[11,"clone","","",168,null],[11,"fmt","","",168,null],[11,"default","","",169,{"inputs":[],"output":{"name":"siphasher"}}],[11,"clone","","",169,null],[11,"fmt","","",169,null],[11,"new","","Creates a new `SipHasher` with the two initial keys set to 0.",169,{"inputs":[],"output":{"name":"siphasher"}}],[11,"new_with_keys","","Creates a `SipHasher` that is keyed off the provided keys.",169,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher"}}],[11,"new","","Creates a new `SipHasher13` with the two initial keys set to 0.",167,{"inputs":[],"output":{"name":"siphasher13"}}],[11,"new_with_keys","","Creates a `SipHasher13` that is keyed off the provided keys.",167,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher13"}}],[11,"new","","Creates a new `SipHasher24` with the two initial keys set to 0.",168,{"inputs":[],"output":{"name":"siphasher24"}}],[11,"new_with_keys","","Creates a `SipHasher24` that is keyed off the provided keys.",168,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher24"}}],[11,"write","","",169,null],[11,"finish","","",169,null],[11,"write","","",167,null],[11,"finish","","",167,null],[11,"write","","",168,null],[11,"finish","","",168,null],[11,"fmt","core::hash","",170,null],[11,"build_hasher","","",170,null],[11,"clone","","",170,null],[11,"default","","",170,{"inputs":[],"output":{"name":"buildhasherdefault"}}],[11,"fmt","core::fmt","",171,null],[11,"field","core::fmt::builders","Adds a new field to the generated struct output.",172,null],[11,"finish","","Finishes output and returns any error encountered.",172,null],[11,"field","","Adds a new field to the generated tuple struct output.",173,null],[11,"finish","","Finishes output and returns any error encountered.",173,null],[11,"entry","","Adds a new entry to the set output.",174,null],[11,"entries","","Adds the contents of an iterator of entries to the set output.",174,null],[11,"finish","","Finishes output and returns any error encountered.",174,null],[11,"entry","","Adds a new entry to the list output.",175,null],[11,"entries","","Adds the contents of an iterator of entries to the list output.",175,null],[11,"finish","","Finishes output and returns any error encountered.",175,null],[11,"entry","","Adds a new entry to the map output.",176,null],[11,"entries","","Adds the contents of an iterator of entries to the map output.",176,null],[11,"finish","","Finishes output and returns any error encountered.",176,null],[11,"partial_cmp","core::fmt","",177,null],[11,"eq","","",177,null],[11,"cmp","","",177,null],[11,"hash","","",177,null],[11,"default","","",177,{"inputs":[],"output":{"name":"error"}}],[11,"fmt","","",177,null],[11,"clone","","",177,null],[11,"clone","","",178,null],[11,"fmt","","",178,null],[11,"fmt","","",178,null],[11,"pad_integral","","Performs the correct padding for an integer which has already been\nemitted into a str. The str should *not* contain the sign for the\ninteger, that will be added by this method.",179,null],[11,"pad","","This function takes a string slice and emits it to the internal buffer\nafter applying the relevant formatting flags specified. The flags\nrecognized for generic strings are:",179,null],[11,"write_str","","Writes some data to the underlying buffer contained within this\nformatter.",179,null],[11,"write_fmt","","Writes some formatted information into this instance",179,null],[11,"flags","","Flags for formatting (packed version of rt::Flag)",179,null],[11,"fill","","Character used as &#39;fill&#39; whenever there is alignment",179,null],[11,"align","","Flag indicating what form of alignment was requested",179,null],[11,"width","","Optionally specified integer width that the output should be",179,null],[11,"precision","","Optionally specified precision for numeric types",179,null],[11,"sign_plus","","Determines if the `+` flag was specified.",179,null],[11,"sign_minus","","Determines if the `-` flag was specified.",179,null],[11,"alternate","","Determines if the `#` flag was specified.",179,null],[11,"sign_aware_zero_pad","","Determines if the `0` flag was specified.",179,null],[11,"debug_struct","","Creates a `DebugStruct` builder designed to assist with creation of\n`fmt::Debug` implementations for structs.",179,null],[11,"debug_tuple","","Creates a `DebugTuple` builder designed to assist with creation of\n`fmt::Debug` implementations for tuple structs.",179,null],[11,"debug_list","","Creates a `DebugList` builder designed to assist with creation of\n`fmt::Debug` implementations for list-like structures.",179,null],[11,"debug_set","","Creates a `DebugSet` builder designed to assist with creation of\n`fmt::Debug` implementations for set-like structures.",179,null],[11,"debug_map","","Creates a `DebugMap` builder designed to assist with creation of\n`fmt::Debug` implementations for map-like structures.",179,null],[11,"write_str","","",179,null],[11,"write_char","","",179,null],[11,"write_fmt","","",179,null],[11,"fmt","","",177,null],[11,"fmt","core::marker","",71,null],[11,"fmt","core::cell","",94,null],[11,"fmt","","",96,null],[11,"fmt","","",97,null],[11,"fmt","","",98,null],[11,"fmt","","",99,null],[11,"clone_from","libc::dox","Performs copy-assignment from `source`.",180,null],[11,"clone_from","libc::dox::imp","Performs copy-assignment from `source`.",180,null],[11,"clone","libc","",53,null],[11,"clone","","",54,null],[11,"clone","","",181,null],[11,"clone","","",55,null],[11,"clone","","",56,null],[11,"clone","","",57,null],[11,"clone","","",58,null],[11,"clone","","",59,null],[11,"clone","","",60,null],[11,"clone","","",61,null],[11,"clone","","",182,null],[11,"clone","","",52,null],[11,"clone","","",40,null],[11,"clone","","",41,null],[11,"clone","","",42,null],[11,"clone","","",43,null],[11,"clone","","",44,null],[11,"clone","","",45,null],[11,"clone","","",46,null],[11,"clone","","",47,null],[11,"clone","","",48,null],[11,"clone","","",49,null],[11,"clone","","",50,null],[11,"clone","","",51,null],[11,"clone","","",183,null],[11,"clone","","",29,null],[11,"clone","","",30,null],[11,"clone","","",31,null],[11,"clone","","",32,null],[11,"clone","","",33,null],[11,"clone","","",184,null],[11,"clone","","",185,null],[11,"clone","","",186,null],[11,"clone","","",187,null],[11,"clone","","",188,null],[11,"clone","","",34,null],[11,"clone","","",35,null],[11,"clone","","",36,null],[11,"clone","","",37,null],[11,"clone","","",189,null],[11,"clone","","",38,null],[11,"clone","","",190,null],[11,"clone","","",39,null],[11,"clone","","",15,null],[11,"clone","","",16,null],[11,"clone","","",17,null],[11,"clone","","",18,null],[11,"clone","","",19,null],[11,"clone","","",20,null],[11,"clone","","",21,null],[11,"clone","","",22,null],[11,"clone","","",191,null],[11,"clone","","",23,null],[11,"clone","","",24,null],[11,"clone","","",25,null],[11,"clone","","",26,null],[11,"clone","","",27,null],[11,"clone","","",28,null],[11,"clone","","",0,null],[11,"clone","","",1,null],[11,"clone","","",2,null],[11,"clone","","",3,null],[11,"clone","","",4,null],[11,"clone","","",5,null],[11,"clone","","",6,null],[11,"clone","","",7,null],[11,"clone","","",8,null],[11,"clone","","",9,null],[11,"clone","","",10,null],[11,"clone","","",11,null],[11,"clone","","",12,null],[11,"clone","","",13,null],[11,"clone","","",14,null],[6,"int8_t","","",null,null],[6,"int16_t","","",null,null],[6,"int32_t","","",null,null],[6,"int64_t","","",null,null],[6,"uint8_t","","",null,null],[6,"uint16_t","","",null,null],[6,"uint32_t","","",null,null],[6,"uint64_t","","",null,null],[6,"c_schar","","",null,null],[6,"c_uchar","","",null,null],[6,"c_short","","",null,null],[6,"c_ushort","","",null,null],[6,"c_int","","",null,null],[6,"c_uint","","",null,null],[6,"c_float","","",null,null],[6,"c_double","","",null,null],[6,"c_longlong","","",null,null],[6,"c_ulonglong","","",null,null],[6,"intmax_t","","",null,null],[6,"uintmax_t","","",null,null],[6,"size_t","","",null,null],[6,"ptrdiff_t","","",null,null],[6,"intptr_t","","",null,null],[6,"uintptr_t","","",null,null],[6,"ssize_t","","",null,null],[6,"pid_t","","",null,null],[6,"uid_t","","",null,null],[6,"gid_t","","",null,null],[6,"in_addr_t","","",null,null],[6,"in_port_t","","",null,null],[6,"sighandler_t","","",null,null],[6,"cc_t","","",null,null],[6,"sa_family_t","","",null,null],[6,"pthread_key_t","","",null,null],[6,"speed_t","","",null,null],[6,"tcflag_t","","",null,null],[6,"loff_t","","",null,null],[6,"clockid_t","","",null,null],[6,"id_t","","",null,null],[6,"useconds_t","","",null,null],[6,"dev_t","","",null,null],[6,"socklen_t","","",null,null],[6,"pthread_t","","",null,null],[6,"mode_t","","",null,null],[6,"ino64_t","","",null,null],[6,"off64_t","","",null,null],[6,"blkcnt64_t","","",null,null],[6,"rlim64_t","","",null,null],[6,"key_t","","",null,null],[6,"shmatt_t","","",null,null],[6,"mqd_t","","",null,null],[6,"nfds_t","","",null,null],[6,"nl_item","","",null,null],[6,"fsblkcnt_t","","",null,null],[6,"fsfilcnt_t","","",null,null],[6,"rlim_t","","",null,null],[6,"__priority_which_t","","",null,null],[6,"c_long","","",null,null],[6,"c_ulong","","",null,null],[6,"clock_t","","",null,null],[6,"time_t","","",null,null],[6,"suseconds_t","","",null,null],[6,"ino_t","","",null,null],[6,"off_t","","",null,null],[6,"blkcnt_t","","",null,null],[6,"__fsword_t","","",null,null],[6,"c_char","","",null,null],[6,"wchar_t","","",null,null],[6,"nlink_t","","",null,null],[6,"blksize_t","","",null,null],[6,"greg_t","","",null,null],[17,"SIG_DFL","","",null,null],[17,"SIG_IGN","","",null,null],[17,"SIG_ERR","","",null,null],[17,"DT_FIFO","","",null,null],[17,"DT_CHR","","",null,null],[17,"DT_DIR","","",null,null],[17,"DT_BLK","","",null,null],[17,"DT_REG","","",null,null],[17,"DT_LNK","","",null,null],[17,"DT_SOCK","","",null,null],[17,"FD_CLOEXEC","","",null,null],[17,"USRQUOTA","","",null,null],[17,"GRPQUOTA","","",null,null],[17,"SIGIOT","","",null,null],[17,"S_ISUID","","",null,null],[17,"S_ISGID","","",null,null],[17,"S_ISVTX","","",null,null],[17,"POLLIN","","",null,null],[17,"POLLPRI","","",null,null],[17,"POLLOUT","","",null,null],[17,"POLLERR","","",null,null],[17,"POLLHUP","","",null,null],[17,"POLLNVAL","","",null,null],[17,"IF_NAMESIZE","","",null,null],[17,"RTLD_LAZY","","",null,null],[17,"LOG_EMERG","","",null,null],[17,"LOG_ALERT","","",null,null],[17,"LOG_CRIT","","",null,null],[17,"LOG_ERR","","",null,null],[17,"LOG_WARNING","","",null,null],[17,"LOG_NOTICE","","",null,null],[17,"LOG_INFO","","",null,null],[17,"LOG_DEBUG","","",null,null],[17,"LOG_KERN","","",null,null],[17,"LOG_USER","","",null,null],[17,"LOG_MAIL","","",null,null],[17,"LOG_DAEMON","","",null,null],[17,"LOG_AUTH","","",null,null],[17,"LOG_SYSLOG","","",null,null],[17,"LOG_LPR","","",null,null],[17,"LOG_NEWS","","",null,null],[17,"LOG_UUCP","","",null,null],[17,"LOG_LOCAL0","","",null,null],[17,"LOG_LOCAL1","","",null,null],[17,"LOG_LOCAL2","","",null,null],[17,"LOG_LOCAL3","","",null,null],[17,"LOG_LOCAL4","","",null,null],[17,"LOG_LOCAL5","","",null,null],[17,"LOG_LOCAL6","","",null,null],[17,"LOG_LOCAL7","","",null,null],[17,"LOG_PID","","",null,null],[17,"LOG_CONS","","",null,null],[17,"LOG_ODELAY","","",null,null],[17,"LOG_NDELAY","","",null,null],[17,"LOG_NOWAIT","","",null,null],[17,"LOG_PRIMASK","","",null,null],[17,"LOG_FACMASK","","",null,null],[17,"PRIO_PROCESS","","",null,null],[17,"PRIO_PGRP","","",null,null],[17,"PRIO_USER","","",null,null],[17,"PRIO_MIN","","",null,null],[17,"PRIO_MAX","","",null,null],[17,"EXIT_FAILURE","","",null,null],[17,"EXIT_SUCCESS","","",null,null],[17,"RAND_MAX","","",null,null],[17,"EOF","","",null,null],[17,"SEEK_SET","","",null,null],[17,"SEEK_CUR","","",null,null],[17,"SEEK_END","","",null,null],[17,"_IOFBF","","",null,null],[17,"_IONBF","","",null,null],[17,"_IOLBF","","",null,null],[17,"F_DUPFD","","",null,null],[17,"F_GETFD","","",null,null],[17,"F_SETFD","","",null,null],[17,"F_GETFL","","",null,null],[17,"F_SETFL","","",null,null],[17,"F_SETLEASE","","",null,null],[17,"F_GETLEASE","","",null,null],[17,"F_NOTIFY","","",null,null],[17,"F_DUPFD_CLOEXEC","","",null,null],[17,"F_SETPIPE_SZ","","",null,null],[17,"F_GETPIPE_SZ","","",null,null],[17,"SIGTRAP","","",null,null],[17,"PTHREAD_CREATE_JOINABLE","","",null,null],[17,"PTHREAD_CREATE_DETACHED","","",null,null],[17,"CLOCK_REALTIME","","",null,null],[17,"CLOCK_MONOTONIC","","",null,null],[17,"CLOCK_PROCESS_CPUTIME_ID","","",null,null],[17,"CLOCK_THREAD_CPUTIME_ID","","",null,null],[17,"CLOCK_MONOTONIC_RAW","","",null,null],[17,"CLOCK_REALTIME_COARSE","","",null,null],[17,"CLOCK_MONOTONIC_COARSE","","",null,null],[17,"CLOCK_BOOTTIME","","",null,null],[17,"CLOCK_REALTIME_ALARM","","",null,null],[17,"CLOCK_BOOTTIME_ALARM","","",null,null],[17,"TIMER_ABSTIME","","",null,null],[17,"RLIMIT_CPU","","",null,null],[17,"RLIMIT_FSIZE","","",null,null],[17,"RLIMIT_DATA","","",null,null],[17,"RLIMIT_STACK","","",null,null],[17,"RLIMIT_CORE","","",null,null],[17,"RLIMIT_LOCKS","","",null,null],[17,"RLIMIT_SIGPENDING","","",null,null],[17,"RLIMIT_MSGQUEUE","","",null,null],[17,"RLIMIT_NICE","","",null,null],[17,"RLIMIT_RTPRIO","","",null,null],[17,"RUSAGE_SELF","","",null,null],[17,"O_RDONLY","","",null,null],[17,"O_WRONLY","","",null,null],[17,"O_RDWR","","",null,null],[17,"O_TRUNC","","",null,null],[17,"O_CLOEXEC","","",null,null],[17,"SOCK_CLOEXEC","","",null,null],[17,"S_IFIFO","","",null,null],[17,"S_IFCHR","","",null,null],[17,"S_IFBLK","","",null,null],[17,"S_IFDIR","","",null,null],[17,"S_IFREG","","",null,null],[17,"S_IFLNK","","",null,null],[17,"S_IFSOCK","","",null,null],[17,"S_IFMT","","",null,null],[17,"S_IRWXU","","",null,null],[17,"S_IXUSR","","",null,null],[17,"S_IWUSR","","",null,null],[17,"S_IRUSR","","",null,null],[17,"S_IRWXG","","",null,null],[17,"S_IXGRP","","",null,null],[17,"S_IWGRP","","",null,null],[17,"S_IRGRP","","",null,null],[17,"S_IRWXO","","",null,null],[17,"S_IXOTH","","",null,null],[17,"S_IWOTH","","",null,null],[17,"S_IROTH","","",null,null],[17,"F_OK","","",null,null],[17,"R_OK","","",null,null],[17,"W_OK","","",null,null],[17,"X_OK","","",null,null],[17,"STDIN_FILENO","","",null,null],[17,"STDOUT_FILENO","","",null,null],[17,"STDERR_FILENO","","",null,null],[17,"SIGHUP","","",null,null],[17,"SIGINT","","",null,null],[17,"SIGQUIT","","",null,null],[17,"SIGILL","","",null,null],[17,"SIGABRT","","",null,null],[17,"SIGFPE","","",null,null],[17,"SIGKILL","","",null,null],[17,"SIGSEGV","","",null,null],[17,"SIGPIPE","","",null,null],[17,"SIGALRM","","",null,null],[17,"SIGTERM","","",null,null],[17,"PROT_NONE","","",null,null],[17,"PROT_READ","","",null,null],[17,"PROT_WRITE","","",null,null],[17,"PROT_EXEC","","",null,null],[17,"LC_CTYPE","","",null,null],[17,"LC_NUMERIC","","",null,null],[17,"LC_TIME","","",null,null],[17,"LC_COLLATE","","",null,null],[17,"LC_MONETARY","","",null,null],[17,"LC_MESSAGES","","",null,null],[17,"LC_ALL","","",null,null],[17,"LC_CTYPE_MASK","","",null,null],[17,"LC_NUMERIC_MASK","","",null,null],[17,"LC_TIME_MASK","","",null,null],[17,"LC_COLLATE_MASK","","",null,null],[17,"LC_MONETARY_MASK","","",null,null],[17,"LC_MESSAGES_MASK","","",null,null],[17,"MAP_FILE","","",null,null],[17,"MAP_SHARED","","",null,null],[17,"MAP_PRIVATE","","",null,null],[17,"MAP_FIXED","","",null,null],[17,"MAP_FAILED","","",null,null],[17,"MS_ASYNC","","",null,null],[17,"MS_INVALIDATE","","",null,null],[17,"MS_SYNC","","",null,null],[17,"MS_RDONLY","","",null,null],[17,"MS_NOSUID","","",null,null],[17,"MS_NODEV","","",null,null],[17,"MS_NOEXEC","","",null,null],[17,"MS_SYNCHRONOUS","","",null,null],[17,"MS_REMOUNT","","",null,null],[17,"MS_MANDLOCK","","",null,null],[17,"MS_DIRSYNC","","",null,null],[17,"MS_NOATIME","","",null,null],[17,"MS_NODIRATIME","","",null,null],[17,"MS_BIND","","",null,null],[17,"MS_MOVE","","",null,null],[17,"MS_REC","","",null,null],[17,"MS_SILENT","","",null,null],[17,"MS_POSIXACL","","",null,null],[17,"MS_UNBINDABLE","","",null,null],[17,"MS_PRIVATE","","",null,null],[17,"MS_SLAVE","","",null,null],[17,"MS_SHARED","","",null,null],[17,"MS_RELATIME","","",null,null],[17,"MS_KERNMOUNT","","",null,null],[17,"MS_I_VERSION","","",null,null],[17,"MS_STRICTATIME","","",null,null],[17,"MS_ACTIVE","","",null,null],[17,"MS_NOUSER","","",null,null],[17,"MS_MGC_VAL","","",null,null],[17,"MS_MGC_MSK","","",null,null],[17,"MS_RMT_MASK","","",null,null],[17,"EPERM","","",null,null],[17,"ENOENT","","",null,null],[17,"ESRCH","","",null,null],[17,"EINTR","","",null,null],[17,"EIO","","",null,null],[17,"ENXIO","","",null,null],[17,"E2BIG","","",null,null],[17,"ENOEXEC","","",null,null],[17,"EBADF","","",null,null],[17,"ECHILD","","",null,null],[17,"EAGAIN","","",null,null],[17,"ENOMEM","","",null,null],[17,"EACCES","","",null,null],[17,"EFAULT","","",null,null],[17,"ENOTBLK","","",null,null],[17,"EBUSY","","",null,null],[17,"EEXIST","","",null,null],[17,"EXDEV","","",null,null],[17,"ENODEV","","",null,null],[17,"ENOTDIR","","",null,null],[17,"EISDIR","","",null,null],[17,"EINVAL","","",null,null],[17,"ENFILE","","",null,null],[17,"EMFILE","","",null,null],[17,"ENOTTY","","",null,null],[17,"ETXTBSY","","",null,null],[17,"EFBIG","","",null,null],[17,"ENOSPC","","",null,null],[17,"ESPIPE","","",null,null],[17,"EROFS","","",null,null],[17,"EMLINK","","",null,null],[17,"EPIPE","","",null,null],[17,"EDOM","","",null,null],[17,"ERANGE","","",null,null],[17,"EWOULDBLOCK","","",null,null],[17,"EBFONT","","",null,null],[17,"ENOSTR","","",null,null],[17,"ENODATA","","",null,null],[17,"ETIME","","",null,null],[17,"ENOSR","","",null,null],[17,"ENONET","","",null,null],[17,"ENOPKG","","",null,null],[17,"EREMOTE","","",null,null],[17,"ENOLINK","","",null,null],[17,"EADV","","",null,null],[17,"ESRMNT","","",null,null],[17,"ECOMM","","",null,null],[17,"EPROTO","","",null,null],[17,"EDOTDOT","","",null,null],[17,"AF_PACKET","","",null,null],[17,"IPPROTO_RAW","","",null,null],[17,"PROT_GROWSDOWN","","",null,null],[17,"PROT_GROWSUP","","",null,null],[17,"MAP_TYPE","","",null,null],[17,"MADV_NORMAL","","",null,null],[17,"MADV_RANDOM","","",null,null],[17,"MADV_SEQUENTIAL","","",null,null],[17,"MADV_WILLNEED","","",null,null],[17,"MADV_DONTNEED","","",null,null],[17,"MADV_REMOVE","","",null,null],[17,"MADV_DONTFORK","","",null,null],[17,"MADV_DOFORK","","",null,null],[17,"MADV_MERGEABLE","","",null,null],[17,"MADV_UNMERGEABLE","","",null,null],[17,"MADV_HWPOISON","","",null,null],[17,"IFF_UP","","",null,null],[17,"IFF_BROADCAST","","",null,null],[17,"IFF_DEBUG","","",null,null],[17,"IFF_LOOPBACK","","",null,null],[17,"IFF_POINTOPOINT","","",null,null],[17,"IFF_NOTRAILERS","","",null,null],[17,"IFF_RUNNING","","",null,null],[17,"IFF_NOARP","","",null,null],[17,"IFF_PROMISC","","",null,null],[17,"IFF_ALLMULTI","","",null,null],[17,"IFF_MASTER","","",null,null],[17,"IFF_SLAVE","","",null,null],[17,"IFF_MULTICAST","","",null,null],[17,"IFF_PORTSEL","","",null,null],[17,"IFF_AUTOMEDIA","","",null,null],[17,"IFF_DYNAMIC","","",null,null],[17,"AF_UNIX","","",null,null],[17,"AF_INET","","",null,null],[17,"AF_INET6","","",null,null],[17,"SOCK_RAW","","",null,null],[17,"IPPROTO_TCP","","",null,null],[17,"IPPROTO_IP","","",null,null],[17,"IPPROTO_IPV6","","",null,null],[17,"IP_MULTICAST_TTL","","",null,null],[17,"IP_MULTICAST_LOOP","","",null,null],[17,"IP_TTL","","",null,null],[17,"IP_HDRINCL","","",null,null],[17,"IP_ADD_MEMBERSHIP","","",null,null],[17,"IP_DROP_MEMBERSHIP","","",null,null],[17,"IP_TRANSPARENT","","",null,null],[17,"IPV6_ADD_MEMBERSHIP","","",null,null],[17,"IPV6_DROP_MEMBERSHIP","","",null,null],[17,"TCP_NODELAY","","",null,null],[17,"TCP_MAXSEG","","",null,null],[17,"TCP_CORK","","",null,null],[17,"TCP_KEEPIDLE","","",null,null],[17,"TCP_KEEPINTVL","","",null,null],[17,"TCP_KEEPCNT","","",null,null],[17,"TCP_SYNCNT","","",null,null],[17,"TCP_LINGER2","","",null,null],[17,"TCP_DEFER_ACCEPT","","",null,null],[17,"TCP_WINDOW_CLAMP","","",null,null],[17,"TCP_INFO","","",null,null],[17,"TCP_QUICKACK","","",null,null],[17,"TCP_CONGESTION","","",null,null],[17,"IPV6_MULTICAST_LOOP","","",null,null],[17,"IPV6_V6ONLY","","",null,null],[17,"SO_DEBUG","","",null,null],[17,"SHUT_RD","","",null,null],[17,"SHUT_WR","","",null,null],[17,"SHUT_RDWR","","",null,null],[17,"LOCK_SH","","",null,null],[17,"LOCK_EX","","",null,null],[17,"LOCK_NB","","",null,null],[17,"LOCK_UN","","",null,null],[17,"SA_NODEFER","","",null,null],[17,"SA_RESETHAND","","",null,null],[17,"SA_RESTART","","",null,null],[17,"SA_NOCLDSTOP","","",null,null],[17,"SS_ONSTACK","","",null,null],[17,"SS_DISABLE","","",null,null],[17,"PATH_MAX","","",null,null],[17,"FD_SETSIZE","","",null,null],[17,"EPOLLIN","","",null,null],[17,"EPOLLPRI","","",null,null],[17,"EPOLLOUT","","",null,null],[17,"EPOLLRDNORM","","",null,null],[17,"EPOLLRDBAND","","",null,null],[17,"EPOLLWRNORM","","",null,null],[17,"EPOLLWRBAND","","",null,null],[17,"EPOLLMSG","","",null,null],[17,"EPOLLERR","","",null,null],[17,"EPOLLHUP","","",null,null],[17,"EPOLLET","","",null,null],[17,"EPOLL_CTL_ADD","","",null,null],[17,"EPOLL_CTL_MOD","","",null,null],[17,"EPOLL_CTL_DEL","","",null,null],[17,"EPOLL_CLOEXEC","","",null,null],[17,"MNT_DETACH","","",null,null],[17,"MNT_EXPIRE","","",null,null],[17,"Q_GETFMT","","",null,null],[17,"Q_GETINFO","","",null,null],[17,"Q_SETINFO","","",null,null],[17,"QIF_BLIMITS","","",null,null],[17,"QIF_SPACE","","",null,null],[17,"QIF_ILIMITS","","",null,null],[17,"QIF_INODES","","",null,null],[17,"QIF_BTIME","","",null,null],[17,"QIF_ITIME","","",null,null],[17,"QIF_LIMITS","","",null,null],[17,"QIF_USAGE","","",null,null],[17,"QIF_TIMES","","",null,null],[17,"QIF_ALL","","",null,null],[17,"EFD_CLOEXEC","","",null,null],[17,"MNT_FORCE","","",null,null],[17,"Q_SYNC","","",null,null],[17,"Q_QUOTAON","","",null,null],[17,"Q_QUOTAOFF","","",null,null],[17,"Q_GETQUOTA","","",null,null],[17,"Q_SETQUOTA","","",null,null],[17,"TCIOFF","","",null,null],[17,"TCION","","",null,null],[17,"TCOOFF","","",null,null],[17,"TCOON","","",null,null],[17,"TCIFLUSH","","",null,null],[17,"TCOFLUSH","","",null,null],[17,"TCIOFLUSH","","",null,null],[17,"NL0","","",null,null],[17,"NL1","","",null,null],[17,"TAB0","","",null,null],[17,"CR0","","",null,null],[17,"FF0","","",null,null],[17,"BS0","","",null,null],[17,"VT0","","",null,null],[17,"VERASE","","",null,null],[17,"VKILL","","",null,null],[17,"VINTR","","",null,null],[17,"VQUIT","","",null,null],[17,"VLNEXT","","",null,null],[17,"IGNBRK","","",null,null],[17,"BRKINT","","",null,null],[17,"IGNPAR","","",null,null],[17,"PARMRK","","",null,null],[17,"INPCK","","",null,null],[17,"ISTRIP","","",null,null],[17,"INLCR","","",null,null],[17,"IGNCR","","",null,null],[17,"ICRNL","","",null,null],[17,"IXANY","","",null,null],[17,"IMAXBEL","","",null,null],[17,"OPOST","","",null,null],[17,"CS5","","",null,null],[17,"CRTSCTS","","",null,null],[17,"ECHO","","",null,null],[17,"CLONE_VM","","",null,null],[17,"CLONE_FS","","",null,null],[17,"CLONE_FILES","","",null,null],[17,"CLONE_SIGHAND","","",null,null],[17,"CLONE_PTRACE","","",null,null],[17,"CLONE_VFORK","","",null,null],[17,"CLONE_PARENT","","",null,null],[17,"CLONE_THREAD","","",null,null],[17,"CLONE_NEWNS","","",null,null],[17,"CLONE_SYSVSEM","","",null,null],[17,"CLONE_SETTLS","","",null,null],[17,"CLONE_PARENT_SETTID","","",null,null],[17,"CLONE_CHILD_CLEARTID","","",null,null],[17,"CLONE_DETACHED","","",null,null],[17,"CLONE_UNTRACED","","",null,null],[17,"CLONE_CHILD_SETTID","","",null,null],[17,"CLONE_NEWUTS","","",null,null],[17,"CLONE_NEWIPC","","",null,null],[17,"CLONE_NEWUSER","","",null,null],[17,"CLONE_NEWPID","","",null,null],[17,"CLONE_NEWNET","","",null,null],[17,"CLONE_IO","","",null,null],[17,"WNOHANG","","",null,null],[17,"WUNTRACED","","",null,null],[17,"WSTOPPED","","",null,null],[17,"WEXITED","","",null,null],[17,"WCONTINUED","","",null,null],[17,"WNOWAIT","","",null,null],[17,"__WNOTHREAD","","",null,null],[17,"__WALL","","",null,null],[17,"__WCLONE","","",null,null],[17,"SPLICE_F_MOVE","","",null,null],[17,"SPLICE_F_NONBLOCK","","",null,null],[17,"SPLICE_F_MORE","","",null,null],[17,"SPLICE_F_GIFT","","",null,null],[17,"RTLD_LOCAL","","",null,null],[17,"POSIX_FADV_NORMAL","","",null,null],[17,"POSIX_FADV_RANDOM","","",null,null],[17,"POSIX_FADV_SEQUENTIAL","","",null,null],[17,"POSIX_FADV_WILLNEED","","",null,null],[17,"AT_FDCWD","","",null,null],[17,"AT_SYMLINK_NOFOLLOW","","",null,null],[17,"LOG_CRON","","",null,null],[17,"LOG_AUTHPRIV","","",null,null],[17,"LOG_FTP","","",null,null],[17,"LOG_PERROR","","",null,null],[17,"PIPE_BUF","","",null,null],[17,"SI_LOAD_SHIFT","","",null,null],[17,"ABDAY_1","","",null,null],[17,"ABDAY_2","","",null,null],[17,"ABDAY_3","","",null,null],[17,"ABDAY_4","","",null,null],[17,"ABDAY_5","","",null,null],[17,"ABDAY_6","","",null,null],[17,"ABDAY_7","","",null,null],[17,"DAY_1","","",null,null],[17,"DAY_2","","",null,null],[17,"DAY_3","","",null,null],[17,"DAY_4","","",null,null],[17,"DAY_5","","",null,null],[17,"DAY_6","","",null,null],[17,"DAY_7","","",null,null],[17,"ABMON_1","","",null,null],[17,"ABMON_2","","",null,null],[17,"ABMON_3","","",null,null],[17,"ABMON_4","","",null,null],[17,"ABMON_5","","",null,null],[17,"ABMON_6","","",null,null],[17,"ABMON_7","","",null,null],[17,"ABMON_8","","",null,null],[17,"ABMON_9","","",null,null],[17,"ABMON_10","","",null,null],[17,"ABMON_11","","",null,null],[17,"ABMON_12","","",null,null],[17,"MON_1","","",null,null],[17,"MON_2","","",null,null],[17,"MON_3","","",null,null],[17,"MON_4","","",null,null],[17,"MON_5","","",null,null],[17,"MON_6","","",null,null],[17,"MON_7","","",null,null],[17,"MON_8","","",null,null],[17,"MON_9","","",null,null],[17,"MON_10","","",null,null],[17,"MON_11","","",null,null],[17,"MON_12","","",null,null],[17,"AM_STR","","",null,null],[17,"PM_STR","","",null,null],[17,"D_T_FMT","","",null,null],[17,"D_FMT","","",null,null],[17,"T_FMT","","",null,null],[17,"T_FMT_AMPM","","",null,null],[17,"ERA","","",null,null],[17,"ERA_D_FMT","","",null,null],[17,"ALT_DIGITS","","",null,null],[17,"ERA_D_T_FMT","","",null,null],[17,"ERA_T_FMT","","",null,null],[17,"CODESET","","",null,null],[17,"CRNCYSTR","","",null,null],[17,"RADIXCHAR","","",null,null],[17,"THOUSEP","","",null,null],[17,"YESEXPR","","",null,null],[17,"NOEXPR","","",null,null],[17,"YESSTR","","",null,null],[17,"NOSTR","","",null,null],[17,"FILENAME_MAX","","",null,null],[17,"L_tmpnam","","",null,null],[17,"_PC_LINK_MAX","","",null,null],[17,"_PC_MAX_CANON","","",null,null],[17,"_PC_MAX_INPUT","","",null,null],[17,"_PC_NAME_MAX","","",null,null],[17,"_PC_PATH_MAX","","",null,null],[17,"_PC_PIPE_BUF","","",null,null],[17,"_PC_CHOWN_RESTRICTED","","",null,null],[17,"_PC_NO_TRUNC","","",null,null],[17,"_PC_VDISABLE","","",null,null],[17,"_SC_ARG_MAX","","",null,null],[17,"_SC_CHILD_MAX","","",null,null],[17,"_SC_CLK_TCK","","",null,null],[17,"_SC_NGROUPS_MAX","","",null,null],[17,"_SC_OPEN_MAX","","",null,null],[17,"_SC_STREAM_MAX","","",null,null],[17,"_SC_TZNAME_MAX","","",null,null],[17,"_SC_JOB_CONTROL","","",null,null],[17,"_SC_SAVED_IDS","","",null,null],[17,"_SC_REALTIME_SIGNALS","","",null,null],[17,"_SC_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_TIMERS","","",null,null],[17,"_SC_ASYNCHRONOUS_IO","","",null,null],[17,"_SC_PRIORITIZED_IO","","",null,null],[17,"_SC_SYNCHRONIZED_IO","","",null,null],[17,"_SC_FSYNC","","",null,null],[17,"_SC_MAPPED_FILES","","",null,null],[17,"_SC_MEMLOCK","","",null,null],[17,"_SC_MEMLOCK_RANGE","","",null,null],[17,"_SC_MEMORY_PROTECTION","","",null,null],[17,"_SC_MESSAGE_PASSING","","",null,null],[17,"_SC_SEMAPHORES","","",null,null],[17,"_SC_SHARED_MEMORY_OBJECTS","","",null,null],[17,"_SC_AIO_LISTIO_MAX","","",null,null],[17,"_SC_AIO_MAX","","",null,null],[17,"_SC_AIO_PRIO_DELTA_MAX","","",null,null],[17,"_SC_DELAYTIMER_MAX","","",null,null],[17,"_SC_MQ_OPEN_MAX","","",null,null],[17,"_SC_MQ_PRIO_MAX","","",null,null],[17,"_SC_VERSION","","",null,null],[17,"_SC_PAGESIZE","","",null,null],[17,"_SC_PAGE_SIZE","","",null,null],[17,"_SC_RTSIG_MAX","","",null,null],[17,"_SC_SEM_NSEMS_MAX","","",null,null],[17,"_SC_SEM_VALUE_MAX","","",null,null],[17,"_SC_SIGQUEUE_MAX","","",null,null],[17,"_SC_TIMER_MAX","","",null,null],[17,"_SC_BC_BASE_MAX","","",null,null],[17,"_SC_BC_DIM_MAX","","",null,null],[17,"_SC_BC_SCALE_MAX","","",null,null],[17,"_SC_BC_STRING_MAX","","",null,null],[17,"_SC_COLL_WEIGHTS_MAX","","",null,null],[17,"_SC_EXPR_NEST_MAX","","",null,null],[17,"_SC_LINE_MAX","","",null,null],[17,"_SC_RE_DUP_MAX","","",null,null],[17,"_SC_2_VERSION","","",null,null],[17,"_SC_2_C_BIND","","",null,null],[17,"_SC_2_C_DEV","","",null,null],[17,"_SC_2_FORT_DEV","","",null,null],[17,"_SC_2_FORT_RUN","","",null,null],[17,"_SC_2_SW_DEV","","",null,null],[17,"_SC_2_LOCALEDEF","","",null,null],[17,"_SC_IOV_MAX","","",null,null],[17,"_SC_THREADS","","",null,null],[17,"_SC_THREAD_SAFE_FUNCTIONS","","",null,null],[17,"_SC_GETGR_R_SIZE_MAX","","",null,null],[17,"_SC_GETPW_R_SIZE_MAX","","",null,null],[17,"_SC_LOGIN_NAME_MAX","","",null,null],[17,"_SC_TTY_NAME_MAX","","",null,null],[17,"_SC_THREAD_DESTRUCTOR_ITERATIONS","","",null,null],[17,"_SC_THREAD_KEYS_MAX","","",null,null],[17,"_SC_THREAD_STACK_MIN","","",null,null],[17,"_SC_THREAD_THREADS_MAX","","",null,null],[17,"_SC_THREAD_ATTR_STACKADDR","","",null,null],[17,"_SC_THREAD_ATTR_STACKSIZE","","",null,null],[17,"_SC_THREAD_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_THREAD_PRIO_INHERIT","","",null,null],[17,"_SC_THREAD_PRIO_PROTECT","","",null,null],[17,"_SC_NPROCESSORS_ONLN","","",null,null],[17,"_SC_ATEXIT_MAX","","",null,null],[17,"_SC_XOPEN_VERSION","","",null,null],[17,"_SC_XOPEN_XCU_VERSION","","",null,null],[17,"_SC_XOPEN_UNIX","","",null,null],[17,"_SC_XOPEN_CRYPT","","",null,null],[17,"_SC_XOPEN_ENH_I18N","","",null,null],[17,"_SC_XOPEN_SHM","","",null,null],[17,"_SC_2_CHAR_TERM","","",null,null],[17,"_SC_2_UPE","","",null,null],[17,"_SC_XBS5_ILP32_OFF32","","",null,null],[17,"_SC_XBS5_ILP32_OFFBIG","","",null,null],[17,"_SC_XBS5_LPBIG_OFFBIG","","",null,null],[17,"_SC_XOPEN_LEGACY","","",null,null],[17,"_SC_XOPEN_REALTIME","","",null,null],[17,"_SC_XOPEN_REALTIME_THREADS","","",null,null],[17,"_SC_HOST_NAME_MAX","","",null,null],[17,"RLIM_SAVED_MAX","","",null,null],[17,"RLIM_SAVED_CUR","","",null,null],[17,"GLOB_ERR","","",null,null],[17,"GLOB_MARK","","",null,null],[17,"GLOB_NOSORT","","",null,null],[17,"GLOB_DOOFFS","","",null,null],[17,"GLOB_NOCHECK","","",null,null],[17,"GLOB_APPEND","","",null,null],[17,"GLOB_NOESCAPE","","",null,null],[17,"GLOB_NOSPACE","","",null,null],[17,"GLOB_ABORTED","","",null,null],[17,"GLOB_NOMATCH","","",null,null],[17,"POSIX_MADV_NORMAL","","",null,null],[17,"POSIX_MADV_RANDOM","","",null,null],[17,"POSIX_MADV_SEQUENTIAL","","",null,null],[17,"POSIX_MADV_WILLNEED","","",null,null],[17,"S_IEXEC","","",null,null],[17,"S_IWRITE","","",null,null],[17,"S_IREAD","","",null,null],[17,"F_LOCK","","",null,null],[17,"F_TEST","","",null,null],[17,"F_TLOCK","","",null,null],[17,"F_ULOCK","","",null,null],[17,"ST_RDONLY","","",null,null],[17,"ST_NOSUID","","",null,null],[17,"ST_NODEV","","",null,null],[17,"ST_NOEXEC","","",null,null],[17,"ST_SYNCHRONOUS","","",null,null],[17,"ST_MANDLOCK","","",null,null],[17,"ST_WRITE","","",null,null],[17,"ST_APPEND","","",null,null],[17,"ST_IMMUTABLE","","",null,null],[17,"ST_NOATIME","","",null,null],[17,"ST_NODIRATIME","","",null,null],[17,"RTLD_NEXT","","",null,null],[17,"RTLD_DEFAULT","","",null,null],[17,"RTLD_NODELETE","","",null,null],[17,"RTLD_NOW","","",null,null],[17,"TCP_MD5SIG","","",null,null],[17,"PTHREAD_MUTEX_INITIALIZER","","",null,null],[17,"PTHREAD_COND_INITIALIZER","","",null,null],[17,"PTHREAD_RWLOCK_INITIALIZER","","",null,null],[17,"PTHREAD_MUTEX_NORMAL","","",null,null],[17,"PTHREAD_MUTEX_RECURSIVE","","",null,null],[17,"PTHREAD_MUTEX_ERRORCHECK","","",null,null],[17,"PTHREAD_MUTEX_DEFAULT","","",null,null],[17,"__SIZEOF_PTHREAD_COND_T","","",null,null],[17,"SCHED_OTHER","","",null,null],[17,"SCHED_FIFO","","",null,null],[17,"SCHED_RR","","",null,null],[17,"SCHED_BATCH","","",null,null],[17,"SCHED_IDLE","","",null,null],[17,"IPC_CREAT","","",null,null],[17,"IPC_EXCL","","",null,null],[17,"IPC_NOWAIT","","",null,null],[17,"IPC_RMID","","",null,null],[17,"IPC_SET","","",null,null],[17,"IPC_STAT","","",null,null],[17,"IPC_INFO","","",null,null],[17,"SHM_R","","",null,null],[17,"SHM_W","","",null,null],[17,"SHM_RDONLY","","",null,null],[17,"SHM_RND","","",null,null],[17,"SHM_REMAP","","",null,null],[17,"SHM_EXEC","","",null,null],[17,"SHM_LOCK","","",null,null],[17,"SHM_UNLOCK","","",null,null],[17,"SHM_HUGETLB","","",null,null],[17,"SHM_NORESERVE","","",null,null],[17,"EPOLLRDHUP","","",null,null],[17,"EPOLLONESHOT","","",null,null],[17,"QFMT_VFS_OLD","","",null,null],[17,"QFMT_VFS_V0","","",null,null],[17,"SFD_CLOEXEC","","",null,null],[17,"EFD_SEMAPHORE","","",null,null],[17,"NCCS","","",null,null],[17,"AF_NETLINK","","",null,null],[17,"LOG_NFACILITIES","","",null,null],[17,"SEM_FAILED","","",null,null],[17,"RB_AUTOBOOT","","",null,null],[17,"RB_HALT_SYSTEM","","",null,null],[17,"RB_ENABLE_CAD","","",null,null],[17,"RB_DISABLE_CAD","","",null,null],[17,"RB_POWER_OFF","","",null,null],[17,"RB_SW_SUSPEND","","",null,null],[17,"RB_KEXEC","","",null,null],[17,"SYNC_FILE_RANGE_WAIT_BEFORE","","",null,null],[17,"SYNC_FILE_RANGE_WRITE","","",null,null],[17,"SYNC_FILE_RANGE_WAIT_AFTER","","",null,null],[17,"__UT_LINESIZE","","",null,null],[17,"__UT_NAMESIZE","","",null,null],[17,"__UT_HOSTSIZE","","",null,null],[17,"EMPTY","","",null,null],[17,"RUN_LVL","","",null,null],[17,"BOOT_TIME","","",null,null],[17,"NEW_TIME","","",null,null],[17,"OLD_TIME","","",null,null],[17,"INIT_PROCESS","","",null,null],[17,"LOGIN_PROCESS","","",null,null],[17,"USER_PROCESS","","",null,null],[17,"DEAD_PROCESS","","",null,null],[17,"ACCOUNTING","","",null,null],[17,"RLIMIT_RSS","","",null,null],[17,"RLIMIT_NOFILE","","",null,null],[17,"RLIMIT_AS","","",null,null],[17,"RLIMIT_NPROC","","",null,null],[17,"RLIMIT_MEMLOCK","","",null,null],[17,"RLIM_INFINITY","","",null,null],[17,"RLIMIT_RTTIME","","",null,null],[17,"RLIMIT_NLIMITS","","",null,null],[17,"O_APPEND","","",null,null],[17,"O_CREAT","","",null,null],[17,"O_EXCL","","",null,null],[17,"O_NOCTTY","","",null,null],[17,"O_NONBLOCK","","",null,null],[17,"O_SYNC","","",null,null],[17,"O_RSYNC","","",null,null],[17,"O_DSYNC","","",null,null],[17,"O_FSYNC","","",null,null],[17,"SOCK_NONBLOCK","","",null,null],[17,"LC_PAPER","","",null,null],[17,"LC_NAME","","",null,null],[17,"LC_ADDRESS","","",null,null],[17,"LC_TELEPHONE","","",null,null],[17,"LC_MEASUREMENT","","",null,null],[17,"LC_IDENTIFICATION","","",null,null],[17,"LC_PAPER_MASK","","",null,null],[17,"LC_NAME_MASK","","",null,null],[17,"LC_ADDRESS_MASK","","",null,null],[17,"LC_TELEPHONE_MASK","","",null,null],[17,"LC_MEASUREMENT_MASK","","",null,null],[17,"LC_IDENTIFICATION_MASK","","",null,null],[17,"LC_ALL_MASK","","",null,null],[17,"MAP_ANON","","",null,null],[17,"MAP_ANONYMOUS","","",null,null],[17,"MAP_GROWSDOWN","","",null,null],[17,"MAP_DENYWRITE","","",null,null],[17,"MAP_EXECUTABLE","","",null,null],[17,"MAP_POPULATE","","",null,null],[17,"MAP_NONBLOCK","","",null,null],[17,"MAP_STACK","","",null,null],[17,"EDEADLK","","",null,null],[17,"ENAMETOOLONG","","",null,null],[17,"ENOLCK","","",null,null],[17,"ENOSYS","","",null,null],[17,"ENOTEMPTY","","",null,null],[17,"ELOOP","","",null,null],[17,"ENOMSG","","",null,null],[17,"EIDRM","","",null,null],[17,"ECHRNG","","",null,null],[17,"EL2NSYNC","","",null,null],[17,"EL3HLT","","",null,null],[17,"EL3RST","","",null,null],[17,"ELNRNG","","",null,null],[17,"EUNATCH","","",null,null],[17,"ENOCSI","","",null,null],[17,"EL2HLT","","",null,null],[17,"EBADE","","",null,null],[17,"EBADR","","",null,null],[17,"EXFULL","","",null,null],[17,"ENOANO","","",null,null],[17,"EBADRQC","","",null,null],[17,"EBADSLT","","",null,null],[17,"EMULTIHOP","","",null,null],[17,"EOVERFLOW","","",null,null],[17,"ENOTUNIQ","","",null,null],[17,"EBADFD","","",null,null],[17,"EBADMSG","","",null,null],[17,"EREMCHG","","",null,null],[17,"ELIBACC","","",null,null],[17,"ELIBBAD","","",null,null],[17,"ELIBSCN","","",null,null],[17,"ELIBMAX","","",null,null],[17,"ELIBEXEC","","",null,null],[17,"EILSEQ","","",null,null],[17,"ERESTART","","",null,null],[17,"ESTRPIPE","","",null,null],[17,"EUSERS","","",null,null],[17,"ENOTSOCK","","",null,null],[17,"EDESTADDRREQ","","",null,null],[17,"EMSGSIZE","","",null,null],[17,"EPROTOTYPE","","",null,null],[17,"ENOPROTOOPT","","",null,null],[17,"EPROTONOSUPPORT","","",null,null],[17,"ESOCKTNOSUPPORT","","",null,null],[17,"EOPNOTSUPP","","",null,null],[17,"EPFNOSUPPORT","","",null,null],[17,"EAFNOSUPPORT","","",null,null],[17,"EADDRINUSE","","",null,null],[17,"EADDRNOTAVAIL","","",null,null],[17,"ENETDOWN","","",null,null],[17,"ENETUNREACH","","",null,null],[17,"ENETRESET","","",null,null],[17,"ECONNABORTED","","",null,null],[17,"ECONNRESET","","",null,null],[17,"ENOBUFS","","",null,null],[17,"EISCONN","","",null,null],[17,"ENOTCONN","","",null,null],[17,"ESHUTDOWN","","",null,null],[17,"ETOOMANYREFS","","",null,null],[17,"ETIMEDOUT","","",null,null],[17,"ECONNREFUSED","","",null,null],[17,"EHOSTDOWN","","",null,null],[17,"EHOSTUNREACH","","",null,null],[17,"EALREADY","","",null,null],[17,"EINPROGRESS","","",null,null],[17,"ESTALE","","",null,null],[17,"EUCLEAN","","",null,null],[17,"ENOTNAM","","",null,null],[17,"ENAVAIL","","",null,null],[17,"EISNAM","","",null,null],[17,"EREMOTEIO","","",null,null],[17,"EDQUOT","","",null,null],[17,"ENOMEDIUM","","",null,null],[17,"EMEDIUMTYPE","","",null,null],[17,"ECANCELED","","",null,null],[17,"ENOKEY","","",null,null],[17,"EKEYEXPIRED","","",null,null],[17,"EKEYREVOKED","","",null,null],[17,"EKEYREJECTED","","",null,null],[17,"EOWNERDEAD","","",null,null],[17,"ENOTRECOVERABLE","","",null,null],[17,"EHWPOISON","","",null,null],[17,"ERFKILL","","",null,null],[17,"SOCK_STREAM","","",null,null],[17,"SOCK_DGRAM","","",null,null],[17,"SOCK_SEQPACKET","","",null,null],[17,"SOL_SOCKET","","",null,null],[17,"SO_REUSEADDR","","",null,null],[17,"SO_TYPE","","",null,null],[17,"SO_ERROR","","",null,null],[17,"SO_DONTROUTE","","",null,null],[17,"SO_BROADCAST","","",null,null],[17,"SO_SNDBUF","","",null,null],[17,"SO_RCVBUF","","",null,null],[17,"SO_KEEPALIVE","","",null,null],[17,"SO_OOBINLINE","","",null,null],[17,"SO_LINGER","","",null,null],[17,"SO_REUSEPORT","","",null,null],[17,"SO_ACCEPTCONN","","",null,null],[17,"TCP_COOKIE_TRANSACTIONS","","",null,null],[17,"TCP_THIN_LINEAR_TIMEOUTS","","",null,null],[17,"TCP_THIN_DUPACK","","",null,null],[17,"TCP_USER_TIMEOUT","","",null,null],[17,"TCP_REPAIR","","",null,null],[17,"TCP_REPAIR_QUEUE","","",null,null],[17,"TCP_QUEUE_SEQ","","",null,null],[17,"TCP_REPAIR_OPTIONS","","",null,null],[17,"TCP_FASTOPEN","","",null,null],[17,"TCP_TIMESTAMP","","",null,null],[17,"SA_ONSTACK","","",null,null],[17,"SA_SIGINFO","","",null,null],[17,"SA_NOCLDWAIT","","",null,null],[17,"SIGCHLD","","",null,null],[17,"SIGBUS","","",null,null],[17,"SIGUSR1","","",null,null],[17,"SIGUSR2","","",null,null],[17,"SIGCONT","","",null,null],[17,"SIGSTOP","","",null,null],[17,"SIGTSTP","","",null,null],[17,"SIGURG","","",null,null],[17,"SIGIO","","",null,null],[17,"SIGSYS","","",null,null],[17,"SIGSTKFLT","","",null,null],[17,"SIGUNUSED","","",null,null],[17,"SIGTTIN","","",null,null],[17,"SIGTTOU","","",null,null],[17,"SIGXCPU","","",null,null],[17,"SIGXFSZ","","",null,null],[17,"SIGVTALRM","","",null,null],[17,"SIGPROF","","",null,null],[17,"SIGWINCH","","",null,null],[17,"SIGPOLL","","",null,null],[17,"SIGPWR","","",null,null],[17,"SIG_SETMASK","","",null,null],[17,"SIG_BLOCK","","",null,null],[17,"SIG_UNBLOCK","","",null,null],[17,"POLLRDNORM","","",null,null],[17,"POLLWRNORM","","",null,null],[17,"POLLRDBAND","","",null,null],[17,"POLLWRBAND","","",null,null],[17,"FALLOC_FL_KEEP_SIZE","","",null,null],[17,"FALLOC_FL_PUNCH_HOLE","","",null,null],[17,"BUFSIZ","","",null,null],[17,"TMP_MAX","","",null,null],[17,"FOPEN_MAX","","",null,null],[17,"POSIX_FADV_DONTNEED","","",null,null],[17,"POSIX_FADV_NOREUSE","","",null,null],[17,"POSIX_MADV_DONTNEED","","",null,null],[17,"_SC_2_C_VERSION","","",null,null],[17,"RUSAGE_THREAD","","",null,null],[17,"O_ACCMODE","","",null,null],[17,"O_ASYNC","","",null,null],[17,"O_NDELAY","","",null,null],[17,"RUSAGE_CHILDREN","","",null,null],[17,"ST_RELATIME","","",null,null],[17,"NI_MAXHOST","","",null,null],[17,"ADFS_SUPER_MAGIC","","",null,null],[17,"AFFS_SUPER_MAGIC","","",null,null],[17,"CODA_SUPER_MAGIC","","",null,null],[17,"CRAMFS_MAGIC","","",null,null],[17,"EFS_SUPER_MAGIC","","",null,null],[17,"EXT2_SUPER_MAGIC","","",null,null],[17,"EXT3_SUPER_MAGIC","","",null,null],[17,"EXT4_SUPER_MAGIC","","",null,null],[17,"HPFS_SUPER_MAGIC","","",null,null],[17,"HUGETLBFS_MAGIC","","",null,null],[17,"ISOFS_SUPER_MAGIC","","",null,null],[17,"JFFS2_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC2","","",null,null],[17,"MINIX2_SUPER_MAGIC","","",null,null],[17,"MINIX2_SUPER_MAGIC2","","",null,null],[17,"MSDOS_SUPER_MAGIC","","",null,null],[17,"NCP_SUPER_MAGIC","","",null,null],[17,"NFS_SUPER_MAGIC","","",null,null],[17,"OPENPROM_SUPER_MAGIC","","",null,null],[17,"PROC_SUPER_MAGIC","","",null,null],[17,"QNX4_SUPER_MAGIC","","",null,null],[17,"REISERFS_SUPER_MAGIC","","",null,null],[17,"SMB_SUPER_MAGIC","","",null,null],[17,"TMPFS_MAGIC","","",null,null],[17,"USBDEVICE_SUPER_MAGIC","","",null,null],[17,"VEOF","","",null,null],[17,"IUTF8","","",null,null],[17,"CPU_SETSIZE","","",null,null],[17,"QFMT_VFS_V1","","",null,null],[17,"PTRACE_TRACEME","","",null,null],[17,"PTRACE_PEEKTEXT","","",null,null],[17,"PTRACE_PEEKDATA","","",null,null],[17,"PTRACE_PEEKUSER","","",null,null],[17,"PTRACE_POKETEXT","","",null,null],[17,"PTRACE_POKEDATA","","",null,null],[17,"PTRACE_POKEUSER","","",null,null],[17,"PTRACE_CONT","","",null,null],[17,"PTRACE_KILL","","",null,null],[17,"PTRACE_SINGLESTEP","","",null,null],[17,"PTRACE_ATTACH","","",null,null],[17,"PTRACE_DETACH","","",null,null],[17,"PTRACE_SYSCALL","","",null,null],[17,"PTRACE_SETOPTIONS","","",null,null],[17,"PTRACE_GETEVENTMSG","","",null,null],[17,"PTRACE_GETSIGINFO","","",null,null],[17,"PTRACE_SETSIGINFO","","",null,null],[17,"PTRACE_GETREGSET","","",null,null],[17,"PTRACE_SETREGSET","","",null,null],[17,"PTRACE_SEIZE","","",null,null],[17,"PTRACE_INTERRUPT","","",null,null],[17,"PTRACE_LISTEN","","",null,null],[17,"PTRACE_PEEKSIGINFO","","",null,null],[17,"MADV_DODUMP","","",null,null],[17,"MADV_DONTDUMP","","",null,null],[17,"EPOLLWAKEUP","","",null,null],[17,"MADV_HUGEPAGE","","",null,null],[17,"MADV_NOHUGEPAGE","","",null,null],[17,"MAP_HUGETLB","","",null,null],[17,"EFD_NONBLOCK","","",null,null],[17,"F_GETLK","","",null,null],[17,"F_GETOWN","","",null,null],[17,"F_SETOWN","","",null,null],[17,"F_SETLK","","",null,null],[17,"F_SETLKW","","",null,null],[17,"SEEK_DATA","","",null,null],[17,"SEEK_HOLE","","",null,null],[17,"SFD_NONBLOCK","","",null,null],[17,"TCSANOW","","",null,null],[17,"TCSADRAIN","","",null,null],[17,"TCSAFLUSH","","",null,null],[17,"TIOCGSOFTCAR","","",null,null],[17,"TIOCSSOFTCAR","","",null,null],[17,"TIOCLINUX","","",null,null],[17,"TIOCGSERIAL","","",null,null],[17,"TIOCEXCL","","",null,null],[17,"TIOCNXCL","","",null,null],[17,"TIOCSCTTY","","",null,null],[17,"TIOCSTI","","",null,null],[17,"TIOCMGET","","",null,null],[17,"TIOCMBIS","","",null,null],[17,"TIOCMBIC","","",null,null],[17,"TIOCMSET","","",null,null],[17,"TIOCCONS","","",null,null],[17,"RTLD_DEEPBIND","","",null,null],[17,"RTLD_GLOBAL","","",null,null],[17,"RTLD_NOLOAD","","",null,null],[17,"LINUX_REBOOT_MAGIC1","","",null,null],[17,"LINUX_REBOOT_MAGIC2","","",null,null],[17,"LINUX_REBOOT_MAGIC2A","","",null,null],[17,"LINUX_REBOOT_MAGIC2B","","",null,null],[17,"LINUX_REBOOT_MAGIC2C","","",null,null],[17,"LINUX_REBOOT_CMD_RESTART","","",null,null],[17,"LINUX_REBOOT_CMD_HALT","","",null,null],[17,"LINUX_REBOOT_CMD_CAD_ON","","",null,null],[17,"LINUX_REBOOT_CMD_CAD_OFF","","",null,null],[17,"LINUX_REBOOT_CMD_POWER_OFF","","",null,null],[17,"LINUX_REBOOT_CMD_RESTART2","","",null,null],[17,"LINUX_REBOOT_CMD_SW_SUSPEND","","",null,null],[17,"LINUX_REBOOT_CMD_KEXEC","","",null,null],[17,"PTHREAD_STACK_MIN","","",null,null],[17,"__SIZEOF_PTHREAD_RWLOCK_T","","",null,null],[17,"__SIZEOF_PTHREAD_CONDATTR_T","","",null,null],[17,"__SIZEOF_PTHREAD_MUTEX_T","","",null,null],[17,"__SIZEOF_PTHREAD_MUTEXATTR_T","","",null,null],[17,"O_DIRECT","","",null,null],[17,"O_DIRECTORY","","",null,null],[17,"O_NOFOLLOW","","",null,null],[17,"MAP_LOCKED","","",null,null],[17,"MAP_NORESERVE","","",null,null],[17,"MAP_32BIT","","",null,null],[17,"EDEADLOCK","","",null,null],[17,"SO_PEERCRED","","",null,null],[17,"SO_RCVLOWAT","","",null,null],[17,"SO_SNDLOWAT","","",null,null],[17,"SO_RCVTIMEO","","",null,null],[17,"SO_SNDTIMEO","","",null,null],[17,"FIOCLEX","","",null,null],[17,"FIONBIO","","",null,null],[17,"PTRACE_GETFPREGS","","",null,null],[17,"PTRACE_SETFPREGS","","",null,null],[17,"PTRACE_GETFPXREGS","","",null,null],[17,"PTRACE_SETFPXREGS","","",null,null],[17,"PTRACE_GETREGS","","",null,null],[17,"PTRACE_SETREGS","","",null,null],[17,"SYS_gettid","","",null,null],[17,"SYS_perf_event_open","","",null,null],[17,"MCL_CURRENT","","",null,null],[17,"MCL_FUTURE","","",null,null],[17,"SIGSTKSZ","","",null,null],[17,"CBAUD","","",null,null],[17,"TAB1","","",null,null],[17,"TAB2","","",null,null],[17,"TAB3","","",null,null],[17,"CR1","","",null,null],[17,"CR2","","",null,null],[17,"CR3","","",null,null],[17,"FF1","","",null,null],[17,"BS1","","",null,null],[17,"VT1","","",null,null],[17,"VWERASE","","",null,null],[17,"VREPRINT","","",null,null],[17,"VSUSP","","",null,null],[17,"VSTART","","",null,null],[17,"VSTOP","","",null,null],[17,"VDISCARD","","",null,null],[17,"VTIME","","",null,null],[17,"IXON","","",null,null],[17,"IXOFF","","",null,null],[17,"ONLCR","","",null,null],[17,"CSIZE","","",null,null],[17,"CS6","","",null,null],[17,"CS7","","",null,null],[17,"CS8","","",null,null],[17,"CSTOPB","","",null,null],[17,"CREAD","","",null,null],[17,"PARENB","","",null,null],[17,"PARODD","","",null,null],[17,"HUPCL","","",null,null],[17,"CLOCAL","","",null,null],[17,"ECHOKE","","",null,null],[17,"ECHOE","","",null,null],[17,"ECHOK","","",null,null],[17,"ECHONL","","",null,null],[17,"ECHOPRT","","",null,null],[17,"ECHOCTL","","",null,null],[17,"ISIG","","",null,null],[17,"ICANON","","",null,null],[17,"PENDIN","","",null,null],[17,"NOFLSH","","",null,null],[17,"VEOL","","",null,null],[17,"VEOL2","","",null,null],[17,"VMIN","","",null,null],[17,"IEXTEN","","",null,null],[17,"TOSTOP","","",null,null],[17,"FLUSHO","","",null,null],[17,"EXTPROC","","",null,null],[17,"TCGETS","","",null,null],[17,"TCSETS","","",null,null],[17,"TCSETSW","","",null,null],[17,"TCSETSF","","",null,null],[17,"TCGETA","","",null,null],[17,"TCSETA","","",null,null],[17,"TCSETAW","","",null,null],[17,"TCSETAF","","",null,null],[17,"TCSBRK","","",null,null],[17,"TCXONC","","",null,null],[17,"TCFLSH","","",null,null],[17,"TIOCINQ","","",null,null],[17,"TIOCGPGRP","","",null,null],[17,"TIOCSPGRP","","",null,null],[17,"TIOCOUTQ","","",null,null],[17,"TIOCGWINSZ","","",null,null],[17,"TIOCSWINSZ","","",null,null],[17,"FIONREAD","","",null,null]],"paths":[[3,"group"],[3,"utimbuf"],[3,"timeval"],[3,"timespec"],[3,"rlimit"],[3,"rusage"],[3,"in_addr"],[3,"in6_addr"],[3,"ip_mreq"],[3,"ipv6_mreq"],[3,"hostent"],[3,"iovec"],[3,"pollfd"],[3,"winsize"],[3,"linger"],[3,"sockaddr"],[3,"sockaddr_in"],[3,"sockaddr_in6"],[3,"sockaddr_un"],[3,"sockaddr_storage"],[3,"addrinfo"],[3,"sockaddr_nl"],[3,"sockaddr_ll"],[3,"tm"],[3,"sched_param"],[3,"Dl_info"],[3,"epoll_event"],[3,"utsname"],[3,"lconv"],[3,"dirent"],[3,"dirent64"],[3,"rlimit64"],[3,"glob_t"],[3,"ifaddrs"],[3,"passwd"],[3,"statvfs"],[3,"dqblk"],[3,"signalfd_siginfo"],[3,"mq_attr"],[3,"if_nameindex"],[3,"__exit_status"],[3,"__timeval"],[3,"utmpx"],[3,"sigaction"],[3,"stack_t"],[3,"siginfo_t"],[3,"glob64_t"],[3,"ucred"],[3,"statfs"],[3,"msghdr"],[3,"termios"],[3,"flock"],[3,"sysinfo"],[3,"stat"],[3,"stat64"],[3,"_libc_fpxreg"],[3,"_libc_xmmreg"],[3,"_libc_fpstate"],[3,"mcontext_t"],[3,"ucontext_t"],[3,"ipc_perm"],[3,"shmid_ds"],[4,"Option"],[3,"Wrapping"],[3,"ParseFloatError"],[4,"FpCategory"],[3,"TryFromIntError"],[3,"ParseIntError"],[3,"NonZero"],[3,"Unique"],[3,"Shared"],[3,"PhantomData"],[3,"RangeFull"],[3,"Range"],[3,"RangeFrom"],[3,"RangeTo"],[4,"RangeInclusive"],[3,"RangeToInclusive"],[4,"Ordering"],[8,"Any"],[3,"TypeId"],[3,"AtomicBool"],[3,"AtomicPtr"],[4,"Ordering"],[3,"AtomicI8"],[3,"AtomicU8"],[3,"AtomicI16"],[3,"AtomicU16"],[3,"AtomicI32"],[3,"AtomicU32"],[3,"AtomicI64"],[3,"AtomicU64"],[3,"AtomicIsize"],[3,"AtomicUsize"],[3,"Cell"],[4,"BorrowState"],[3,"RefCell"],[3,"Ref"],[3,"RefMut"],[3,"UnsafeCell"],[3,"EscapeUnicode"],[3,"EscapeDefault"],[3,"EncodeUtf8"],[3,"EncodeUtf16"],[3,"StepBy"],[3,"Repeat"],[3,"Empty"],[3,"Once"],[3,"Rev"],[3,"Cloned"],[3,"Cycle"],[3,"Chain"],[3,"Zip"],[3,"Map"],[3,"Filter"],[3,"FilterMap"],[3,"Enumerate"],[3,"Peekable"],[3,"SkipWhile"],[3,"TakeWhile"],[3,"Skip"],[3,"Take"],[3,"Scan"],[3,"FlatMap"],[3,"Fuse"],[3,"Inspect"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"TraitObject"],[4,"Result"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"Split"],[3,"SplitMut"],[3,"SplitN"],[3,"RSplitN"],[3,"SplitNMut"],[3,"RSplitNMut"],[3,"Windows"],[3,"Chunks"],[3,"ChunksMut"],[4,"SearchStep"],[3,"CharSearcher"],[3,"CharSliceSearcher"],[3,"CharPredicateSearcher"],[3,"StrSearcher"],[3,"ParseBoolError"],[3,"Utf8Error"],[3,"Chars"],[3,"CharIndices"],[3,"Bytes"],[3,"Split"],[3,"RSplit"],[3,"SplitTerminator"],[3,"RSplitTerminator"],[3,"SplitN"],[3,"RSplitN"],[3,"MatchIndices"],[3,"RMatchIndices"],[3,"Matches"],[3,"RMatches"],[3,"Lines"],[3,"LinesAny"],[3,"SipHasher13"],[3,"SipHasher24"],[3,"SipHasher"],[3,"BuildHasherDefault"],[4,"Alignment"],[3,"DebugStruct"],[3,"DebugTuple"],[3,"DebugSet"],[3,"DebugList"],[3,"DebugMap"],[3,"Error"],[3,"Arguments"],[3,"Formatter"],[8,"Clone"],[3,"pthread_attr_t"],[3,"sigset_t"],[3,"sem_t"],[3,"pthread_mutex_t"],[3,"pthread_rwlock_t"],[3,"pthread_mutexattr_t"],[3,"pthread_cond_t"],[3,"pthread_condattr_t"],[3,"fsid_t"],[3,"cpu_set_t"],[3,"fd_set"]]};
searchIndex["void"] = {"doc":"# Void","items":[[4,"Void","void","The empty type for cases which can&#39;t occur.",null,null],[5,"unreachable","","A safe version of `intrinsincs::unreachable`.",null,{"inputs":[{"name":"void"}],"output":null}],[11,"hash","core::num","",0,null],[11,"default","","",0,{"inputs":[],"output":{"name":"wrapping"}}],[11,"clone","","",0,null],[11,"cmp","","",0,null],[11,"partial_cmp","","",0,null],[11,"lt","","",0,null],[11,"le","","",0,null],[11,"gt","","",0,null],[11,"ge","","",0,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"fmt","","",0,null],[11,"fmt","","",0,null],[11,"fmt","","",0,null],[11,"fmt","","",0,null],[11,"fmt","","",0,null],[11,"fmt","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"eq","core::num::dec2flt","",1,null],[11,"ne","","",1,null],[11,"clone","","",1,null],[11,"fmt","","",1,null],[11,"fmt","","",1,null],[11,"fmt","core::num","",2,null],[11,"eq","","",2,null],[11,"clone","","",2,null],[11,"clone","","",3,null],[11,"fmt","","",3,null],[11,"fmt","","",3,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"clone","","",4,null],[11,"fmt","","",4,null],[11,"fmt","","",4,null],[11,"hash","core::nonzero","",5,null],[11,"fmt","","",5,null],[11,"partial_cmp","","",5,null],[11,"lt","","",5,null],[11,"le","","",5,null],[11,"gt","","",5,null],[11,"ge","","",5,null],[11,"cmp","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"clone","","",5,null],[11,"new","","Creates an instance of NonZero with the provided value.\nYou must indeed ensure that the value is actually &quot;non-zero&quot;.",5,{"inputs":[{"name":"t"}],"output":{"name":"nonzero"}}],[11,"deref","","",5,null],[11,"new","core::ptr","Creates a new `Unique`.",6,null],[11,"get","","Dereferences the content.",6,null],[11,"get_mut","","Mutably dereferences the content.",6,null],[11,"deref","","",6,null],[11,"fmt","","",6,null],[11,"new","","Creates a new `Shared`.",7,null],[11,"clone","","",7,null],[11,"deref","","",7,null],[11,"fmt","","",7,null],[11,"hash","core::marker","",8,null],[11,"eq","","",8,null],[11,"partial_cmp","","",8,null],[11,"cmp","","",8,null],[11,"clone","","",8,null],[11,"default","","",8,{"inputs":[],"output":{"name":"phantomdata"}}],[11,"hash","core::ops","",9,null],[11,"eq","","",9,null],[11,"clone","","",9,null],[11,"fmt","","",9,null],[11,"hash","","",10,null],[11,"eq","","",10,null],[11,"ne","","",10,null],[11,"clone","","",10,null],[11,"fmt","","",10,null],[11,"contains","","# Examples",10,null],[11,"hash","","",11,null],[11,"eq","","",11,null],[11,"ne","","",11,null],[11,"clone","","",11,null],[11,"fmt","","",11,null],[11,"contains","","# Examples",11,null],[11,"hash","","",12,null],[11,"eq","","",12,null],[11,"ne","","",12,null],[11,"clone","","",12,null],[11,"fmt","","",12,null],[11,"contains","","# Examples",12,null],[11,"hash","","",13,null],[11,"eq","","",13,null],[11,"ne","","",13,null],[11,"clone","","",13,null],[11,"fmt","","",13,null],[11,"contains","","# Examples",13,null],[11,"hash","","",14,null],[11,"eq","","",14,null],[11,"ne","","",14,null],[11,"clone","","",14,null],[11,"fmt","","",14,null],[11,"contains","","# Examples",14,null],[11,"hash","core::cmp","",15,null],[11,"fmt","","",15,null],[11,"eq","","",15,null],[11,"clone","","",15,null],[11,"reverse","","Reverse the `Ordering`.",15,null],[11,"cmp","","",15,null],[11,"partial_cmp","","",15,null],[11,"fmt","void::coreprovider","",16,null],[11,"fmt","","",16,null],[11,"is","","Returns true if the boxed type is the same as `T`",16,null],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or\n`None` if it isn&#39;t.",16,null],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or\n`None` if it isn&#39;t.",16,null],[11,"is","","Forwards to the method defined on the type `Any`.",16,null],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",16,null],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",16,null],[11,"hash","core::any","",17,null],[11,"fmt","","",17,null],[11,"eq","","",17,null],[11,"ne","","",17,null],[11,"clone","","",17,null],[11,"of","","Returns the `TypeId` of the type this generic function has been\ninstantiated with",17,{"inputs":[],"output":{"name":"typeid"}}],[11,"default","core::sync::atomic","",18,{"inputs":[],"output":{"name":"atomicbool"}}],[11,"default","","",19,{"inputs":[],"output":{"name":"atomicptr"}}],[11,"fmt","","",20,null],[11,"clone","","",20,null],[11,"new","","Creates a new `AtomicBool`.",18,{"inputs":[{"name":"bool"}],"output":{"name":"atomicbool"}}],[11,"load","","Loads a value from the bool.",18,null],[11,"store","","Stores a value into the bool.",18,null],[11,"swap","","Stores a value into the bool, returning the old value.",18,null],[11,"compare_and_swap","","Stores a value into the `bool` if the current value is the same as the `current` value.",18,null],[11,"compare_exchange","","Stores a value into the `bool` if the current value is the same as the `current` value.",18,null],[11,"compare_exchange_weak","","Stores a value into the `bool` if the current value is the same as the `current` value.",18,null],[11,"fetch_and","","Logical &quot;and&quot; with a boolean value.",18,null],[11,"fetch_nand","","Logical &quot;nand&quot; with a boolean value.",18,null],[11,"fetch_or","","Logical &quot;or&quot; with a boolean value.",18,null],[11,"fetch_xor","","Logical &quot;xor&quot; with a boolean value.",18,null],[11,"new","","Creates a new `AtomicPtr`.",19,null],[11,"load","","Loads a value from the pointer.",19,null],[11,"store","","Stores a value into the pointer.",19,null],[11,"swap","","Stores a value into the pointer, returning the old value.",19,null],[11,"compare_and_swap","","Stores a value into the pointer if the current value is the same as the `current` value.",19,null],[11,"compare_exchange","","Stores a value into the pointer if the current value is the same as the `current` value.",19,null],[11,"compare_exchange_weak","","Stores a value into the pointer if the current value is the same as the `current` value.",19,null],[11,"default","","",21,{"inputs":[],"output":{"name":"atomici8"}}],[11,"fmt","","",21,null],[11,"new","","Creates a new atomic integer.",21,{"inputs":[{"name":"i8"}],"output":{"name":"atomici8"}}],[11,"load","","Loads a value from the atomic integer.",21,null],[11,"store","","Stores a value into the atomic integer.",21,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",21,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",21,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",21,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",21,null],[11,"fetch_add","","Add to the current value, returning the previous value.",21,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",21,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",21,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",21,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",21,null],[11,"default","","",22,{"inputs":[],"output":{"name":"atomicu8"}}],[11,"fmt","","",22,null],[11,"new","","Creates a new atomic integer.",22,{"inputs":[{"name":"u8"}],"output":{"name":"atomicu8"}}],[11,"load","","Loads a value from the atomic integer.",22,null],[11,"store","","Stores a value into the atomic integer.",22,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",22,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",22,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",22,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",22,null],[11,"fetch_add","","Add to the current value, returning the previous value.",22,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",22,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",22,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",22,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",22,null],[11,"default","","",23,{"inputs":[],"output":{"name":"atomici16"}}],[11,"fmt","","",23,null],[11,"new","","Creates a new atomic integer.",23,{"inputs":[{"name":"i16"}],"output":{"name":"atomici16"}}],[11,"load","","Loads a value from the atomic integer.",23,null],[11,"store","","Stores a value into the atomic integer.",23,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",23,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",23,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",23,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",23,null],[11,"fetch_add","","Add to the current value, returning the previous value.",23,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",23,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",23,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",23,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",23,null],[11,"default","","",24,{"inputs":[],"output":{"name":"atomicu16"}}],[11,"fmt","","",24,null],[11,"new","","Creates a new atomic integer.",24,{"inputs":[{"name":"u16"}],"output":{"name":"atomicu16"}}],[11,"load","","Loads a value from the atomic integer.",24,null],[11,"store","","Stores a value into the atomic integer.",24,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",24,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",24,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",24,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",24,null],[11,"fetch_add","","Add to the current value, returning the previous value.",24,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",24,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",24,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",24,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",24,null],[11,"default","","",25,{"inputs":[],"output":{"name":"atomici32"}}],[11,"fmt","","",25,null],[11,"new","","Creates a new atomic integer.",25,{"inputs":[{"name":"i32"}],"output":{"name":"atomici32"}}],[11,"load","","Loads a value from the atomic integer.",25,null],[11,"store","","Stores a value into the atomic integer.",25,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",25,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",25,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",25,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",25,null],[11,"fetch_add","","Add to the current value, returning the previous value.",25,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",25,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",25,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",25,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",25,null],[11,"default","","",26,{"inputs":[],"output":{"name":"atomicu32"}}],[11,"fmt","","",26,null],[11,"new","","Creates a new atomic integer.",26,{"inputs":[{"name":"u32"}],"output":{"name":"atomicu32"}}],[11,"load","","Loads a value from the atomic integer.",26,null],[11,"store","","Stores a value into the atomic integer.",26,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",26,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",26,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",26,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",26,null],[11,"fetch_add","","Add to the current value, returning the previous value.",26,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",26,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",26,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",26,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",26,null],[11,"default","","",27,{"inputs":[],"output":{"name":"atomici64"}}],[11,"fmt","","",27,null],[11,"new","","Creates a new atomic integer.",27,{"inputs":[{"name":"i64"}],"output":{"name":"atomici64"}}],[11,"load","","Loads a value from the atomic integer.",27,null],[11,"store","","Stores a value into the atomic integer.",27,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",27,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",27,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",27,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",27,null],[11,"fetch_add","","Add to the current value, returning the previous value.",27,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",27,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",27,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",27,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",27,null],[11,"default","","",28,{"inputs":[],"output":{"name":"atomicu64"}}],[11,"fmt","","",28,null],[11,"new","","Creates a new atomic integer.",28,{"inputs":[{"name":"u64"}],"output":{"name":"atomicu64"}}],[11,"load","","Loads a value from the atomic integer.",28,null],[11,"store","","Stores a value into the atomic integer.",28,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",28,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",28,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",28,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",28,null],[11,"fetch_add","","Add to the current value, returning the previous value.",28,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",28,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",28,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",28,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",28,null],[11,"default","","",29,{"inputs":[],"output":{"name":"atomicisize"}}],[11,"fmt","","",29,null],[11,"new","","Creates a new atomic integer.",29,{"inputs":[{"name":"isize"}],"output":{"name":"atomicisize"}}],[11,"load","","Loads a value from the atomic integer.",29,null],[11,"store","","Stores a value into the atomic integer.",29,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",29,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",29,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",29,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",29,null],[11,"fetch_add","","Add to the current value, returning the previous value.",29,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",29,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",29,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",29,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",29,null],[11,"default","","",30,{"inputs":[],"output":{"name":"atomicusize"}}],[11,"fmt","","",30,null],[11,"new","","Creates a new atomic integer.",30,{"inputs":[{"name":"usize"}],"output":{"name":"atomicusize"}}],[11,"load","","Loads a value from the atomic integer.",30,null],[11,"store","","Stores a value into the atomic integer.",30,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",30,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",30,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",30,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",30,null],[11,"fetch_add","","Add to the current value, returning the previous value.",30,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",30,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",30,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",30,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",30,null],[11,"fmt","","",18,null],[11,"fmt","","",19,null],[11,"new","core::cell","Creates a new `Cell` containing the given value.",31,{"inputs":[{"name":"t"}],"output":{"name":"cell"}}],[11,"get","","Returns a copy of the contained value.",31,null],[11,"set","","Sets the contained value.",31,null],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",31,null],[11,"get_mut","","Returns a mutable reference to the underlying data.",31,null],[11,"clone","","",31,null],[11,"default","","",31,{"inputs":[],"output":{"name":"cell"}}],[11,"eq","","",31,null],[11,"partial_cmp","","",31,null],[11,"lt","","",31,null],[11,"le","","",31,null],[11,"gt","","",31,null],[11,"ge","","",31,null],[11,"cmp","","",31,null],[11,"fmt","","",32,null],[11,"eq","","",32,null],[11,"clone","","",32,null],[11,"new","","Creates a new `RefCell` containing `value`.",33,{"inputs":[{"name":"t"}],"output":{"name":"refcell"}}],[11,"into_inner","","Consumes the `RefCell`, returning the wrapped value.",33,null],[11,"borrow_state","","Query the current state of this `RefCell`",33,null],[11,"borrow","","Immutably borrows the wrapped value.",33,null],[11,"borrow_mut","","Mutably borrows the wrapped value.",33,null],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",33,null],[11,"get_mut","","Returns a mutable reference to the underlying data.",33,null],[11,"clone","","",33,null],[11,"default","","",33,{"inputs":[],"output":{"name":"refcell"}}],[11,"eq","","",33,null],[11,"partial_cmp","","",33,null],[11,"lt","","",33,null],[11,"le","","",33,null],[11,"gt","","",33,null],[11,"ge","","",33,null],[11,"cmp","","",33,null],[11,"deref","","",34,null],[11,"clone","","Copies a `Ref`.",34,{"inputs":[{"name":"ref"}],"output":{"name":"ref"}}],[11,"map","","Make a new `Ref` for a component of the borrowed data.",34,{"inputs":[{"name":"ref"},{"name":"f"}],"output":{"name":"ref"}}],[11,"map","","Make a new `RefMut` for a component of the borrowed data, e.g. an enum\nvariant.",35,{"inputs":[{"name":"refmut"},{"name":"f"}],"output":{"name":"refmut"}}],[11,"deref","","",35,null],[11,"deref_mut","","",35,null],[11,"new","","Constructs a new instance of `UnsafeCell` which will wrap the specified\nvalue.",36,{"inputs":[{"name":"t"}],"output":{"name":"unsafecell"}}],[11,"into_inner","","Unwraps the value.",36,null],[11,"get","","Gets a mutable pointer to the wrapped value.",36,null],[11,"default","","",36,{"inputs":[],"output":{"name":"unsafecell"}}],[11,"fmt","core::char","",37,null],[11,"clone","","",37,null],[11,"next","","",37,null],[11,"size_hint","","",37,null],[11,"count","","",37,null],[11,"last","","",37,null],[11,"len","","",37,null],[11,"fmt","","",38,null],[11,"clone","","",38,null],[11,"next","","",38,null],[11,"size_hint","","",38,null],[11,"count","","",38,null],[11,"nth","","",38,null],[11,"last","","",38,null],[11,"len","","",38,null],[11,"fmt","","",39,null],[11,"as_slice","","Returns the remaining bytes of this iterator as a slice.",39,null],[11,"next","","",39,null],[11,"size_hint","","",39,null],[11,"fmt","","",40,null],[11,"as_slice","","Returns the remaining bytes of this iterator as a slice.",40,null],[11,"next","","",40,null],[11,"size_hint","","",40,null],[11,"fmt","core::iter::range","",41,null],[11,"clone","","",41,null],[11,"step_by","core::ops","Creates an iterator starting at the same point, but stepping by\nthe given amount at each iteration.",11,null],[11,"step_by","","Creates an iterator with the same range, but stepping by the\ngiven amount at each iteration.",10,null],[11,"step_by","","Creates an iterator with the same range, but stepping by the\ngiven amount at each iteration.",13,null],[11,"next","core::iter::range","",41,null],[11,"size_hint","","",41,null],[11,"next","","",41,null],[11,"size_hint","","",41,null],[11,"next","","",41,null],[11,"size_hint","","",41,null],[11,"next","core::ops","",10,null],[11,"size_hint","","",10,null],[11,"next_back","","",10,null],[11,"next","","",11,null],[11,"next","","",13,null],[11,"size_hint","","",13,null],[11,"next_back","","",13,null],[11,"fmt","core::iter::sources","",42,null],[11,"clone","","",42,null],[11,"next","","",42,null],[11,"size_hint","","",42,null],[11,"next_back","","",42,null],[11,"fmt","","",43,null],[11,"next","","",43,null],[11,"size_hint","","",43,null],[11,"next_back","","",43,null],[11,"len","","",43,null],[11,"clone","","",43,null],[11,"default","","",43,{"inputs":[],"output":{"name":"empty"}}],[11,"fmt","","",44,null],[11,"clone","","",44,null],[11,"next","","",44,null],[11,"size_hint","","",44,null],[11,"next_back","","",44,null],[11,"len","","",44,null],[11,"fmt","core::iter","",45,null],[11,"clone","","",45,null],[11,"next","","",45,null],[11,"size_hint","","",45,null],[11,"next_back","","",45,null],[11,"fmt","","",46,null],[11,"clone","","",46,null],[11,"next","","",46,null],[11,"size_hint","","",46,null],[11,"next_back","","",46,null],[11,"fmt","","",47,null],[11,"clone","","",47,null],[11,"next","","",47,null],[11,"size_hint","","",47,null],[11,"fmt","","",48,null],[11,"clone","","",48,null],[11,"next","","",48,null],[11,"count","","",48,null],[11,"nth","","",48,null],[11,"find","","",48,null],[11,"last","","",48,null],[11,"size_hint","","",48,null],[11,"next_back","","",48,null],[11,"fmt","","",49,null],[11,"clone","","",49,null],[11,"next","","",49,null],[11,"size_hint","","",49,null],[11,"next_back","","",49,null],[11,"clone","","",50,null],[11,"fmt","","",50,null],[11,"next","","",50,null],[11,"size_hint","","",50,null],[11,"next_back","","",50,null],[11,"clone","","",51,null],[11,"fmt","","",51,null],[11,"next","","",51,null],[11,"size_hint","","",51,null],[11,"next_back","","",51,null],[11,"clone","","",52,null],[11,"fmt","","",52,null],[11,"next","","",52,null],[11,"size_hint","","",52,null],[11,"next_back","","",52,null],[11,"fmt","","",53,null],[11,"clone","","",53,null],[11,"next","","# Overflow Behavior",53,null],[11,"size_hint","","",53,null],[11,"nth","","",53,null],[11,"count","","",53,null],[11,"next_back","","",53,null],[11,"fmt","","",54,null],[11,"clone","","",54,null],[11,"next","","",54,null],[11,"count","","",54,null],[11,"nth","","",54,null],[11,"last","","",54,null],[11,"size_hint","","",54,null],[11,"peek","","Returns a reference to the next() value without advancing the iterator.",54,null],[11,"is_empty","","Checks if the iterator has finished iterating.",54,null],[11,"clone","","",55,null],[11,"fmt","","",55,null],[11,"next","","",55,null],[11,"size_hint","","",55,null],[11,"clone","","",56,null],[11,"fmt","","",56,null],[11,"next","","",56,null],[11,"size_hint","","",56,null],[11,"fmt","","",57,null],[11,"clone","","",57,null],[11,"next","","",57,null],[11,"nth","","",57,null],[11,"count","","",57,null],[11,"last","","",57,null],[11,"size_hint","","",57,null],[11,"next_back","","",57,null],[11,"fmt","","",58,null],[11,"clone","","",58,null],[11,"next","","",58,null],[11,"nth","","",58,null],[11,"size_hint","","",58,null],[11,"clone","","",59,null],[11,"fmt","","",59,null],[11,"next","","",59,null],[11,"size_hint","","",59,null],[11,"clone","","",60,null],[11,"fmt","","",60,null],[11,"next","","",60,null],[11,"size_hint","","",60,null],[11,"next_back","","",60,null],[11,"fmt","","",61,null],[11,"clone","","",61,null],[11,"next","","",61,null],[11,"nth","","",61,null],[11,"last","","",61,null],[11,"count","","",61,null],[11,"size_hint","","",61,null],[11,"next_back","","",61,null],[11,"clone","","",62,null],[11,"fmt","","",62,null],[11,"next","","",62,null],[11,"size_hint","","",62,null],[11,"next_back","","",62,null],[11,"hash","core::option","",63,null],[11,"fmt","","",63,null],[11,"cmp","","",63,null],[11,"partial_cmp","","",63,null],[11,"lt","","",63,null],[11,"le","","",63,null],[11,"gt","","",63,null],[11,"ge","","",63,null],[11,"eq","","",63,null],[11,"ne","","",63,null],[11,"clone","","",63,null],[11,"is_some","","Returns `true` if the option is a `Some` value",63,null],[11,"is_none","","Returns `true` if the option is a `None` value",63,null],[11,"as_ref","","Converts from `Option&lt;T&gt;` to `Option&lt;&amp;T&gt;`",63,null],[11,"as_mut","","Converts from `Option&lt;T&gt;` to `Option&lt;&amp;mut T&gt;`",63,null],[11,"expect","","Unwraps an option, yielding the content of a `Some`.",63,null],[11,"unwrap","","Moves the value `v` out of the `Option&lt;T&gt;` if it is `Some(v)`.",63,null],[11,"unwrap_or","","Returns the contained value or a default.",63,null],[11,"unwrap_or_else","","Returns the contained value or computes it from a closure.",63,null],[11,"map","","Maps an `Option&lt;T&gt;` to `Option&lt;U&gt;` by applying a function to a contained value",63,null],[11,"map_or","","Applies a function to the contained value (if any),\nor returns a `default` (if not).",63,null],[11,"map_or_else","","Applies a function to the contained value (if any),\nor computes a `default` (if not).",63,null],[11,"ok_or","","Transforms the `Option&lt;T&gt;` into a `Result&lt;T, E&gt;`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err)`.",63,null],[11,"ok_or_else","","Transforms the `Option&lt;T&gt;` into a `Result&lt;T, E&gt;`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err())`.",63,null],[11,"iter","","Returns an iterator over the possibly contained value.",63,null],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",63,null],[11,"and","","Returns `None` if the option is `None`, otherwise returns `optb`.",63,null],[11,"and_then","","Returns `None` if the option is `None`, otherwise calls `f` with the\nwrapped value and returns the result.",63,null],[11,"or","","Returns the option if it contains a value, otherwise returns `optb`.",63,null],[11,"or_else","","Returns the option if it contains a value, otherwise calls `f` and\nreturns the result.",63,null],[11,"take","","Takes the value out of the option, leaving a `None` in its place.",63,null],[11,"cloned","","Maps an `Option&lt;&amp;T&gt;` to an `Option&lt;T&gt;` by cloning the contents of the\noption.",63,null],[11,"unwrap_or_default","","Returns the contained value or a default",63,null],[11,"default","","",63,{"inputs":[],"output":{"name":"option"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",63,null],[11,"fmt","","",64,null],[11,"next","","",64,null],[11,"size_hint","","",64,null],[11,"next_back","","",64,null],[11,"clone","","",64,null],[11,"fmt","","",65,null],[11,"next","","",65,null],[11,"size_hint","","",65,null],[11,"next_back","","",65,null],[11,"fmt","","",66,null],[11,"clone","","",66,null],[11,"next","","",66,null],[11,"size_hint","","",66,null],[11,"next_back","","",66,null],[11,"from_iter","","Takes each element in the `Iterator`: if it is `None`, no further\nelements are taken, and the `None` is returned. Should no `None` occur, a\ncontainer with the values of each `Option` is returned.",63,{"inputs":[{"name":"i"}],"output":{"name":"option"}}],[11,"clone","core::raw","",67,null],[11,"hash","core::result","",68,null],[11,"fmt","","",68,null],[11,"cmp","","",68,null],[11,"partial_cmp","","",68,null],[11,"lt","","",68,null],[11,"le","","",68,null],[11,"gt","","",68,null],[11,"ge","","",68,null],[11,"eq","","",68,null],[11,"ne","","",68,null],[11,"clone","","",68,null],[11,"is_ok","","Returns true if the result is `Ok`",68,null],[11,"is_err","","Returns true if the result is `Err`",68,null],[11,"ok","","Converts from `Result&lt;T, E&gt;` to `Option&lt;T&gt;`",68,null],[11,"err","","Converts from `Result&lt;T, E&gt;` to `Option&lt;E&gt;`",68,null],[11,"as_ref","","Converts from `Result&lt;T, E&gt;` to `Result&lt;&amp;T, &amp;E&gt;`",68,null],[11,"as_mut","","Converts from `Result&lt;T, E&gt;` to `Result&lt;&amp;mut T, &amp;mut E&gt;`",68,null],[11,"map","","Maps a `Result&lt;T, E&gt;` to `Result&lt;U, E&gt;` by applying a function to a\ncontained `Ok` value, leaving an `Err` value untouched.",68,null],[11,"map_err","","Maps a `Result&lt;T, E&gt;` to `Result&lt;T, F&gt;` by applying a function to a\ncontained `Err` value, leaving an `Ok` value untouched.",68,null],[11,"iter","","Returns an iterator over the possibly contained value.",68,null],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",68,null],[11,"and","","Returns `res` if the result is `Ok`, otherwise returns the `Err` value of `self`.",68,null],[11,"and_then","","Calls `op` if the result is `Ok`, otherwise returns the `Err` value of `self`.",68,null],[11,"or","","Returns `res` if the result is `Err`, otherwise returns the `Ok` value of `self`.",68,null],[11,"or_else","","Calls `op` if the result is `Err`, otherwise returns the `Ok` value of `self`.",68,null],[11,"unwrap_or","","Unwraps a result, yielding the content of an `Ok`.\nElse it returns `optb`.",68,null],[11,"unwrap_or_else","","Unwraps a result, yielding the content of an `Ok`.\nIf the value is an `Err` then it calls `op` with its value.",68,null],[11,"unwrap","","Unwraps a result, yielding the content of an `Ok`.",68,null],[11,"expect","","Unwraps a result, yielding the content of an `Ok`.",68,null],[11,"unwrap_err","","Unwraps a result, yielding the content of an `Err`.",68,null],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",68,null],[11,"fmt","","",69,null],[11,"next","","",69,null],[11,"size_hint","","",69,null],[11,"next_back","","",69,null],[11,"clone","","",69,null],[11,"fmt","","",70,null],[11,"next","","",70,null],[11,"size_hint","","",70,null],[11,"next_back","","",70,null],[11,"fmt","","",71,null],[11,"next","","",71,null],[11,"size_hint","","",71,null],[11,"next_back","","",71,null],[11,"from_iter","","Takes each element in the `Iterator`: if it is an `Err`, no further\nelements are taken, and the `Err` is returned. Should no `Err` occur, a\ncontainer with the values of each `Result` is returned.",68,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"fmt","core::slice","",72,null],[11,"as_slice","","View the underlying data as a subslice of the original data.",72,null],[11,"next","","",72,null],[11,"size_hint","","",72,null],[11,"count","","",72,null],[11,"nth","","",72,null],[11,"last","","",72,null],[11,"next_back","","",72,null],[11,"clone","","",72,null],[11,"fmt","","",73,null],[11,"into_slice","","View the underlying data as a subslice of the original data.",73,null],[11,"next","","",73,null],[11,"size_hint","","",73,null],[11,"count","","",73,null],[11,"nth","","",73,null],[11,"last","","",73,null],[11,"next_back","","",73,null],[11,"fmt","","",74,null],[11,"clone","","",74,null],[11,"next","","",74,null],[11,"size_hint","","",74,null],[11,"next_back","","",74,null],[11,"fmt","","",75,null],[11,"next","","",75,null],[11,"size_hint","","",75,null],[11,"next_back","","",75,null],[11,"fmt","","",76,null],[11,"fmt","","",77,null],[11,"fmt","","",78,null],[11,"fmt","","",79,null],[11,"next","","",76,null],[11,"size_hint","","",76,null],[11,"next","","",77,null],[11,"size_hint","","",77,null],[11,"next","","",78,null],[11,"size_hint","","",78,null],[11,"next","","",79,null],[11,"size_hint","","",79,null],[11,"fmt","","",80,null],[11,"clone","","",80,null],[11,"next","","",80,null],[11,"size_hint","","",80,null],[11,"count","","",80,null],[11,"nth","","",80,null],[11,"last","","",80,null],[11,"next_back","","",80,null],[11,"fmt","","",81,null],[11,"clone","","",81,null],[11,"next","","",81,null],[11,"size_hint","","",81,null],[11,"count","","",81,null],[11,"nth","","",81,null],[11,"last","","",81,null],[11,"next_back","","",81,null],[11,"fmt","","",82,null],[11,"next","","",82,null],[11,"size_hint","","",82,null],[11,"count","","",82,null],[11,"nth","","",82,null],[11,"last","","",82,null],[11,"next_back","","",82,null],[11,"fmt","core::str::pattern","",83,null],[11,"eq","","",83,null],[11,"ne","","",83,null],[11,"clone","","",83,null],[11,"fmt","","",84,null],[11,"clone","","",84,null],[11,"haystack","","",84,null],[11,"next","","",84,null],[11,"next_match","","",84,null],[11,"next_reject","","",84,null],[11,"next_back","","",84,null],[11,"next_match_back","","",84,null],[11,"next_reject_back","","",84,null],[11,"fmt","","",85,null],[11,"clone","","",85,null],[11,"haystack","","",85,null],[11,"next","","",85,null],[11,"next_match","","",85,null],[11,"next_reject","","",85,null],[11,"next_back","","",85,null],[11,"next_match_back","","",85,null],[11,"next_reject_back","","",85,null],[11,"clone","","",86,null],[11,"fmt","","",86,null],[11,"haystack","","",86,null],[11,"next","","",86,null],[11,"next_match","","",86,null],[11,"next_reject","","",86,null],[11,"next_back","","",86,null],[11,"next_match_back","","",86,null],[11,"next_reject_back","","",86,null],[11,"fmt","","",87,null],[11,"clone","","",87,null],[11,"haystack","","",87,null],[11,"next","","",87,null],[11,"next_match","","",87,null],[11,"next_back","","",87,null],[11,"next_match_back","","",87,null],[11,"eq","core::str","",88,null],[11,"ne","","",88,null],[11,"clone","","",88,null],[11,"fmt","","",88,null],[11,"fmt","","",88,null],[11,"fmt","","",89,null],[11,"clone","","",89,null],[11,"eq","","",89,null],[11,"ne","","",89,null],[11,"valid_up_to","","Returns the index in the given string up to which valid UTF-8 was\nverified.",89,null],[11,"fmt","","",89,null],[11,"fmt","","",90,null],[11,"clone","","",90,null],[11,"next","","",90,null],[11,"size_hint","","",90,null],[11,"next_back","","",90,null],[11,"as_str","","View the underlying data as a subslice of the original data.",90,null],[11,"fmt","","",91,null],[11,"clone","","",91,null],[11,"next","","",91,null],[11,"size_hint","","",91,null],[11,"next_back","","",91,null],[11,"as_str","","View the underlying data as a subslice of the original data.",91,null],[11,"fmt","","",92,null],[11,"clone","","",92,null],[11,"next","","",92,null],[11,"size_hint","","",92,null],[11,"count","","",92,null],[11,"last","","",92,null],[11,"nth","","",92,null],[11,"next_back","","",92,null],[11,"len","","",92,null],[11,"fmt","","",93,null],[11,"next","","",93,null],[11,"clone","","",93,null],[11,"fmt","","",94,null],[11,"next","","",94,null],[11,"clone","","",94,null],[11,"next_back","","",93,null],[11,"next_back","","",94,null],[11,"fmt","","",95,null],[11,"next","","",95,null],[11,"clone","","",95,null],[11,"fmt","","",96,null],[11,"next","","",96,null],[11,"clone","","",96,null],[11,"next_back","","",95,null],[11,"next_back","","",96,null],[11,"fmt","","",97,null],[11,"next","","",97,null],[11,"clone","","",97,null],[11,"fmt","","",98,null],[11,"next","","",98,null],[11,"clone","","",98,null],[11,"fmt","","",99,null],[11,"next","","",99,null],[11,"clone","","",99,null],[11,"fmt","","",100,null],[11,"next","","",100,null],[11,"clone","","",100,null],[11,"next_back","","",99,null],[11,"next_back","","",100,null],[11,"fmt","","",101,null],[11,"next","","",101,null],[11,"clone","","",101,null],[11,"fmt","","",102,null],[11,"next","","",102,null],[11,"clone","","",102,null],[11,"next_back","","",101,null],[11,"next_back","","",102,null],[11,"fmt","","",103,null],[11,"clone","","",103,null],[11,"next","","",103,null],[11,"size_hint","","",103,null],[11,"next_back","","",103,null],[11,"fmt","","",104,null],[11,"clone","","",104,null],[11,"next","","",104,null],[11,"size_hint","","",104,null],[11,"next_back","","",104,null],[11,"default","core::hash::sip","",105,{"inputs":[],"output":{"name":"siphasher13"}}],[11,"clone","","",105,null],[11,"fmt","","",105,null],[11,"default","","",106,{"inputs":[],"output":{"name":"siphasher24"}}],[11,"clone","","",106,null],[11,"fmt","","",106,null],[11,"default","","",107,{"inputs":[],"output":{"name":"siphasher"}}],[11,"clone","","",107,null],[11,"fmt","","",107,null],[11,"new","","Creates a new `SipHasher` with the two initial keys set to 0.",107,{"inputs":[],"output":{"name":"siphasher"}}],[11,"new_with_keys","","Creates a `SipHasher` that is keyed off the provided keys.",107,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher"}}],[11,"new","","Creates a new `SipHasher13` with the two initial keys set to 0.",105,{"inputs":[],"output":{"name":"siphasher13"}}],[11,"new_with_keys","","Creates a `SipHasher13` that is keyed off the provided keys.",105,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher13"}}],[11,"new","","Creates a new `SipHasher24` with the two initial keys set to 0.",106,{"inputs":[],"output":{"name":"siphasher24"}}],[11,"new_with_keys","","Creates a `SipHasher24` that is keyed off the provided keys.",106,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher24"}}],[11,"write","","",107,null],[11,"finish","","",107,null],[11,"write","","",105,null],[11,"finish","","",105,null],[11,"write","","",106,null],[11,"finish","","",106,null],[11,"fmt","core::hash","",108,null],[11,"build_hasher","","",108,null],[11,"clone","","",108,null],[11,"default","","",108,{"inputs":[],"output":{"name":"buildhasherdefault"}}],[11,"fmt","core::fmt","",109,null],[11,"field","core::fmt::builders","Adds a new field to the generated struct output.",110,null],[11,"finish","","Finishes output and returns any error encountered.",110,null],[11,"field","","Adds a new field to the generated tuple struct output.",111,null],[11,"finish","","Finishes output and returns any error encountered.",111,null],[11,"entry","","Adds a new entry to the set output.",112,null],[11,"entries","","Adds the contents of an iterator of entries to the set output.",112,null],[11,"finish","","Finishes output and returns any error encountered.",112,null],[11,"entry","","Adds a new entry to the list output.",113,null],[11,"entries","","Adds the contents of an iterator of entries to the list output.",113,null],[11,"finish","","Finishes output and returns any error encountered.",113,null],[11,"entry","","Adds a new entry to the map output.",114,null],[11,"entries","","Adds the contents of an iterator of entries to the map output.",114,null],[11,"finish","","Finishes output and returns any error encountered.",114,null],[11,"partial_cmp","core::fmt","",115,null],[11,"eq","","",115,null],[11,"cmp","","",115,null],[11,"hash","","",115,null],[11,"default","","",115,{"inputs":[],"output":{"name":"error"}}],[11,"fmt","","",115,null],[11,"clone","","",115,null],[11,"clone","","",116,null],[11,"fmt","","",116,null],[11,"fmt","","",116,null],[11,"pad_integral","","Performs the correct padding for an integer which has already been\nemitted into a str. The str should *not* contain the sign for the\ninteger, that will be added by this method.",117,null],[11,"pad","","This function takes a string slice and emits it to the internal buffer\nafter applying the relevant formatting flags specified. The flags\nrecognized for generic strings are:",117,null],[11,"write_str","","Writes some data to the underlying buffer contained within this\nformatter.",117,null],[11,"write_fmt","","Writes some formatted information into this instance",117,null],[11,"flags","","Flags for formatting (packed version of rt::Flag)",117,null],[11,"fill","","Character used as &#39;fill&#39; whenever there is alignment",117,null],[11,"align","","Flag indicating what form of alignment was requested",117,null],[11,"width","","Optionally specified integer width that the output should be",117,null],[11,"precision","","Optionally specified precision for numeric types",117,null],[11,"sign_plus","","Determines if the `+` flag was specified.",117,null],[11,"sign_minus","","Determines if the `-` flag was specified.",117,null],[11,"alternate","","Determines if the `#` flag was specified.",117,null],[11,"sign_aware_zero_pad","","Determines if the `0` flag was specified.",117,null],[11,"debug_struct","","Creates a `DebugStruct` builder designed to assist with creation of\n`fmt::Debug` implementations for structs.",117,null],[11,"debug_tuple","","Creates a `DebugTuple` builder designed to assist with creation of\n`fmt::Debug` implementations for tuple structs.",117,null],[11,"debug_list","","Creates a `DebugList` builder designed to assist with creation of\n`fmt::Debug` implementations for list-like structures.",117,null],[11,"debug_set","","Creates a `DebugSet` builder designed to assist with creation of\n`fmt::Debug` implementations for set-like structures.",117,null],[11,"debug_map","","Creates a `DebugMap` builder designed to assist with creation of\n`fmt::Debug` implementations for map-like structures.",117,null],[11,"write_str","","",117,null],[11,"write_char","","",117,null],[11,"write_fmt","","",117,null],[11,"fmt","","",115,null],[11,"fmt","core::marker","",8,null],[11,"fmt","core::cell","",31,null],[11,"fmt","","",33,null],[11,"fmt","","",34,null],[11,"fmt","","",35,null],[11,"fmt","","",36,null],[11,"write_char","void::coreprovider::fmt","Writes a `char` into this writer, returning whether the write succeeded.",118,null],[11,"write_fmt","","Glue for usage of the `write!` macro with implementors of this trait.",118,null],[11,"ne","void::coreprovider::cmp","This method tests for `!=`.",119,null],[11,"lt","","This method tests less than (for `self` and `other`) and is used by the `&lt;` operator.",120,null],[11,"le","","This method tests less than or equal to (for `self` and `other`) and is used by the `&lt;=`\noperator.",120,null],[11,"gt","","This method tests greater than (for `self` and `other`) and is used by the `&gt;` operator.",120,null],[11,"ge","","This method tests greater than or equal to (for `self` and `other`) and is used by the `&gt;=`\noperator.",120,null],[11,"is","void::coreprovider","Returns true if the boxed type is the same as `T`",121,null],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or\n`None` if it isn&#39;t.",121,null],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or\n`None` if it isn&#39;t.",121,null],[11,"is","","Forwards to the method defined on the type `Any`.",121,null],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",121,null],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",121,null],[11,"is","","Forwards to the method defined on the type `Any`.",121,null],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",121,null],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",121,null],[11,"downcast","","Attempt to downcast the box to a concrete type.",121,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",121,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",121,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"from","alloc::boxed","",122,{"inputs":[{"name":"e"}],"output":{"name":"box"}}],[11,"from","","",122,{"inputs":[{"name":"e"}],"output":{"name":"box"}}],[11,"from","","",122,{"inputs":[{"name":"string"}],"output":{"name":"box"}}],[11,"from","","",122,{"inputs":[{"name":"string"}],"output":{"name":"box"}}],[11,"from","","",122,{"inputs":[{"name":"str"}],"output":{"name":"box"}}],[11,"from","","",122,{"inputs":[{"name":"str"}],"output":{"name":"box"}}],[11,"description","core::str","",88,null],[11,"description","","",89,null],[11,"description","core::num","",4,null],[11,"description","","",3,null],[11,"description","core::num::dec2flt","",1,null],[11,"description","collections::string","",123,null],[11,"description","","",124,null],[11,"description","","",125,null],[11,"description","rustc_unicode::char","",126,null],[11,"description","alloc::boxed","",122,null],[11,"cause","","",122,null],[11,"description","core::fmt","",115,null],[11,"next","std::ascii","",127,null],[11,"size_hint","","",127,null],[11,"next_back","","",127,null],[11,"clone","std::thread::local","",128,null],[11,"eq","","",128,null],[11,"with","","Acquires a reference to the value in this TLS key.",129,null],[11,"state","","Query the current state of this key.",129,null],[11,"new","std::thread::local::elf","",130,{"inputs":[],"output":{"name":"key"}}],[11,"get","","",130,null],[11,"new","std::thread::local::os","",131,{"inputs":[],"output":{"name":"key"}}],[11,"get","","",131,null],[11,"new","std::thread","Generates the base configuration for spawning a thread, from which\nconfiguration methods can be chained.",132,{"inputs":[],"output":{"name":"builder"}}],[11,"name","","Names the thread-to-be. Currently the name is used for identification\nonly in panic messages.",132,null],[11,"stack_size","","Sets the size of the stack for the new thread.",132,null],[11,"spawn","","Spawns a new thread, and returns a join handle for it.",132,null],[11,"clone","","",133,null],[11,"unpark","","Atomically makes the handle&#39;s token available if it is not already.",133,null],[11,"name","","Gets the thread&#39;s name.",133,null],[11,"fmt","","",133,null],[11,"thread","","Extracts a handle to the underlying thread",134,null],[11,"join","","Waits for the associated thread to finish.",134,null],[11,"clone","std::collections::hash::map","",135,null],[11,"new","","Creates an empty HashMap.",135,{"inputs":[],"output":{"name":"hashmap"}}],[11,"with_capacity","","Creates an empty hash map with the given initial capacity.",135,{"inputs":[{"name":"usize"}],"output":{"name":"hashmap"}}],[11,"with_hasher","","Creates an empty hashmap which will use the given hash builder to hash\nkeys.",135,{"inputs":[{"name":"s"}],"output":{"name":"hashmap"}}],[11,"with_capacity_and_hasher","","Creates an empty HashMap with space for at least `capacity`\nelements, using `hasher` to hash the keys.",135,{"inputs":[{"name":"usize"},{"name":"s"}],"output":{"name":"hashmap"}}],[11,"hasher","","Returns a reference to the map&#39;s hasher.",135,null],[11,"capacity","","Returns the number of elements the map can hold without reallocating.",135,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted\nin the `HashMap`. The collection may reserve more space to avoid\nfrequent reallocations.",135,null],[11,"shrink_to_fit","","Shrinks the capacity of the map as much as possible. It will drop\ndown as much as possible while maintaining the internal rules\nand possibly leaving some space in accordance with the resize policy.",135,null],[11,"keys","","An iterator visiting all keys in arbitrary order.\nIterator element type is `&amp;&#39;a K`.",135,null],[11,"values","","An iterator visiting all values in arbitrary order.\nIterator element type is `&amp;&#39;a V`.",135,null],[11,"values_mut","","An iterator visiting all values mutably in arbitrary order.\nIterator element type is `&amp;&#39;a mut V`.",135,null],[11,"iter","","An iterator visiting all key-value pairs in arbitrary order.\nIterator element type is `(&amp;&#39;a K, &amp;&#39;a V)`.",135,null],[11,"iter_mut","","An iterator visiting all key-value pairs in arbitrary order,\nwith mutable references to the values.\nIterator element type is `(&amp;&#39;a K, &amp;&#39;a mut V)`.",135,null],[11,"entry","","Gets the given key&#39;s corresponding entry in the map for in-place manipulation.",135,null],[11,"len","","Returns the number of elements in the map.",135,null],[11,"is_empty","","Returns true if the map contains no elements.",135,null],[11,"drain","","Clears the map, returning all key-value pairs as an iterator. Keeps the\nallocated memory for reuse.",135,null],[11,"clear","","Clears the map, removing all key-value pairs. Keeps the allocated memory\nfor reuse.",135,null],[11,"get","","Returns a reference to the value corresponding to the key.",135,null],[11,"contains_key","","Returns true if the map contains a value for the specified key.",135,null],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",135,null],[11,"insert","","Inserts a key-value pair into the map.",135,null],[11,"remove","","Removes a key from the map, returning the value at the key if the key\nwas previously in the map.",135,null],[11,"eq","","",135,null],[11,"fmt","","",135,null],[11,"default","","",135,{"inputs":[],"output":{"name":"hashmap"}}],[11,"index","","",135,null],[11,"clone","","",136,null],[11,"clone","","",137,null],[11,"clone","","",138,null],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each key-value\npair out of the map in arbitrary order. The map cannot be used after\ncalling this.",135,null],[11,"next","","",136,null],[11,"size_hint","","",136,null],[11,"len","","",136,null],[11,"next","","",139,null],[11,"size_hint","","",139,null],[11,"len","","",139,null],[11,"next","","",140,null],[11,"size_hint","","",140,null],[11,"len","","",140,null],[11,"next","","",137,null],[11,"size_hint","","",137,null],[11,"len","","",137,null],[11,"next","","",138,null],[11,"size_hint","","",138,null],[11,"len","","",138,null],[11,"next","","",141,null],[11,"size_hint","","",141,null],[11,"len","","",141,null],[11,"next","","",142,null],[11,"size_hint","","",142,null],[11,"len","","",142,null],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns\na mutable reference to the value in the entry.",143,null],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty,\nand returns a mutable reference to the value in the entry.",143,null],[11,"key","","Returns a reference to this entry&#39;s key.",143,null],[11,"key","","Gets a reference to the key in the entry.",144,null],[11,"remove_pair","","Take the ownership of the key and value from the map.",144,null],[11,"get","","Gets a reference to the value in the entry.",144,null],[11,"get_mut","","Gets a mutable reference to the value in the entry.",144,null],[11,"into_mut","","Converts the OccupiedEntry into a mutable reference to the value in the entry\nwith a lifetime bound to the map itself",144,null],[11,"insert","","Sets the value of the entry, and returns the entry&#39;s old value",144,null],[11,"remove","","Takes the value out of the entry, and returns it",144,null],[11,"key","","Gets a reference to the key that would be used when inserting a value\nthrough the VacantEntry.",145,null],[11,"into_key","","Take ownership of the key.",145,null],[11,"insert","","Sets the value of the entry with the VacantEntry&#39;s key,\nand returns a mutable reference to it",145,null],[11,"from_iter","","",135,{"inputs":[{"name":"t"}],"output":{"name":"hashmap"}}],[11,"extend","","",135,null],[11,"extend","","",135,null],[11,"clone","","",146,null],[11,"new","","Constructs a new `RandomState` that is initialized with random keys.",146,{"inputs":[],"output":{"name":"randomstate"}}],[11,"build_hasher","","",146,null],[11,"write","","",147,null],[11,"finish","","",147,null],[11,"default","","",146,{"inputs":[],"output":{"name":"randomstate"}}],[11,"clone","std::collections::hash::set","",148,null],[11,"new","","Creates an empty HashSet.",148,{"inputs":[],"output":{"name":"hashset"}}],[11,"with_capacity","","Creates an empty HashSet with space for at least `n` elements in\nthe hash table.",148,{"inputs":[{"name":"usize"}],"output":{"name":"hashset"}}],[11,"with_hasher","","Creates a new empty hash set which will use the given hasher to hash\nkeys.",148,{"inputs":[{"name":"s"}],"output":{"name":"hashset"}}],[11,"with_capacity_and_hasher","","Creates an empty HashSet with space for at least `capacity`\nelements in the hash table, using `hasher` to hash the keys.",148,{"inputs":[{"name":"usize"},{"name":"s"}],"output":{"name":"hashset"}}],[11,"hasher","","Returns a reference to the set&#39;s hasher.",148,null],[11,"capacity","","Returns the number of elements the set can hold without reallocating.",148,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted\nin the `HashSet`. The collection may reserve more space to avoid\nfrequent reallocations.",148,null],[11,"shrink_to_fit","","Shrinks the capacity of the set as much as possible. It will drop\ndown as much as possible while maintaining the internal rules\nand possibly leaving some space in accordance with the resize policy.",148,null],[11,"iter","","An iterator visiting all elements in arbitrary order.\nIterator element type is &amp;&#39;a T.",148,null],[11,"difference","","Visit the values representing the difference.",148,null],[11,"symmetric_difference","","Visit the values representing the symmetric difference.",148,null],[11,"intersection","","Visit the values representing the intersection.",148,null],[11,"union","","Visit the values representing the union.",148,null],[11,"len","","Returns the number of elements in the set.",148,null],[11,"is_empty","","Returns true if the set contains no elements.",148,null],[11,"drain","","Clears the set, returning all elements in an iterator.",148,null],[11,"clear","","Clears the set, removing all values.",148,null],[11,"contains","","Returns `true` if the set contains a value.",148,null],[11,"get","","Returns a reference to the value in the set, if any, that is equal to the given value.",148,null],[11,"is_disjoint","","Returns `true` if the set has no elements in common with `other`.\nThis is equivalent to checking for an empty intersection.",148,null],[11,"is_subset","","Returns `true` if the set is a subset of another.",148,null],[11,"is_superset","","Returns `true` if the set is a superset of another.",148,null],[11,"insert","","Adds a value to the set.",148,null],[11,"replace","","Adds a value to the set, replacing the existing value, if any, that is equal to the given\none. Returns the replaced value.",148,null],[11,"remove","","Removes a value from the set. Returns `true` if the value was\npresent in the set.",148,null],[11,"take","","Removes and returns the value in the set, if any, that is equal to the given one.",148,null],[11,"eq","","",148,null],[11,"fmt","","",148,null],[11,"from_iter","","",148,{"inputs":[{"name":"i"}],"output":{"name":"hashset"}}],[11,"extend","","",148,null],[11,"extend","","",148,null],[11,"default","","",148,{"inputs":[],"output":{"name":"hashset"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out\nof the set in arbitrary order. The set cannot be used after calling\nthis.",148,null],[11,"clone","","",149,null],[11,"next","","",149,null],[11,"size_hint","","",149,null],[11,"len","","",149,null],[11,"next","","",150,null],[11,"size_hint","","",150,null],[11,"len","","",150,null],[11,"next","","",151,null],[11,"size_hint","","",151,null],[11,"len","","",151,null],[11,"clone","","",152,null],[11,"next","","",152,null],[11,"size_hint","","",152,null],[11,"clone","","",153,null],[11,"next","","",153,null],[11,"size_hint","","",153,null],[11,"clone","","",154,null],[11,"next","","",154,null],[11,"size_hint","","",154,null],[11,"clone","","",155,null],[11,"next","","",155,null],[11,"size_hint","","",155,null],[11,"drop","collections::binary_heap","",156,null],[11,"deref","","",156,null],[11,"deref_mut","","",156,null],[11,"clone","","",157,null],[11,"clone_from","","",157,null],[11,"default","","",157,{"inputs":[],"output":{"name":"binaryheap"}}],[11,"fmt","","",157,null],[11,"new","","Creates an empty `BinaryHeap` as a max-heap.",157,{"inputs":[],"output":{"name":"binaryheap"}}],[11,"with_capacity","","Creates an empty `BinaryHeap` with a specific capacity.\nThis preallocates enough memory for `capacity` elements,\nso that the `BinaryHeap` does not have to be reallocated\nuntil it contains at least that many values.",157,{"inputs":[{"name":"usize"}],"output":{"name":"binaryheap"}}],[11,"iter","","Returns an iterator visiting all values in the underlying vector, in\narbitrary order.",157,null],[11,"peek","","Returns the greatest item in the binary heap, or `None` if it is empty.",157,null],[11,"peek_mut","","Returns a mutable reference to the greatest item in the binary heap, or\n`None` if it is empty.",157,null],[11,"capacity","","Returns the number of elements the binary heap can hold without reallocating.",157,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the\ngiven `BinaryHeap`. Does nothing if the capacity is already sufficient.",157,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the\n`BinaryHeap`. The collection may reserve more space to avoid frequent reallocations.",157,null],[11,"shrink_to_fit","","Discards as much additional capacity as possible.",157,null],[11,"pop","","Removes the greatest item from the binary heap and returns it, or `None` if it\nis empty.",157,null],[11,"push","","Pushes an item onto the binary heap.",157,null],[11,"push_pop","","Pushes an item onto the binary heap, then pops the greatest item off the queue in\nan optimized fashion.",157,null],[11,"replace","","Pops the greatest item off the binary heap, then pushes an item onto the queue in\nan optimized fashion. The push is done regardless of whether the binary heap\nwas empty.",157,null],[11,"into_vec","","Consumes the `BinaryHeap` and returns the underlying vector\nin arbitrary order.",157,null],[11,"into_sorted_vec","","Consumes the `BinaryHeap` and returns a vector in sorted\n(ascending) order.",157,null],[11,"len","","Returns the length of the binary heap.",157,null],[11,"is_empty","","Checks if the binary heap is empty.",157,null],[11,"drain","","Clears the binary heap, returning an iterator over the removed elements.",157,null],[11,"clear","","Drops all items from the binary heap.",157,null],[11,"append","","Moves all the elements of `other` into `self`, leaving `other` empty.",157,null],[11,"clone","","",158,null],[11,"next","","",158,null],[11,"size_hint","","",158,null],[11,"next_back","","",158,null],[11,"clone","","",159,null],[11,"next","","",159,null],[11,"size_hint","","",159,null],[11,"next_back","","",159,null],[11,"next","","",160,null],[11,"size_hint","","",160,null],[11,"next_back","","",160,null],[11,"from","","",157,{"inputs":[{"name":"vec"}],"output":{"name":"binaryheap"}}],[11,"from","collections::vec","",161,{"inputs":[{"name":"binaryheap"}],"output":{"name":"vec"}}],[11,"from_iter","collections::binary_heap","",157,{"inputs":[{"name":"i"}],"output":{"name":"binaryheap"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of\nthe binary heap in arbitrary order. The binary heap cannot be used\nafter calling this.",157,null],[11,"extend","","",157,null],[11,"extend","","",157,null],[11,"clone","collections::vec_deque","",162,null],[11,"drop","","",162,null],[11,"default","","",162,{"inputs":[],"output":{"name":"vecdeque"}}],[11,"new","","Creates an empty `VecDeque`.",162,{"inputs":[],"output":{"name":"vecdeque"}}],[11,"with_capacity","","Creates an empty `VecDeque` with space for at least `n` elements.",162,{"inputs":[{"name":"usize"}],"output":{"name":"vecdeque"}}],[11,"get","","Retrieves an element in the `VecDeque` by index.",162,null],[11,"get_mut","","Retrieves an element in the `VecDeque` mutably by index.",162,null],[11,"swap","","Swaps elements at indices `i` and `j`.",162,null],[11,"capacity","","Returns the number of elements the `VecDeque` can hold without\nreallocating.",162,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the\ngiven `VecDeque`. Does nothing if the capacity is already sufficient.",162,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the given\n`VecDeque`. The collection may reserve more space to avoid frequent reallocations.",162,null],[11,"shrink_to_fit","","Shrinks the capacity of the `VecDeque` as much as possible.",162,null],[11,"truncate","","Shortens a `VecDeque`, dropping excess elements from the back.",162,null],[11,"iter","","Returns a front-to-back iterator.",162,null],[11,"iter_mut","","Returns a front-to-back iterator that returns mutable references.",162,null],[11,"as_slices","","Returns a pair of slices which contain, in order, the contents of the\n`VecDeque`.",162,null],[11,"as_mut_slices","","Returns a pair of slices which contain, in order, the contents of the\n`VecDeque`.",162,null],[11,"len","","Returns the number of elements in the `VecDeque`.",162,null],[11,"is_empty","","Returns true if the buffer contains no elements",162,null],[11,"drain","","Create a draining iterator that removes the specified range in the\n`VecDeque` and yields the removed items.",162,null],[11,"clear","","Clears the buffer, removing all values.",162,null],[11,"contains","","Returns `true` if the `VecDeque` contains an element equal to the\ngiven value.",162,null],[11,"front","","Provides a reference to the front element, or `None` if the sequence is\nempty.",162,null],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the\nsequence is empty.",162,null],[11,"back","","Provides a reference to the back element, or `None` if the sequence is\nempty.",162,null],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the\nsequence is empty.",162,null],[11,"pop_front","","Removes the first element and returns it, or `None` if the sequence is\nempty.",162,null],[11,"push_front","","Inserts an element first in the sequence.",162,null],[11,"push_back","","Appends an element to the back of a buffer",162,null],[11,"pop_back","","Removes the last element from a buffer and returns it, or `None` if\nit is empty.",162,null],[11,"swap_remove_back","","Removes an element from anywhere in the `VecDeque` and returns it, replacing it with the\nlast element.",162,null],[11,"swap_remove_front","","Removes an element from anywhere in the `VecDeque` and returns it,\nreplacing it with the first element.",162,null],[11,"insert","","Inserts an element at `index` within the `VecDeque`. Whichever\nend is closer to the insertion point will be moved to make room,\nand all the affected elements will be moved to new positions.",162,null],[11,"remove","","Removes and returns the element at `index` from the `VecDeque`.\nWhichever end is closer to the removal point will be moved to make\nroom, and all the affected elements will be moved to new positions.\nReturns `None` if `index` is out of bounds.",162,null],[11,"split_off","","Splits the collection into two at the given index.",162,null],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",162,null],[11,"retain","","Retains only the elements specified by the predicate.",162,null],[11,"resize","","Modifies the `VecDeque` in-place so that `len()` is equal to new_len,\neither by removing excess elements or by appending copies of a value to the back.",162,null],[11,"clone","","",163,null],[11,"next","","",163,null],[11,"size_hint","","",163,null],[11,"next_back","","",163,null],[11,"next","","",164,null],[11,"size_hint","","",164,null],[11,"next_back","","",164,null],[11,"clone","","",165,null],[11,"next","","",165,null],[11,"size_hint","","",165,null],[11,"next_back","","",165,null],[11,"drop","","",166,null],[11,"next","","",166,null],[11,"size_hint","","",166,null],[11,"next_back","","",166,null],[11,"eq","","",162,null],[11,"partial_cmp","","",162,null],[11,"cmp","","",162,null],[11,"hash","","",162,null],[11,"index","","",162,null],[11,"index_mut","","",162,null],[11,"from_iter","","",162,{"inputs":[{"name":"t"}],"output":{"name":"vecdeque"}}],[11,"into_iter","","Consumes the list into a front-to-back iterator yielding elements by\nvalue.",162,null],[11,"extend","","",162,null],[11,"extend","","",162,null],[11,"fmt","","",162,null],[11,"from","","",162,{"inputs":[{"name":"vec"}],"output":{"name":"vecdeque"}}],[11,"from","collections::vec","",161,{"inputs":[{"name":"vecdeque"}],"output":{"name":"vec"}}],[11,"clone","collections::linked_list","",167,null],[11,"clone","","",168,null],[11,"default","","",169,{"inputs":[],"output":{"name":"linkedlist"}}],[11,"new","","Creates an empty `LinkedList`.",169,{"inputs":[],"output":{"name":"linkedlist"}}],[11,"append","","Moves all elements from `other` to the end of the list.",169,null],[11,"iter","","Provides a forward iterator.",169,null],[11,"iter_mut","","Provides a forward iterator with mutable references.",169,null],[11,"is_empty","","Returns `true` if the `LinkedList` is empty.",169,null],[11,"len","","Returns the length of the `LinkedList`.",169,null],[11,"clear","","Removes all elements from the `LinkedList`.",169,null],[11,"contains","","Returns `true` if the `LinkedList` contains an element equal to the\ngiven value.",169,null],[11,"front","","Provides a reference to the front element, or `None` if the list is\nempty.",169,null],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the list\nis empty.",169,null],[11,"back","","Provides a reference to the back element, or `None` if the list is\nempty.",169,null],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the list\nis empty.",169,null],[11,"push_front","","Adds an element first in the list.",169,null],[11,"pop_front","","Removes the first element and returns it, or `None` if the list is\nempty.",169,null],[11,"push_back","","Appends an element to the back of a list",169,null],[11,"pop_back","","Removes the last element from a list and returns it, or `None` if\nit is empty.",169,null],[11,"split_off","","Splits the list into two at the given index. Returns everything after the given index,\nincluding the index.",169,null],[11,"front_place","","Returns a place for insertion at the front of the list.",169,null],[11,"back_place","","Returns a place for insertion at the back of the list.",169,null],[11,"drop","","",169,null],[11,"next","","",167,null],[11,"size_hint","","",167,null],[11,"next_back","","",167,null],[11,"next","","",170,null],[11,"size_hint","","",170,null],[11,"next_back","","",170,null],[11,"insert_next","","Inserts `elt` just after the element most recently returned by `.next()`.\nThe inserted element does not appear in the iteration.",170,null],[11,"peek_next","","Provides a reference to the next element, without changing the iterator.",170,null],[11,"next","","",168,null],[11,"size_hint","","",168,null],[11,"next_back","","",168,null],[11,"from_iter","","",169,{"inputs":[{"name":"t"}],"output":{"name":"linkedlist"}}],[11,"into_iter","","Consumes the list into an iterator yielding elements by value.",169,null],[11,"extend","","",169,null],[11,"extend","","",169,null],[11,"eq","","",169,null],[11,"ne","","",169,null],[11,"partial_cmp","","",169,null],[11,"cmp","","",169,null],[11,"clone","","",169,null],[11,"fmt","","",169,null],[11,"hash","","",169,null],[11,"make_place","","",171,null],[11,"pointer","","",171,null],[11,"finalize","","",171,null],[11,"make_place","","",172,null],[11,"pointer","","",172,null],[11,"finalize","","",172,null],[11,"next","std::env","",173,null],[11,"size_hint","","",173,null],[11,"next","","",174,null],[11,"size_hint","","",174,null],[11,"clone","","",175,null],[11,"eq","","",175,null],[11,"ne","","",175,null],[11,"fmt","","",175,null],[11,"fmt","","",175,null],[11,"description","","",175,null],[11,"next","","",176,null],[11,"size_hint","","",176,null],[11,"fmt","","",177,null],[11,"fmt","","",177,null],[11,"description","","",177,null],[11,"next","","",178,null],[11,"size_hint","","",178,null],[11,"len","","",178,null],[11,"next","","",179,null],[11,"size_hint","","",179,null],[11,"len","","",179,null],[11,"clone","std::ffi::c_str","",180,null],[11,"hash","","",180,null],[11,"cmp","","",180,null],[11,"partial_cmp","","",180,null],[11,"lt","","",180,null],[11,"le","","",180,null],[11,"gt","","",180,null],[11,"ge","","",180,null],[11,"eq","","",180,null],[11,"ne","","",180,null],[11,"hash","","",181,null],[11,"fmt","","",182,null],[11,"eq","","",182,null],[11,"ne","","",182,null],[11,"clone","","",182,null],[11,"fmt","","",183,null],[11,"eq","","",183,null],[11,"ne","","",183,null],[11,"clone","","",183,null],[11,"fmt","","",184,null],[11,"eq","","",184,null],[11,"ne","","",184,null],[11,"clone","","",184,null],[11,"new","","Creates a new C-compatible string from a container of bytes.",180,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[11,"from_vec_unchecked","","Creates a C-compatible string from a byte vector without checking for\ninterior 0 bytes.",180,{"inputs":[{"name":"vec"}],"output":{"name":"cstring"}}],[11,"from_raw","","Retakes ownership of a `CString` that was transferred to C.",180,null],[11,"into_raw","","Transfers ownership of the string to a C caller.",180,null],[11,"into_string","","Converts the `CString` into a `String` if it contains valid Unicode data.",180,null],[11,"into_bytes","","Returns the underlying byte buffer.",180,null],[11,"into_bytes_with_nul","","Equivalent to the `into_bytes` function except that the returned vector\nincludes the trailing nul byte.",180,null],[11,"as_bytes","","Returns the contents of this `CString` as a slice of bytes.",180,null],[11,"as_bytes_with_nul","","Equivalent to the `as_bytes` function except that the returned slice\nincludes the trailing nul byte.",180,null],[11,"from_ptr","","Casts a raw C string to a safe C string wrapper.",181,null],[11,"from_bytes_with_nul","","Creates a C string wrapper from a byte slice.",181,null],[11,"from_bytes_with_nul_unchecked","","Unsafely creates a C string wrapper from a byte slice.",181,null],[11,"as_ptr","","Returns the inner pointer to this C string.",181,null],[11,"to_bytes","","Converts this C string to a byte slice.",181,null],[11,"to_bytes_with_nul","","Converts this C string to a byte slice containing the trailing 0 byte.",181,null],[11,"to_str","","Yields a `&amp;str` slice if the `CStr` contains valid UTF-8.",181,null],[11,"to_string_lossy","","Converts a `CStr` into a `Cow&lt;str&gt;`.",181,null],[11,"deref","","",180,null],[11,"fmt","","",180,null],[11,"from","collections::vec","",161,{"inputs":[{"name":"cstring"}],"output":{"name":"vec"}}],[11,"fmt","std::ffi::c_str","",181,null],[11,"default","","",180,{"inputs":[],"output":{"name":"cstring"}}],[11,"borrow","","",180,null],[11,"nul_position","","Returns the position of the nul byte in the slice that was provided to\n`CString::new`.",182,null],[11,"into_vec","","Consumes this error, returning the underlying vector of bytes which\ngenerated the error in the first place.",182,null],[11,"description","","",182,null],[11,"fmt","","",182,null],[11,"from","std::io::error","",185,{"inputs":[{"name":"nulerror"}],"output":{"name":"error"}}],[11,"into_cstring","std::ffi::c_str","Consumes this error, returning original `CString` which generated the\nerror.",184,null],[11,"utf8_error","","Access the underlying UTF-8 error that was the cause of this error.",184,null],[11,"description","","",184,null],[11,"cause","","",184,null],[11,"fmt","","",184,null],[11,"eq","","",181,null],[11,"partial_cmp","","",181,null],[11,"cmp","","",181,null],[11,"to_owned","","",181,null],[11,"from","","",180,{"inputs":[{"name":"cstr"}],"output":{"name":"cstring"}}],[11,"index","","",180,null],[11,"as_ref","","",181,null],[11,"as_ref","","",180,null],[11,"clone","std::ffi::os_str","",186,null],[11,"new","","Constructs a new empty `OsString`.",186,{"inputs":[],"output":{"name":"osstring"}}],[11,"as_os_str","","Converts to an `OsStr` slice.",186,null],[11,"into_string","","Converts the `OsString` into a `String` if it contains valid Unicode data.",186,null],[11,"push","","Extends the string with the given `&amp;OsStr` slice.",186,null],[11,"with_capacity","","Creates a new `OsString` with the given capacity.",186,{"inputs":[{"name":"usize"}],"output":{"name":"osstring"}}],[11,"clear","","Truncates the `OsString` to zero length.",186,null],[11,"capacity","","Returns the capacity this `OsString` can hold without reallocating.",186,null],[11,"reserve","","Reserves capacity for at least `additional` more capacity to be inserted\nin the given `OsString`.",186,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more capacity to\nbe inserted in the given `OsString`. Does nothing if the capacity is\nalready sufficient.",186,null],[11,"from","","",186,{"inputs":[{"name":"string"}],"output":{"name":"osstring"}}],[11,"from","","",186,{"inputs":[{"name":"t"}],"output":{"name":"osstring"}}],[11,"index","","",186,null],[11,"new","","Coerces into an `OsStr` slice.",187,{"inputs":[{"name":"s"}],"output":{"name":"osstr"}}],[11,"to_str","","Yields a `&amp;str` slice if the `OsStr` is valid Unicode.",187,null],[11,"to_string_lossy","","Converts an `OsStr` to a `Cow&lt;str&gt;`.",187,null],[11,"to_os_string","","Copies the slice into an owned `OsString`.",187,null],[11,"is_empty","","Checks whether the `OsStr` is empty.",187,null],[11,"len","","Returns the length of this `OsStr`.",187,null],[11,"deref","","",186,null],[11,"default","","",186,{"inputs":[],"output":{"name":"osstring"}}],[11,"fmt","","",186,null],[11,"eq","","",186,null],[11,"eq","","",186,null],[11,"partial_cmp","","",186,null],[11,"lt","","",186,null],[11,"le","","",186,null],[11,"gt","","",186,null],[11,"ge","","",186,null],[11,"partial_cmp","","",186,null],[11,"cmp","","",186,null],[11,"hash","","",186,null],[11,"eq","","",187,null],[11,"eq","","",187,null],[11,"partial_cmp","","",187,null],[11,"lt","","",187,null],[11,"le","","",187,null],[11,"gt","","",187,null],[11,"ge","","",187,null],[11,"partial_cmp","","",187,null],[11,"cmp","","",187,null],[11,"eq","","",186,null],[11,"eq","","",187,null],[11,"partial_cmp","","",186,null],[11,"partial_cmp","","",187,null],[11,"eq","","",186,null],[11,"partial_cmp","","",186,null],[11,"eq","collections::borrow","",188,null],[11,"eq","std::ffi::os_str","",187,null],[11,"partial_cmp","collections::borrow","",188,null],[11,"partial_cmp","std::ffi::os_str","",187,null],[11,"eq","collections::borrow","",188,null],[11,"partial_cmp","","",188,null],[11,"eq","","",188,null],[11,"eq","std::ffi::os_str","",186,null],[11,"partial_cmp","collections::borrow","",188,null],[11,"partial_cmp","std::ffi::os_str","",186,null],[11,"hash","","",187,null],[11,"fmt","","",187,null],[11,"borrow","","",186,null],[11,"to_owned","","",187,null],[11,"as_ref","","",187,null],[11,"as_ref","","",186,null],[11,"as_ref","collections::string","",189,null],[11,"clone","std::fs","",190,null],[11,"clone","","",191,null],[11,"fmt","","",192,null],[11,"eq","","",192,null],[11,"ne","","",192,null],[11,"clone","","",192,null],[11,"hash","","",193,null],[11,"eq","","",193,null],[11,"ne","","",193,null],[11,"clone","","",193,null],[11,"open","","Attempts to open a file in read-only mode.",194,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"create","","Opens a file in write-only mode.",194,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"sync_all","","Attempts to sync all OS-internal metadata to disk.",194,null],[11,"sync_data","","This function is similar to `sync_all`, except that it may not\nsynchronize file metadata to the filesystem.",194,null],[11,"set_len","","Truncates or extends the underlying file, updating the size of\nthis file to become `size`.",194,null],[11,"metadata","","Queries metadata about the underlying file.",194,null],[11,"try_clone","","Creates a new independently owned handle to the underlying file.",194,null],[11,"fmt","","",194,null],[11,"read","","",194,null],[11,"read_to_end","","",194,null],[11,"write","","",194,null],[11,"flush","","",194,null],[11,"seek","","",194,null],[11,"new","","Creates a blank new set of options ready for configuration.",191,{"inputs":[],"output":{"name":"openoptions"}}],[11,"read","","Sets the option for read access.",191,null],[11,"write","","Sets the option for write access.",191,null],[11,"append","","Sets the option for the append mode.",191,null],[11,"truncate","","Sets the option for truncating a previous file.",191,null],[11,"create","","Sets the option for creating a new file.",191,null],[11,"create_new","","Sets the option to always create a new file.",191,null],[11,"open","","Opens a file at `path` with the options specified by `self`.",191,null],[11,"file_type","","Returns the file type for this metadata.",190,null],[11,"is_dir","","Returns whether this metadata is for a directory.",190,null],[11,"is_file","","Returns whether this metadata is for a regular file.",190,null],[11,"len","","Returns the size of the file, in bytes, this metadata is for.",190,null],[11,"permissions","","Returns the permissions of the file this metadata is for.",190,null],[11,"modified","","Returns the last modification time listed in this metadata.",190,null],[11,"accessed","","Returns the last access time of this metadata.",190,null],[11,"created","","Returns the creation time listed in the this metadata.",190,null],[11,"readonly","","Returns whether these permissions describe a readonly file.",192,null],[11,"set_readonly","","Modifies the readonly flag for this set of permissions.",192,null],[11,"is_dir","","Test whether this file type represents a directory.",193,null],[11,"is_file","","Test whether this file type represents a regular file.",193,null],[11,"is_symlink","","Test whether this file type represents a symbolic link.",193,null],[11,"next","","",195,null],[11,"path","","Returns the full path to the file that this entry represents.",196,null],[11,"metadata","","Return the metadata for the file that this entry points at.",196,null],[11,"file_type","","Return the file type for the file that this entry points at.",196,null],[11,"file_name","","Returns the bare file name of this directory entry without any other\nleading path component.",196,null],[11,"new","","Creates a new set of options with default mode/security settings for all\nplatforms and also non-recursive.",197,{"inputs":[],"output":{"name":"dirbuilder"}}],[11,"recursive","","Indicate that directories create should be created recursively, creating\nall parent directories if they do not exist with the same security and\npermissions settings.",197,null],[11,"create","","Create the specified directory with the options configured in this\nbuilder.",197,null],[11,"new","std::io::buffered","Creates a new `BufReader` with a default buffer capacity.",198,{"inputs":[{"name":"r"}],"output":{"name":"bufreader"}}],[11,"with_capacity","","Creates a new `BufReader` with the specified buffer capacity.",198,{"inputs":[{"name":"usize"},{"name":"r"}],"output":{"name":"bufreader"}}],[11,"get_ref","","Gets a reference to the underlying reader.",198,null],[11,"get_mut","","Gets a mutable reference to the underlying reader.",198,null],[11,"into_inner","","Unwraps this `BufReader`, returning the underlying reader.",198,null],[11,"read","","",198,null],[11,"fill_buf","","",198,null],[11,"consume","","",198,null],[11,"fmt","","",198,null],[11,"seek","","Seek to an offset, in bytes, in the underlying reader.",198,null],[11,"fmt","","",199,null],[11,"new","","Creates a new `BufWriter` with a default buffer capacity.",200,{"inputs":[{"name":"w"}],"output":{"name":"bufwriter"}}],[11,"with_capacity","","Creates a new `BufWriter` with the specified buffer capacity.",200,{"inputs":[{"name":"usize"},{"name":"w"}],"output":{"name":"bufwriter"}}],[11,"get_ref","","Gets a reference to the underlying writer.",200,null],[11,"get_mut","","Gets a mutable reference to the underlying writer.",200,null],[11,"into_inner","","Unwraps this `BufWriter`, returning the underlying writer.",200,null],[11,"write","","",200,null],[11,"flush","","",200,null],[11,"fmt","","",200,null],[11,"seek","","Seek to the offset, in bytes, in the underlying writer.",200,null],[11,"drop","","",200,null],[11,"error","","Returns the error which caused the call to `into_inner()` to fail.",199,null],[11,"into_inner","","Returns the buffered writer instance which generated the error.",199,null],[11,"from","std::io::error","",185,{"inputs":[{"name":"intoinnererror"}],"output":{"name":"error"}}],[11,"description","std::io::buffered","",199,null],[11,"fmt","","",199,null],[11,"new","","Creates a new `LineWriter`.",201,{"inputs":[{"name":"w"}],"output":{"name":"linewriter"}}],[11,"with_capacity","","Creates a new `LineWriter` with a specified capacity for the internal\nbuffer.",201,{"inputs":[{"name":"usize"},{"name":"w"}],"output":{"name":"linewriter"}}],[11,"get_ref","","Gets a reference to the underlying writer.",201,null],[11,"get_mut","","Gets a mutable reference to the underlying writer.",201,null],[11,"into_inner","","Unwraps this `LineWriter`, returning the underlying writer.",201,null],[11,"write","","",201,null],[11,"flush","","",201,null],[11,"fmt","","",201,null],[11,"fmt","std::io::cursor","",202,null],[11,"clone","","",202,null],[11,"new","","Creates a new cursor wrapping the provided underlying I/O object.",202,{"inputs":[{"name":"t"}],"output":{"name":"cursor"}}],[11,"into_inner","","Consumes this cursor, returning the underlying value.",202,null],[11,"get_ref","","Gets a reference to the underlying value in this cursor.",202,null],[11,"get_mut","","Gets a mutable reference to the underlying value in this cursor.",202,null],[11,"position","","Returns the current position of this cursor.",202,null],[11,"set_position","","Sets the position of this cursor.",202,null],[11,"seek","","",202,null],[11,"read","","",202,null],[11,"fill_buf","","",202,null],[11,"consume","","",202,null],[11,"write","","",202,null],[11,"flush","","",202,null],[11,"write","","",202,null],[11,"flush","","",202,null],[11,"write","","",202,null],[11,"flush","","",202,null],[11,"fmt","std::io::error","",185,null],[11,"fmt","","",203,null],[11,"clone","","",203,null],[11,"eq","","",203,null],[11,"new","","Creates a new I/O error from a known kind of error as well as an\narbitrary error payload.",185,{"inputs":[{"name":"errorkind"},{"name":"e"}],"output":{"name":"error"}}],[11,"last_os_error","","Returns an error representing the last OS error which occurred.",185,{"inputs":[],"output":{"name":"error"}}],[11,"from_raw_os_error","","Creates a new instance of an `Error` from a particular OS error code.",185,{"inputs":[{"name":"i32"}],"output":{"name":"error"}}],[11,"raw_os_error","","Returns the OS error that this error represents (if any).",185,null],[11,"get_ref","","Returns a reference to the inner error wrapped by this error (if any).",185,null],[11,"get_mut","","Returns a mutable reference to the inner error wrapped by this error\n(if any).",185,null],[11,"into_inner","","Consumes the `Error`, returning its inner error (if any).",185,null],[11,"kind","","Returns the corresponding `ErrorKind` for this error.",185,null],[11,"fmt","","",185,null],[11,"description","","",185,null],[11,"cause","","",185,null],[11,"read","alloc::boxed","",122,null],[11,"read_to_end","","",122,null],[11,"read_to_string","","",122,null],[11,"read_exact","","",122,null],[11,"write","","",122,null],[11,"flush","","",122,null],[11,"write_all","","",122,null],[11,"write_fmt","","",122,null],[11,"seek","","",122,null],[11,"fill_buf","","",122,null],[11,"consume","","",122,null],[11,"read_until","","",122,null],[11,"read_line","","",122,null],[11,"write","collections::vec","",161,null],[11,"write_all","","",161,null],[11,"flush","","",161,null],[11,"read","std::io::util","",204,null],[11,"fill_buf","","",204,null],[11,"consume","","",204,null],[11,"read","","",205,null],[11,"write","","",206,null],[11,"flush","","",206,null],[11,"lock","std::io::stdio","Locks this handle to the standard input stream, returning a readable\nguard.",207,null],[11,"read_line","","Locks this handle and reads a line of input into the specified buffer.",207,null],[11,"read","","",207,null],[11,"read_to_end","","",207,null],[11,"read_to_string","","",207,null],[11,"read_exact","","",207,null],[11,"read","","",208,null],[11,"read_to_end","","",208,null],[11,"fill_buf","","",208,null],[11,"consume","","",208,null],[11,"lock","","Locks this handle to the standard output stream, returning a writable\nguard.",209,null],[11,"write","","",209,null],[11,"flush","","",209,null],[11,"write_all","","",209,null],[11,"write_fmt","","",209,null],[11,"write","","",210,null],[11,"flush","","",210,null],[11,"lock","","Locks this handle to the standard error stream, returning a writable\nguard.",211,null],[11,"write","","",211,null],[11,"flush","","",211,null],[11,"write_all","","",211,null],[11,"write_fmt","","",211,null],[11,"write","","",212,null],[11,"flush","","",212,null],[11,"fmt","std::io","",213,null],[11,"clone","","",213,null],[11,"eq","","",213,null],[11,"ne","","",213,null],[11,"read","","",214,null],[11,"fill_buf","","",214,null],[11,"consume","","",214,null],[11,"limit","","Returns the number of bytes that can be read before this instance will\nreturn EOF.",215,null],[11,"read","","",215,null],[11,"fill_buf","","",215,null],[11,"consume","","",215,null],[11,"next","","",216,null],[11,"fmt","","",217,null],[11,"next","","",218,null],[11,"description","","",217,null],[11,"cause","","",217,null],[11,"fmt","","",217,null],[11,"next","","",219,null],[11,"next","","",220,null],[11,"cmp","std::net::ip","",221,null],[11,"partial_cmp","","",221,null],[11,"lt","","",221,null],[11,"le","","",221,null],[11,"gt","","",221,null],[11,"ge","","",221,null],[11,"hash","","",221,null],[11,"fmt","","",221,null],[11,"eq","","",221,null],[11,"ne","","",221,null],[11,"clone","","",221,null],[11,"fmt","","",222,null],[11,"hash","","",222,null],[11,"clone","","",222,null],[11,"eq","","",222,null],[11,"new","","Creates a new IPv4 address from four eight-bit octets.",223,{"inputs":[{"name":"u8"},{"name":"u8"},{"name":"u8"},{"name":"u8"}],"output":{"name":"ipv4addr"}}],[11,"octets","","Returns the four eight-bit integers that make up this address.",223,null],[11,"is_unspecified","","Returns true for the special &#39;unspecified&#39; address (0.0.0.0).",223,null],[11,"is_loopback","","Returns true if this is a loopback address (127.0.0.0/8).",223,null],[11,"is_private","","Returns true if this is a private address.",223,null],[11,"is_link_local","","Returns true if the address is link-local (169.254.0.0/16).",223,null],[11,"is_global","","Returns true if the address appears to be globally routable.\nSee [iana-ipv4-special-registry][ipv4-sr].\n[ipv4-sr]: http://goo.gl/RaZ7lg",223,null],[11,"is_multicast","","Returns true if this is a multicast address (224.0.0.0/4).",223,null],[11,"is_broadcast","","Returns true if this is a broadcast address (255.255.255.255).",223,null],[11,"is_documentation","","Returns true if this address is in a range designated for documentation.",223,null],[11,"to_ipv6_compatible","","Converts this address to an IPv4-compatible IPv6 address.",223,null],[11,"to_ipv6_mapped","","Converts this address to an IPv4-mapped IPv6 address.",223,null],[11,"fmt","","",221,null],[11,"fmt","","",223,null],[11,"fmt","","",223,null],[11,"clone","","",223,null],[11,"eq","","",223,null],[11,"hash","","",223,null],[11,"partial_cmp","","",223,null],[11,"cmp","","",223,null],[11,"from","","",223,{"inputs":[{"name":"u32"}],"output":{"name":"ipv4addr"}}],[11,"from","","",223,null],[11,"new","","Creates a new IPv6 address from eight 16-bit segments.",224,{"inputs":[{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"}],"output":{"name":"ipv6addr"}}],[11,"segments","","Returns the eight 16-bit segments that make up this address.",224,null],[11,"is_unspecified","","Returns true for the special &#39;unspecified&#39; address (::).",224,null],[11,"is_loopback","","Returns true if this is a loopback address (::1).",224,null],[11,"is_global","","Returns true if the address appears to be globally routable.",224,null],[11,"is_unique_local","","Returns true if this is a unique local address (fc00::/7).",224,null],[11,"is_unicast_link_local","","Returns true if the address is unicast and link-local (fe80::/10).",224,null],[11,"is_unicast_site_local","","Returns true if this is a deprecated unicast site-local address\n(fec0::/10).",224,null],[11,"is_documentation","","Returns true if this is an address reserved for documentation\n(2001:db8::/32).",224,null],[11,"is_unicast_global","","Returns true if the address is a globally routable unicast address.",224,null],[11,"multicast_scope","","Returns the address&#39;s multicast scope if the address is multicast.",224,null],[11,"is_multicast","","Returns true if this is a multicast address (ff00::/8).",224,null],[11,"to_ipv4","","Converts this address to an IPv4 address. Returns None if this address is\nneither IPv4-compatible or IPv4-mapped.",224,null],[11,"octets","","Returns the sixteen eight-bit integers the IPv6 address consists of.",224,null],[11,"fmt","","",224,null],[11,"fmt","","",224,null],[11,"clone","","",224,null],[11,"eq","","",224,null],[11,"hash","","",224,null],[11,"partial_cmp","","",224,null],[11,"cmp","","",224,null],[11,"from","","",224,null],[11,"fmt","std::net::addr","",225,null],[11,"hash","","",225,null],[11,"eq","","",225,null],[11,"ne","","",225,null],[11,"clone","","",225,null],[11,"new","","Creates a new socket address from the (ip, port) pair.",225,{"inputs":[{"name":"ipaddr"},{"name":"u16"}],"output":{"name":"socketaddr"}}],[11,"ip","","Returns the IP address associated with this socket address.",225,null],[11,"set_ip","","Change the IP address associated with this socket address.",225,null],[11,"port","","Returns the port number associated with this socket address.",225,null],[11,"set_port","","Change the port number associated with this socket address.",225,null],[11,"new","","Creates a new socket address from the (ip, port) pair.",226,{"inputs":[{"name":"ipv4addr"},{"name":"u16"}],"output":{"name":"socketaddrv4"}}],[11,"ip","","Returns the IP address associated with this socket address.",226,null],[11,"set_ip","","Change the IP address associated with this socket address.",226,null],[11,"port","","Returns the port number associated with this socket address.",226,null],[11,"set_port","","Change the port number associated with this socket address.",226,null],[11,"new","","Creates a new socket address from the ip/port/flowinfo/scope_id\ncomponents.",227,{"inputs":[{"name":"ipv6addr"},{"name":"u16"},{"name":"u32"},{"name":"u32"}],"output":{"name":"socketaddrv6"}}],[11,"ip","","Returns the IP address associated with this socket address.",227,null],[11,"set_ip","","Change the IP address associated with this socket address.",227,null],[11,"port","","Returns the port number associated with this socket address.",227,null],[11,"set_port","","Change the port number associated with this socket address.",227,null],[11,"flowinfo","","Returns the flow information associated with this address,\ncorresponding to the `sin6_flowinfo` field in C.",227,null],[11,"set_flowinfo","","Change the flow information associated with this socket address.",227,null],[11,"scope_id","","Returns the scope ID associated with this address,\ncorresponding to the `sin6_scope_id` field in C.",227,null],[11,"set_scope_id","","Change the scope ID associated with this socket address.",227,null],[11,"fmt","","",225,null],[11,"fmt","","",226,null],[11,"fmt","","",226,null],[11,"fmt","","",227,null],[11,"fmt","","",227,null],[11,"clone","","",226,null],[11,"clone","","",227,null],[11,"eq","","",226,null],[11,"eq","","",227,null],[11,"hash","","",226,null],[11,"hash","","",227,null],[11,"to_socket_addrs","","",225,null],[11,"to_socket_addrs","","",226,null],[11,"to_socket_addrs","","",227,null],[11,"connect","std::net::tcp","Opens a TCP connection to a remote host.",228,{"inputs":[{"name":"a"}],"output":{"name":"result"}}],[11,"peer_addr","","Returns the socket address of the remote peer of this TCP connection.",228,null],[11,"local_addr","","Returns the socket address of the local half of this TCP connection.",228,null],[11,"shutdown","","Shuts down the read, write, or both halves of this connection.",228,null],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",228,null],[11,"set_read_timeout","","Sets the read timeout to the timeout specified.",228,null],[11,"set_write_timeout","","Sets the write timeout to the timeout specified.",228,null],[11,"read_timeout","","Returns the read timeout of this socket.",228,null],[11,"write_timeout","","Returns the write timeout of this socket.",228,null],[11,"set_nodelay","","Sets the value of the `TCP_NODELAY` option on this socket.",228,null],[11,"nodelay","","Gets the value of the `TCP_NODELAY` option on this socket.",228,null],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",228,null],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",228,null],[11,"take_error","","Get the value of the `SO_ERROR` option on this socket.",228,null],[11,"set_nonblocking","","Moves this TCP stream into or out of nonblocking mode.",228,null],[11,"read","","",228,null],[11,"read_to_end","","",228,null],[11,"write","","",228,null],[11,"flush","","",228,null],[11,"fmt","","",228,null],[11,"bind","","Creates a new `TcpListener` which will be bound to the specified\naddress.",229,{"inputs":[{"name":"a"}],"output":{"name":"result"}}],[11,"local_addr","","Returns the local socket address of this listener.",229,null],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",229,null],[11,"accept","","Accept a new incoming connection from this listener.",229,null],[11,"incoming","","Returns an iterator over the connections being received on this\nlistener.",229,null],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",229,null],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",229,null],[11,"set_only_v6","","Sets the value for the `IPV6_V6ONLY` option on this socket.",229,null],[11,"only_v6","","Gets the value of the `IPV6_V6ONLY` option for this socket.",229,null],[11,"take_error","","Get the value of the `SO_ERROR` option on this socket.",229,null],[11,"set_nonblocking","","Moves this TCP stream into or out of nonblocking mode.",229,null],[11,"next","","",230,null],[11,"fmt","","",229,null],[11,"bind","std::net::udp","Creates a UDP socket from the given address.",231,{"inputs":[{"name":"a"}],"output":{"name":"result"}}],[11,"recv_from","","Receives data from the socket. On success, returns the number of bytes\nread and the address from whence the data came.",231,null],[11,"send_to","","Sends data on the socket to the given address. On success, returns the\nnumber of bytes written.",231,null],[11,"local_addr","","Returns the socket address that this socket was created from.",231,null],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",231,null],[11,"set_read_timeout","","Sets the read timeout to the timeout specified.",231,null],[11,"set_write_timeout","","Sets the write timeout to the timeout specified.",231,null],[11,"read_timeout","","Returns the read timeout of this socket.",231,null],[11,"write_timeout","","Returns the write timeout of this socket.",231,null],[11,"set_broadcast","","Sets the value of the `SO_BROADCAST` option for this socket.",231,null],[11,"broadcast","","Gets the value of the `SO_BROADCAST` option for this socket.",231,null],[11,"set_multicast_loop_v4","","Sets the value of the `IP_MULTICAST_LOOP` option for this socket.",231,null],[11,"multicast_loop_v4","","Gets the value of the `IP_MULTICAST_LOOP` option for this socket.",231,null],[11,"set_multicast_ttl_v4","","Sets the value of the `IP_MULTICAST_TTL` option for this socket.",231,null],[11,"multicast_ttl_v4","","Gets the value of the `IP_MULTICAST_TTL` option for this socket.",231,null],[11,"set_multicast_loop_v6","","Sets the value of the `IPV6_MULTICAST_LOOP` option for this socket.",231,null],[11,"multicast_loop_v6","","Gets the value of the `IPV6_MULTICAST_LOOP` option for this socket.",231,null],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",231,null],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",231,null],[11,"join_multicast_v4","","Executes an operation of the `IP_ADD_MEMBERSHIP` type.",231,null],[11,"join_multicast_v6","","Executes an operation of the `IPV6_ADD_MEMBERSHIP` type.",231,null],[11,"leave_multicast_v4","","Executes an operation of the `IP_DROP_MEMBERSHIP` type.",231,null],[11,"leave_multicast_v6","","Executes an operation of the `IPV6_DROP_MEMBERSHIP` type.",231,null],[11,"take_error","","Get the value of the `SO_ERROR` option on this socket.",231,null],[11,"connect","","Connects this UDP socket to a remote address, allowing the `send` and\n`recv` syscalls to be used to send data and also applies filters to only\nreceive data from the specified address.",231,null],[11,"send","","Sends data on the socket to the remote address to which it is connected.",231,null],[11,"recv","","Receives data on the socket from the remote address to which it is\nconnected.",231,null],[11,"set_nonblocking","","Moves this UDP socket into or out of nonblocking mode.",231,null],[11,"fmt","","",231,null],[11,"from_str","std::net::ip","",221,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",223,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",224,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","std::net::addr","",226,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",227,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",225,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"eq","std::net::parser","",232,null],[11,"ne","","",232,null],[11,"clone","","",232,null],[11,"fmt","","",232,null],[11,"fmt","","",232,null],[11,"description","","",232,null],[11,"fmt","std::net","",233,null],[11,"eq","","",233,null],[11,"clone","","",233,null],[11,"next","","",234,null],[11,"clone","std::os::linux::raw::arch","",235,null],[11,"as_raw_stat","std::fs","",190,null],[11,"st_dev","","",190,null],[11,"st_ino","","",190,null],[11,"st_mode","","",190,null],[11,"st_nlink","","",190,null],[11,"st_uid","","",190,null],[11,"st_gid","","",190,null],[11,"st_rdev","","",190,null],[11,"st_size","","",190,null],[11,"st_atime","","",190,null],[11,"st_atime_nsec","","",190,null],[11,"st_mtime","","",190,null],[11,"st_mtime_nsec","","",190,null],[11,"st_ctime","","",190,null],[11,"st_ctime_nsec","","",190,null],[11,"st_blksize","","",190,null],[11,"st_blocks","","",190,null],[11,"as_raw_fd","","",194,null],[11,"from_raw_fd","","",194,{"inputs":[{"name":"i32"}],"output":{"name":"file"}}],[11,"into_raw_fd","","",194,null],[11,"as_raw_fd","std::net::tcp","",228,null],[11,"as_raw_fd","","",229,null],[11,"as_raw_fd","std::net::udp","",231,null],[11,"from_raw_fd","std::net::tcp","",228,{"inputs":[{"name":"i32"}],"output":{"name":"tcpstream"}}],[11,"from_raw_fd","","",229,{"inputs":[{"name":"i32"}],"output":{"name":"tcplistener"}}],[11,"from_raw_fd","std::net::udp","",231,{"inputs":[{"name":"i32"}],"output":{"name":"udpsocket"}}],[11,"into_raw_fd","std::net::tcp","",228,null],[11,"into_raw_fd","","",229,null],[11,"into_raw_fd","std::net::udp","",231,null],[11,"from_vec","std::ffi::os_str","",186,{"inputs":[{"name":"vec"}],"output":{"name":"osstring"}}],[11,"into_vec","","",186,null],[11,"from_bytes","","",187,null],[11,"as_bytes","","",187,null],[11,"mode","std::fs","",192,null],[11,"set_mode","","",192,null],[11,"from_mode","","",192,{"inputs":[{"name":"u32"}],"output":{"name":"permissions"}}],[11,"mode","","",191,null],[11,"custom_flags","","",191,null],[11,"dev","","",190,null],[11,"ino","","",190,null],[11,"mode","","",190,null],[11,"nlink","","",190,null],[11,"uid","","",190,null],[11,"gid","","",190,null],[11,"rdev","","",190,null],[11,"size","","",190,null],[11,"atime","","",190,null],[11,"atime_nsec","","",190,null],[11,"mtime","","",190,null],[11,"mtime_nsec","","",190,null],[11,"ctime","","",190,null],[11,"ctime_nsec","","",190,null],[11,"blksize","","",190,null],[11,"blocks","","",190,null],[11,"is_block_device","","",193,null],[11,"is_char_device","","",193,null],[11,"is_fifo","","",193,null],[11,"is_socket","","",193,null],[11,"ino","","",196,null],[11,"mode","","",197,null],[11,"uid","std::process","",236,null],[11,"gid","","",236,null],[11,"before_exec","","",236,null],[11,"exec","","",236,null],[11,"from_raw","","",237,{"inputs":[{"name":"i32"}],"output":{"name":"exitstatus"}}],[11,"signal","","",237,null],[11,"from_raw_fd","","",238,{"inputs":[{"name":"i32"}],"output":{"name":"stdio"}}],[11,"as_raw_fd","","",239,null],[11,"as_raw_fd","","",240,null],[11,"as_raw_fd","","",241,null],[11,"into_raw_fd","","",239,null],[11,"into_raw_fd","","",240,null],[11,"into_raw_fd","","",241,null],[11,"as_pthread_t","std::thread","",134,null],[11,"into_pthread_t","","",134,null],[11,"clone","std::sys::ext::net","",242,null],[11,"is_unnamed","","Returns true iff the address is unnamed.",242,null],[11,"as_pathname","","Returns the contents of this address if it is a `pathname` address.",242,null],[11,"fmt","","",242,null],[11,"fmt","","",243,null],[11,"connect","","Connects to the socket named by `path`.",243,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"pair","","Creates an unnamed pair of connected sockets.",243,{"inputs":[],"output":{"name":"result"}}],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",243,null],[11,"local_addr","","Returns the socket address of the local half of this connection.",243,null],[11,"peer_addr","","Returns the socket address of the remote half of this connection.",243,null],[11,"set_read_timeout","","Sets the read timeout for the socket.",243,null],[11,"set_write_timeout","","Sets the write timeout for the socket.",243,null],[11,"read_timeout","","Returns the read timeout of this socket.",243,null],[11,"write_timeout","","Returns the write timeout of this socket.",243,null],[11,"set_nonblocking","","Moves the socket into or out of nonblocking mode.",243,null],[11,"take_error","","Returns the value of the `SO_ERROR` option.",243,null],[11,"shutdown","","Shuts down the read, write, or both halves of this connection.",243,null],[11,"read","","",243,null],[11,"read_to_end","","",243,null],[11,"write","","",243,null],[11,"flush","","",243,null],[11,"as_raw_fd","","",243,null],[11,"from_raw_fd","","",243,{"inputs":[{"name":"i32"}],"output":{"name":"unixstream"}}],[11,"into_raw_fd","","",243,null],[11,"fmt","","",244,null],[11,"bind","","Creates a new `UnixListener` bound to the specified socket.",244,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"accept","","Accepts a new incoming connection to this listener.",244,null],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",244,null],[11,"local_addr","","Returns the local socket address of this listener.",244,null],[11,"set_nonblocking","","Moves the socket into or out of nonblocking mode.",244,null],[11,"take_error","","Returns the value of the `SO_ERROR` option.",244,null],[11,"incoming","","Returns an iterator over incoming connections.",244,null],[11,"as_raw_fd","","",244,null],[11,"from_raw_fd","","",244,{"inputs":[{"name":"i32"}],"output":{"name":"unixlistener"}}],[11,"into_raw_fd","","",244,null],[11,"fmt","","",245,null],[11,"next","","",245,null],[11,"size_hint","","",245,null],[11,"fmt","","",246,null],[11,"bind","","Creates a Unix datagram socket bound to the given path.",246,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"unbound","","Creates a Unix Datagram socket which is not bound to any address.",246,{"inputs":[],"output":{"name":"result"}}],[11,"pair","","Create an unnamed pair of connected sockets.",246,{"inputs":[],"output":{"name":"result"}}],[11,"connect","","Connects the socket to the specified address.",246,null],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",246,null],[11,"local_addr","","Returns the address of this socket.",246,null],[11,"peer_addr","","Returns the address of this socket&#39;s peer.",246,null],[11,"recv_from","","Receives data from the socket.",246,null],[11,"recv","","Receives data from the socket.",246,null],[11,"send_to","","Sends data on the socket to the specified address.",246,null],[11,"send","","Sends data on the socket to the socket&#39;s peer.",246,null],[11,"set_read_timeout","","Sets the read timeout for the socket.",246,null],[11,"set_write_timeout","","Sets the write timeout for the socket.",246,null],[11,"read_timeout","","Returns the read timeout of this socket.",246,null],[11,"write_timeout","","Returns the write timeout of this socket.",246,null],[11,"set_nonblocking","","Moves the socket into or out of nonblocking mode.",246,null],[11,"take_error","","Returns the value of the `SO_ERROR` option.",246,null],[11,"shutdown","","Shut down the read, write, or both halves of this connection.",246,null],[11,"as_raw_fd","","",246,null],[11,"from_raw_fd","","",246,{"inputs":[{"name":"i32"}],"output":{"name":"unixdatagram"}}],[11,"into_raw_fd","","",246,null],[11,"deref","std::panic","",247,null],[11,"deref_mut","","",247,null],[11,"call_once","","",247,null],[11,"eq","std::path","",248,null],[11,"ne","","",248,null],[11,"cmp","","",248,null],[11,"partial_cmp","","",248,null],[11,"lt","","",248,null],[11,"le","","",248,null],[11,"gt","","",248,null],[11,"ge","","",248,null],[11,"hash","","",248,null],[11,"fmt","","",248,null],[11,"clone","","",248,null],[11,"is_verbatim","","Determines if the prefix is verbatim, i.e. begins with `\\\\?\\`.",248,null],[11,"fmt","","",249,null],[11,"clone","","",249,null],[11,"kind","","The parsed prefix data.",249,null],[11,"as_os_str","","The raw `OsStr` slice for this prefix.",249,null],[11,"eq","","",249,null],[11,"partial_cmp","","",249,null],[11,"cmp","","",249,null],[11,"hash","","",249,null],[11,"fmt","","",250,null],[11,"hash","","",250,null],[11,"cmp","","",250,null],[11,"partial_cmp","","",250,null],[11,"lt","","",250,null],[11,"le","","",250,null],[11,"gt","","",250,null],[11,"ge","","",250,null],[11,"eq","","",250,null],[11,"ne","","",250,null],[11,"clone","","",250,null],[11,"as_os_str","","Extracts the underlying `OsStr` slice",250,null],[11,"as_ref","","",250,null],[11,"clone","","",251,null],[11,"clone","","",252,null],[11,"as_path","","Extracts a slice corresponding to the portion of the path remaining for iteration.",251,null],[11,"as_ref","","",251,null],[11,"as_ref","","",251,null],[11,"as_path","","Extracts a slice corresponding to the portion of the path remaining for iteration.",252,null],[11,"as_ref","","",252,null],[11,"as_ref","","",252,null],[11,"next","","",252,null],[11,"next_back","","",252,null],[11,"next","","",251,null],[11,"next_back","","",251,null],[11,"eq","","",251,null],[11,"partial_cmp","","",251,null],[11,"cmp","","",251,null],[11,"clone","","",253,null],[11,"new","","Allocates an empty `PathBuf`.",253,{"inputs":[],"output":{"name":"pathbuf"}}],[11,"as_path","","Coerces to a `Path` slice.",253,null],[11,"push","","Extends `self` with `path`.",253,null],[11,"pop","","Truncate `self` to `self.parent()`.",253,null],[11,"set_file_name","","Updates `self.file_name()` to `file_name`.",253,null],[11,"set_extension","","Updates `self.extension()` to `extension`.",253,null],[11,"into_os_string","","Consumes the `PathBuf`, yielding its internal `OsString` storage.",253,null],[11,"from","","",253,{"inputs":[{"name":"t"}],"output":{"name":"pathbuf"}}],[11,"from","","",253,{"inputs":[{"name":"osstring"}],"output":{"name":"pathbuf"}}],[11,"from","","",253,{"inputs":[{"name":"string"}],"output":{"name":"pathbuf"}}],[11,"from_iter","","",253,{"inputs":[{"name":"i"}],"output":{"name":"pathbuf"}}],[11,"extend","","",253,null],[11,"fmt","","",253,null],[11,"new","","Directly wrap a string slice as a `Path` slice.",254,{"inputs":[{"name":"s"}],"output":{"name":"path"}}],[11,"as_os_str","","Yields the underlying `OsStr` slice.",254,null],[11,"to_str","","Yields a `&amp;str` slice if the `Path` is valid unicode.",254,null],[11,"to_string_lossy","","Converts a `Path` to a `Cow&lt;str&gt;`.",254,null],[11,"to_path_buf","","Converts a `Path` to an owned `PathBuf`.",254,null],[11,"is_absolute","","A path is *absolute* if it is independent of the current directory.",254,null],[11,"is_relative","","A path is *relative* if it is not absolute.",254,null],[11,"has_root","","A path has a root if the body of the path begins with the directory separator.",254,null],[11,"parent","","The path without its final component, if any.",254,null],[11,"file_name","","The final component of the path, if it is a normal file.",254,null],[11,"strip_prefix","","Returns a path that, when joined onto `base`, yields `self`.",254,null],[11,"starts_with","","Determines whether `base` is a prefix of `self`.",254,null],[11,"ends_with","","Determines whether `child` is a suffix of `self`.",254,null],[11,"file_stem","","Extracts the stem (non-extension) portion of `self.file_name()`.",254,null],[11,"extension","","Extracts the extension of `self.file_name()`, if possible.",254,null],[11,"join","","Creates an owned `PathBuf` with `path` adjoined to `self`.",254,null],[11,"with_file_name","","Creates an owned `PathBuf` like `self` but with the given file name.",254,null],[11,"with_extension","","Creates an owned `PathBuf` like `self` but with the given extension.",254,null],[11,"components","","Produce an iterator over the components of the path.",254,null],[11,"iter","","Produce an iterator over the path&#39;s components viewed as `OsStr` slices.",254,null],[11,"display","","Returns an object that implements `Display` for safely printing paths\nthat may contain non-Unicode data.",254,null],[11,"metadata","","Query the file system to get information about a file, directory, etc.",254,null],[11,"symlink_metadata","","Query the metadata about a file without following symlinks.",254,null],[11,"canonicalize","","Returns the canonical form of the path with all intermediate components\nnormalized and symbolic links resolved.",254,null],[11,"read_link","","Reads a symbolic link, returning the file that the link points to.",254,null],[11,"read_dir","","Returns an iterator over the entries within a directory.",254,null],[11,"exists","","Returns whether the path points at an existing entity.",254,null],[11,"is_file","","Returns whether the path is pointing at a regular file.",254,null],[11,"is_dir","","Returns whether the path is pointing at a directory.",254,null],[11,"deref","","",253,null],[11,"borrow","","",253,null],[11,"from","collections::borrow","",188,{"inputs":[{"name":"path"}],"output":{"name":"cow"}}],[11,"from","","",188,{"inputs":[{"name":"pathbuf"}],"output":{"name":"cow"}}],[11,"to_owned","std::path","",254,null],[11,"eq","","",253,null],[11,"hash","","",253,null],[11,"partial_cmp","","",253,null],[11,"cmp","","",253,null],[11,"as_ref","","",253,null],[11,"into","","",253,null],[11,"eq","","",255,null],[11,"ne","","",255,null],[11,"clone","","",255,null],[11,"fmt","","",255,null],[11,"as_ref","","",254,null],[11,"fmt","","",254,null],[11,"fmt","","",256,null],[11,"fmt","","",256,null],[11,"eq","","",254,null],[11,"hash","","",254,null],[11,"partial_cmp","","",254,null],[11,"cmp","","",254,null],[11,"as_ref","","",254,null],[11,"as_ref","std::ffi::os_str","",187,null],[11,"as_ref","collections::borrow","",188,null],[11,"as_ref","std::ffi::os_str","",186,null],[11,"as_ref","collections::string","",189,null],[11,"as_ref","std::path","",253,null],[11,"eq","","",253,null],[11,"eq","","",254,null],[11,"partial_cmp","","",253,null],[11,"partial_cmp","","",254,null],[11,"eq","","",253,null],[11,"partial_cmp","","",253,null],[11,"eq","collections::borrow","",188,null],[11,"eq","std::path","",254,null],[11,"partial_cmp","collections::borrow","",188,null],[11,"partial_cmp","std::path","",254,null],[11,"eq","collections::borrow","",188,null],[11,"partial_cmp","","",188,null],[11,"eq","","",188,null],[11,"eq","std::path","",253,null],[11,"partial_cmp","collections::borrow","",188,null],[11,"partial_cmp","std::path","",253,null],[11,"eq","","",253,null],[11,"eq","std::ffi::os_str","",187,null],[11,"partial_cmp","std::path","",253,null],[11,"partial_cmp","std::ffi::os_str","",187,null],[11,"eq","std::path","",253,null],[11,"partial_cmp","","",253,null],[11,"eq","","",253,null],[11,"eq","collections::borrow","",188,null],[11,"partial_cmp","std::path","",253,null],[11,"partial_cmp","collections::borrow","",188,null],[11,"eq","std::path","",253,null],[11,"eq","std::ffi::os_str","",186,null],[11,"partial_cmp","std::path","",253,null],[11,"partial_cmp","std::ffi::os_str","",186,null],[11,"eq","std::path","",254,null],[11,"eq","std::ffi::os_str","",187,null],[11,"partial_cmp","std::path","",254,null],[11,"partial_cmp","std::ffi::os_str","",187,null],[11,"eq","std::path","",254,null],[11,"partial_cmp","","",254,null],[11,"eq","","",254,null],[11,"eq","collections::borrow","",188,null],[11,"partial_cmp","std::path","",254,null],[11,"partial_cmp","collections::borrow","",188,null],[11,"eq","std::path","",254,null],[11,"eq","std::ffi::os_str","",186,null],[11,"partial_cmp","std::path","",254,null],[11,"partial_cmp","std::ffi::os_str","",186,null],[11,"eq","","",187,null],[11,"partial_cmp","","",187,null],[11,"eq","collections::borrow","",188,null],[11,"partial_cmp","","",188,null],[11,"eq","std::ffi::os_str","",186,null],[11,"partial_cmp","","",186,null],[11,"eq","collections::borrow","",188,null],[11,"eq","std::ffi::os_str","",187,null],[11,"partial_cmp","collections::borrow","",188,null],[11,"partial_cmp","std::ffi::os_str","",187,null],[11,"eq","collections::borrow","",188,null],[11,"partial_cmp","","",188,null],[11,"eq","","",188,null],[11,"eq","std::ffi::os_str","",186,null],[11,"partial_cmp","collections::borrow","",188,null],[11,"partial_cmp","std::ffi::os_str","",186,null],[11,"fmt","std::path","",255,null],[11,"description","","",255,null],[11,"write","std::process","",239,null],[11,"flush","","",239,null],[11,"read","","",240,null],[11,"read_to_end","","",240,null],[11,"read","","",241,null],[11,"read_to_end","","",241,null],[11,"new","","Constructs a new `Command` for launching the program at\npath `program`, with the following default configuration:",236,{"inputs":[{"name":"s"}],"output":{"name":"command"}}],[11,"arg","","Add an argument to pass to the program.",236,null],[11,"args","","Add multiple arguments to pass to the program.",236,null],[11,"env","","Inserts or updates an environment variable mapping.",236,null],[11,"env_remove","","Removes an environment variable mapping.",236,null],[11,"env_clear","","Clears the entire environment map for the child process.",236,null],[11,"current_dir","","Sets the working directory for the child process.",236,null],[11,"stdin","","Configuration for the child process&#39;s stdin handle (file descriptor 0).",236,null],[11,"stdout","","Configuration for the child process&#39;s stdout handle (file descriptor 1).",236,null],[11,"stderr","","Configuration for the child process&#39;s stderr handle (file descriptor 2).",236,null],[11,"spawn","","Executes the command as a child process, returning a handle to it.",236,null],[11,"output","","Executes the command as a child process, waiting for it to finish and\ncollecting all of its output.",236,null],[11,"status","","Executes a command as a child process, waiting for it to finish and\ncollecting its exit status.",236,null],[11,"fmt","","Format the program and arguments of a Command for display. Any\nnon-utf8 data is lossily converted using the utf8 replacement\ncharacter.",236,null],[11,"clone","","",257,null],[11,"eq","","",257,null],[11,"ne","","",257,null],[11,"fmt","","",257,null],[11,"piped","","A new pipe should be arranged to connect the parent and child processes.",238,{"inputs":[],"output":{"name":"stdio"}}],[11,"inherit","","The child inherits from the corresponding parent descriptor.",238,{"inputs":[],"output":{"name":"stdio"}}],[11,"null","","This stream will be ignored. This is the equivalent of attaching the\nstream to `/dev/null`",238,{"inputs":[],"output":{"name":"stdio"}}],[11,"fmt","","",237,null],[11,"clone","","",237,null],[11,"eq","","",237,null],[11,"ne","","",237,null],[11,"success","","Was termination successful? Signal termination not considered a success,\nand success is defined as a zero exit status.",237,null],[11,"code","","Returns the exit code of the process, if any.",237,null],[11,"fmt","","",237,null],[11,"kill","","Forces the child to exit. This is equivalent to sending a\nSIGKILL on unix platforms.",258,null],[11,"id","","Returns the OS-assigned process identifier associated with this child.",258,null],[11,"wait","","Waits for the child to exit completely, returning the status that it\nexited with. This function will continue to have the same return value\nafter it has been called at least once.",258,null],[11,"wait_with_output","","Simultaneously waits for the child to exit and collect all remaining\noutput on the stdout/stderr handles, returning an `Output`\ninstance.",258,null],[11,"new","std::sync::mpsc::select","Creates a new selection structure. This set is initially empty.",259,{"inputs":[],"output":{"name":"select"}}],[11,"handle","","Creates a new handle into this receiver set for a new receiver. Note\nthat this does *not* add the receiver to the receiver set, for that you\nmust call the `add` method on the handle itself.",259,null],[11,"wait","","Waits for an event on this receiver set. The returned value is *not* an\nindex, but rather an id. This id can be queried against any active\n`Handle` structures (each one has an `id` method). The handle with\nthe matching `id` will have some sort of event available on it. The\nevent could either be that data is available or the corresponding\nchannel has been closed.",259,null],[11,"id","","Retrieves the id of this handle.",260,null],[11,"recv","","Blocks to receive a value on the underlying receiver, returning `Some` on\nsuccess or `None` if the channel disconnects. This function has the same\nsemantics as `Receiver.recv`",260,null],[11,"add","","Adds this handle to the receiver set that the handle was created from. This\nmethod can be called multiple times, but it has no effect if `add` was\ncalled previously.",260,null],[11,"remove","","Removes this handle from the `Select` set. This method is unsafe because\nit has no guarantee that the `Handle` was not moved since `add` was\ncalled.",260,null],[11,"drop","","",259,null],[11,"drop","","",260,null],[11,"fmt","","",259,null],[11,"fmt","","",260,null],[11,"clone","std::sync::mpsc","",261,null],[11,"eq","","",261,null],[11,"ne","","",261,null],[11,"fmt","","",262,null],[11,"clone","","",262,null],[11,"eq","","",262,null],[11,"fmt","","",263,null],[11,"clone","","",263,null],[11,"eq","","",263,null],[11,"fmt","","",264,null],[11,"clone","","",264,null],[11,"eq","","",264,null],[11,"clone","","",265,null],[11,"eq","","",265,null],[11,"ne","","",265,null],[11,"send","","Attempts to send a value on this channel, returning it back if it could\nnot be sent.",266,null],[11,"clone","","",266,null],[11,"drop","","",266,null],[11,"fmt","","",266,null],[11,"send","","Sends a value on this synchronous channel.",267,null],[11,"try_send","","Attempts to send a value on this channel without blocking.",267,null],[11,"clone","","",267,null],[11,"drop","","",267,null],[11,"fmt","","",267,null],[11,"try_recv","","Attempts to return a pending value on this receiver without blocking",268,null],[11,"recv","","Attempts to wait for a value on this receiver, returning an error if the\ncorresponding channel has hung up.",268,null],[11,"recv_timeout","","Attempts to wait for a value on this receiver, returning an error if the\ncorresponding channel has hung up, or if it waits more than `timeout`.",268,null],[11,"iter","","Returns an iterator that will block waiting for messages, but never\n`panic!`. It will return `None` when the channel has hung up.",268,null],[11,"next","","",269,null],[11,"next","","",270,null],[11,"into_iter","","",268,null],[11,"drop","","",268,null],[11,"fmt","","",268,null],[11,"fmt","","",261,null],[11,"fmt","","",261,null],[11,"description","","",261,null],[11,"cause","","",261,null],[11,"fmt","","",265,null],[11,"fmt","","",265,null],[11,"description","","",265,null],[11,"cause","","",265,null],[11,"fmt","","",262,null],[11,"description","","",262,null],[11,"cause","","",262,null],[11,"fmt","","",263,null],[11,"description","","",263,null],[11,"cause","","",263,null],[11,"new","std::sync::barrier","Creates a new barrier that can block a given number of threads.",271,{"inputs":[{"name":"usize"}],"output":{"name":"barrier"}}],[11,"wait","","Blocks the current thread until all threads have rendezvoused here.",271,null],[11,"is_leader","","Returns whether this thread from `wait` is the &quot;leader thread&quot;.",272,null],[11,"clone","std::sync::condvar","",273,null],[11,"eq","","",273,null],[11,"ne","","",273,null],[11,"fmt","","",273,null],[11,"timed_out","","Returns whether the wait was known to have timed out.",273,null],[11,"new","","Creates a new condition variable which is ready to be waited on and\nnotified.",274,{"inputs":[],"output":{"name":"condvar"}}],[11,"wait","","Blocks the current thread until this condition variable receives a\nnotification.",274,null],[11,"wait_timeout_ms","","Waits on this condition variable for a notification, timing out after a\nspecified duration.",274,null],[11,"wait_timeout","","Waits on this condition variable for a notification, timing out after a\nspecified duration.",274,null],[11,"notify_one","","Wakes up one blocked thread on this condvar.",274,null],[11,"notify_all","","Wakes up all blocked threads on this condvar.",274,null],[11,"default","","",274,{"inputs":[],"output":{"name":"condvar"}}],[11,"drop","","",274,null],[11,"new","","Creates a new condition variable",275,{"inputs":[],"output":{"name":"staticcondvar"}}],[11,"wait","","Blocks the current thread until this condition variable receives a\nnotification.",275,null],[11,"wait_timeout","","Waits on this condition variable for a notification, timing out after a\nspecified duration.",275,null],[11,"wait_timeout_with","","Waits on this condition variable for a notification, timing out after a\nspecified duration.",275,null],[11,"notify_one","","Wakes up one blocked thread on this condvar.",275,null],[11,"notify_all","","Wakes up all blocked threads on this condvar.",275,null],[11,"destroy","","Deallocates all resources associated with this static condvar.",275,null],[11,"new","std::sync::mutex","Creates a new mutex in an unlocked state ready for use.",276,{"inputs":[{"name":"t"}],"output":{"name":"mutex"}}],[11,"lock","","Acquires a mutex, blocking the current thread until it is able to do so.",276,null],[11,"try_lock","","Attempts to acquire this lock.",276,null],[11,"is_poisoned","","Determines whether the lock is poisoned.",276,null],[11,"into_inner","","Consumes this mutex, returning the underlying data.",276,null],[11,"get_mut","","Returns a mutable reference to the underlying data.",276,null],[11,"drop","","",276,null],[11,"default","","",276,{"inputs":[],"output":{"name":"mutex"}}],[11,"fmt","","",276,null],[11,"new","","Creates a new mutex in an unlocked state ready for use.",277,{"inputs":[],"output":{"name":"staticmutex"}}],[11,"lock","","Acquires this lock, see `Mutex::lock`",277,null],[11,"try_lock","","Attempts to grab this lock, see `Mutex::try_lock`",277,null],[11,"destroy","","Deallocates resources associated with this static mutex.",277,null],[11,"deref","","",278,null],[11,"deref_mut","","",278,null],[11,"drop","","",278,null],[11,"new","std::sync::once","Creates a new `Once` value.",279,{"inputs":[],"output":{"name":"once"}}],[11,"call_once","","Performs an initialization routine once and only once. The given closure\nwill be executed if this is the first time `call_once` has been called,\nand otherwise the routine will *not* be invoked.",279,null],[11,"call_once_force","","Performs the same function as `call_once` except ignores poisoning.",279,null],[11,"poisoned","","Returns whether the associated `Once` has been poisoned.",280,null],[11,"new","std::sync::rwlock","Creates a new instance of an `RwLock&lt;T&gt;` which is unlocked.",281,{"inputs":[{"name":"t"}],"output":{"name":"rwlock"}}],[11,"read","","Locks this rwlock with shared read access, blocking the current thread\nuntil it can be acquired.",281,null],[11,"try_read","","Attempts to acquire this rwlock with shared read access.",281,null],[11,"write","","Locks this rwlock with exclusive write access, blocking the current\nthread until it can be acquired.",281,null],[11,"try_write","","Attempts to lock this rwlock with exclusive write access.",281,null],[11,"is_poisoned","","Determines whether the lock is poisoned.",281,null],[11,"into_inner","","Consumes this `RwLock`, returning the underlying data.",281,null],[11,"get_mut","","Returns a mutable reference to the underlying data.",281,null],[11,"drop","","",281,null],[11,"fmt","","",281,null],[11,"default","","",281,{"inputs":[],"output":{"name":"rwlock"}}],[11,"new","","Creates a new rwlock.",282,{"inputs":[],"output":{"name":"staticrwlock"}}],[11,"read","","Locks this rwlock with shared read access, blocking the current thread\nuntil it can be acquired.",282,null],[11,"try_read","","Attempts to acquire this lock with shared read access.",282,null],[11,"write","","Locks this rwlock with exclusive write access, blocking the current\nthread until it can be acquired.",282,null],[11,"try_write","","Attempts to lock this rwlock with exclusive write access.",282,null],[11,"destroy","","Deallocates all resources associated with this static lock.",282,null],[11,"deref","","",283,null],[11,"deref","","",284,null],[11,"deref_mut","","",284,null],[11,"drop","","",283,null],[11,"drop","","",284,null],[11,"hash","std::time::duration","",285,null],[11,"fmt","","",285,null],[11,"cmp","","",285,null],[11,"partial_cmp","","",285,null],[11,"lt","","",285,null],[11,"le","","",285,null],[11,"gt","","",285,null],[11,"ge","","",285,null],[11,"eq","","",285,null],[11,"ne","","",285,null],[11,"clone","","",285,null],[11,"new","","Creates a new `Duration` from the specified number of seconds and\nadditional nanosecond precision.",285,{"inputs":[{"name":"u64"},{"name":"u32"}],"output":{"name":"duration"}}],[11,"from_secs","","Creates a new `Duration` from the specified number of seconds.",285,{"inputs":[{"name":"u64"}],"output":{"name":"duration"}}],[11,"from_millis","","Creates a new `Duration` from the specified number of milliseconds.",285,{"inputs":[{"name":"u64"}],"output":{"name":"duration"}}],[11,"as_secs","","Returns the number of whole seconds represented by this duration.",285,null],[11,"subsec_nanos","","Returns the nanosecond precision represented by this duration.",285,null],[11,"add","","",285,null],[11,"add_assign","","",285,null],[11,"sub","","",285,null],[11,"sub_assign","","",285,null],[11,"mul","","",285,null],[11,"mul_assign","","",285,null],[11,"div","","",285,null],[11,"div_assign","","",285,null],[11,"cmp","std::time","",286,null],[11,"partial_cmp","","",286,null],[11,"lt","","",286,null],[11,"le","","",286,null],[11,"gt","","",286,null],[11,"ge","","",286,null],[11,"eq","","",286,null],[11,"ne","","",286,null],[11,"clone","","",286,null],[11,"cmp","","",287,null],[11,"partial_cmp","","",287,null],[11,"lt","","",287,null],[11,"le","","",287,null],[11,"gt","","",287,null],[11,"ge","","",287,null],[11,"eq","","",287,null],[11,"ne","","",287,null],[11,"clone","","",287,null],[11,"fmt","","",288,null],[11,"clone","","",288,null],[11,"now","","Returns an instant corresponding to &quot;now&quot;.",286,{"inputs":[],"output":{"name":"instant"}}],[11,"duration_since","","Returns the amount of time elapsed from another instant to this one.",286,null],[11,"elapsed","","Returns the amount of time elapsed since this instant was created.",286,null],[11,"add","","",286,null],[11,"add_assign","","",286,null],[11,"sub","","",286,null],[11,"sub_assign","","",286,null],[11,"sub","","",286,null],[11,"fmt","","",286,null],[11,"now","","Returns the system time corresponding to &quot;now&quot;.",287,{"inputs":[],"output":{"name":"systemtime"}}],[11,"duration_since","","Returns the amount of time elapsed from an earlier point in time.",287,null],[11,"elapsed","","Returns the amount of time elapsed since this system time was created.",287,null],[11,"add","","",287,null],[11,"add_assign","","",287,null],[11,"sub","","",287,null],[11,"sub_assign","","",287,null],[11,"fmt","","",287,null],[11,"duration","","Returns the positive duration which represents how far forward the\nsecond system time was from the first.",288,null],[11,"description","","",288,null],[11,"fmt","","",288,null],[11,"fmt","std::sys_common::poison","",289,null],[11,"fmt","","",289,null],[11,"description","","",289,null],[11,"new","","Creates a `PoisonError`.",289,{"inputs":[{"name":"t"}],"output":{"name":"poisonerror"}}],[11,"into_inner","","Consumes this error indicating that a lock is poisoned, returning the\nunderlying guard to allow access regardless.",289,null],[11,"get_ref","","Reaches into this error indicating that a lock is poisoned, returning a\nreference to the underlying guard to allow access regardless.",289,null],[11,"get_mut","","Reaches into this error indicating that a lock is poisoned, returning a\nmutable reference to the underlying guard to allow access regardless.",289,null],[11,"from","","",290,{"inputs":[{"name":"poisonerror"}],"output":{"name":"trylockerror"}}],[11,"fmt","","",290,null],[11,"fmt","","",290,null],[11,"description","","",290,null],[11,"cause","","",290,null],[11,"clone","libc::unix","",291,null],[11,"clone","","",292,null],[11,"clone","","",293,null],[11,"clone","","",294,null],[11,"clone","","",295,null],[11,"clone","","",296,null],[11,"clone","","",297,null],[11,"clone","","",298,null],[11,"clone","","",299,null],[11,"clone","","",300,null],[11,"clone","","",301,null],[11,"clone","","",302,null],[11,"clone","","",303,null],[11,"clone","libc::unix::notbsd","",304,null],[11,"clone","","",305,null],[11,"clone","","",306,null],[11,"clone","","",307,null],[11,"clone","","",308,null],[11,"clone","","",309,null],[11,"clone","","",310,null],[11,"clone","","",311,null],[11,"clone","","",312,null],[11,"clone","","",313,null],[11,"clone","","",314,null],[11,"clone","","",315,null],[11,"clone","","",316,null],[11,"clone","","",317,null],[11,"clone","","",318,null],[11,"clone","libc::unix::notbsd::linux","",319,null],[11,"clone","","",320,null],[11,"clone","","",321,null],[11,"clone","","",322,null],[11,"clone","","",323,null],[11,"clone","","",324,null],[11,"clone","","",325,null],[11,"clone","","",326,null],[11,"clone","","",327,null],[11,"clone","","",328,null],[11,"clone","","",329,null],[11,"clone","","",330,null],[11,"clone","","",331,null],[11,"clone","","",332,null],[11,"clone","","",333,null],[11,"clone","","",334,null],[11,"clone","libc::unix::notbsd::linux::other","",335,null],[11,"clone","","",336,null],[11,"clone","","",337,null],[11,"clone","","",338,null],[11,"clone","","",339,null],[11,"clone","","",340,null],[11,"clone","","",341,null],[11,"clone","","",342,null],[11,"clone","","",343,null],[11,"clone","","",344,null],[11,"clone","","",345,null],[11,"clone","libc::unix::notbsd::linux::other::b64","",346,null],[11,"clone","","",347,null],[11,"clone","libc::unix::notbsd::linux::other::b64::x86_64","",348,null],[11,"clone","","",349,null],[11,"clone","","",350,null],[11,"clone","","",351,null],[11,"clone","","",352,null],[11,"clone","","",353,null],[11,"clone","","",354,null],[11,"clone","","",355,null],[11,"payload","std::panicking","Returns the payload associated with the panic.",356,null],[11,"location","","Returns information about the location from which the panic originated,\nif available.",356,null],[11,"file","","Returns the name of the source file from which the panic originated.",357,null],[11,"line","","Returns the line number from which the panic originated.",357,null],[11,"next","rustc_unicode::char","",358,null],[11,"next","","",359,null],[11,"clone","","",360,null],[11,"eq","","",126,null],[11,"ne","","",126,null],[11,"clone","","",126,null],[11,"fmt","","",126,null],[11,"next","","",360,null],[11,"size_hint","","",360,null],[11,"unpaired_surrogate","","Returns the unpaired surrogate which caused this error.",126,null],[11,"fmt","","",126,null],[11,"borrow","collections::borrow","",188,null],[11,"clone","","",188,null],[11,"to_mut","","Acquires a mutable reference to the owned form of the data.",188,null],[11,"into_owned","","Extracts the owned data.",188,null],[11,"deref","","",188,null],[11,"cmp","","",188,null],[11,"eq","","",188,null],[11,"partial_cmp","","",188,null],[11,"fmt","","",188,null],[11,"fmt","","",188,null],[11,"default","","",188,{"inputs":[],"output":{"name":"cow"}}],[11,"hash","","",188,null],[11,"as_ref","","",188,null],[11,"new","alloc::rc","Constructs a new `Rc&lt;T&gt;`.",361,{"inputs":[{"name":"t"}],"output":{"name":"rc"}}],[11,"try_unwrap","","Unwraps the contained value if the `Rc&lt;T&gt;` has exactly one strong reference.",361,{"inputs":[{"name":"rc"}],"output":{"name":"result"}}],[11,"would_unwrap","","Checks if `Rc::try_unwrap` would return `Ok`.",361,{"inputs":[{"name":"rc"}],"output":{"name":"bool"}}],[11,"downgrade","","Creates a new `Weak&lt;T&gt;` reference from this value.",361,{"inputs":[{"name":"rc"}],"output":{"name":"weak"}}],[11,"weak_count","","Get the number of weak references to this value.",361,{"inputs":[{"name":"rc"}],"output":{"name":"usize"}}],[11,"strong_count","","Get the number of strong references to this value.",361,{"inputs":[{"name":"rc"}],"output":{"name":"usize"}}],[11,"is_unique","","Returns true if there are no other `Rc` or `Weak&lt;T&gt;` values that share\nthe same inner value.",361,{"inputs":[{"name":"rc"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns a mutable reference to the contained value if the `Rc&lt;T&gt;` has\none strong reference and no weak references.",361,{"inputs":[{"name":"rc"}],"output":{"name":"option"}}],[11,"make_mut","","Make a mutable reference into the given `Rc&lt;T&gt;` by cloning the inner\ndata if the `Rc&lt;T&gt;` doesn&#39;t have one strong reference and no weak\nreferences.",361,{"inputs":[{"name":"rc"}],"output":{"name":"t"}}],[11,"deref","","",361,null],[11,"drop","","Drops the `Rc&lt;T&gt;`.",361,null],[11,"clone","","Makes a clone of the `Rc&lt;T&gt;`.",361,null],[11,"default","","Creates a new `Rc&lt;T&gt;`, with the `Default` value for `T`.",361,{"inputs":[],"output":{"name":"rc"}}],[11,"eq","","Equality for two `Rc&lt;T&gt;`s.",361,null],[11,"ne","","Inequality for two `Rc&lt;T&gt;`s.",361,null],[11,"partial_cmp","","Partial comparison for two `Rc&lt;T&gt;`s.",361,null],[11,"lt","","Less-than comparison for two `Rc&lt;T&gt;`s.",361,null],[11,"le","","&#39;Less-than or equal to&#39; comparison for two `Rc&lt;T&gt;`s.",361,null],[11,"gt","","Greater-than comparison for two `Rc&lt;T&gt;`s.",361,null],[11,"ge","","&#39;Greater-than or equal to&#39; comparison for two `Rc&lt;T&gt;`s.",361,null],[11,"cmp","","Comparison for two `Rc&lt;T&gt;`s.",361,null],[11,"hash","","",361,null],[11,"fmt","","",361,null],[11,"fmt","","",361,null],[11,"fmt","","",361,null],[11,"from","","",361,{"inputs":[{"name":"t"}],"output":{"name":"rc"}}],[11,"new","","Constructs a new `Weak&lt;T&gt;` without an accompanying instance of T.",362,{"inputs":[],"output":{"name":"weak"}}],[11,"upgrade","","Upgrades a weak reference to a strong reference.",362,null],[11,"drop","","Drops the `Weak&lt;T&gt;`.",362,null],[11,"clone","","Makes a clone of the `Weak&lt;T&gt;`.",362,null],[11,"fmt","","",362,null],[11,"default","","",362,{"inputs":[],"output":{"name":"weak"}}],[11,"borrow","","",361,null],[11,"as_ref","","",361,null],[11,"clone","alloc::boxed","",363,null],[11,"pointer","","",364,null],[11,"make_place","","",364,{"inputs":[],"output":{"name":"intermediatebox"}}],[11,"finalize","","",364,null],[11,"finalize","","",122,{"inputs":[{"name":"intermediatebox"}],"output":{"name":"box"}}],[11,"make_place","","",363,null],[11,"drop","","",364,null],[11,"new","","Allocates memory on the heap and then places `x` into it.",122,{"inputs":[{"name":"t"}],"output":{"name":"box"}}],[11,"from_raw","","Constructs a box from a raw pointer.",122,null],[11,"into_raw","","Consumes the `Box`, returning the wrapped raw pointer.",122,null],[11,"default","","",122,{"inputs":[],"output":{"name":"box"}}],[11,"default","","",122,{"inputs":[],"output":{"name":"box"}}],[11,"clone","","Returns a new box with a `clone()` of this box&#39;s contents.",122,null],[11,"clone_from","","Copies `source`&#39;s contents into `self` without creating a new allocation.",122,null],[11,"clone","","",122,null],[11,"eq","","",122,null],[11,"ne","","",122,null],[11,"partial_cmp","","",122,null],[11,"lt","","",122,null],[11,"le","","",122,null],[11,"ge","","",122,null],[11,"gt","","",122,null],[11,"cmp","","",122,null],[11,"hash","","",122,null],[11,"from","","",122,{"inputs":[{"name":"t"}],"output":{"name":"box"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",122,null],[11,"downcast","","Attempt to downcast the box to a concrete type.",122,null],[11,"fmt","","",122,null],[11,"fmt","","",122,null],[11,"fmt","","",122,null],[11,"deref","","",122,null],[11,"deref_mut","","",122,null],[11,"next","","",122,null],[11,"size_hint","","",122,null],[11,"next_back","","",122,null],[11,"call_once","","",122,null],[11,"call_once","","",122,null],[11,"clone","","",122,null],[11,"borrow","","",122,null],[11,"borrow_mut","","",122,null],[11,"as_ref","","",122,null],[11,"as_mut","","",122,null],[11,"clone","collections::str","",365,null],[11,"next","","",365,null],[11,"size_hint","","",365,null],[11,"borrow","collections::string","",189,null],[11,"borrow","collections::vec","",161,null],[11,"borrow_mut","","",161,null],[11,"cmp","collections::string","",189,null],[11,"partial_cmp","","",189,null],[11,"lt","","",189,null],[11,"le","","",189,null],[11,"gt","","",189,null],[11,"ge","","",189,null],[11,"fmt","","",123,null],[11,"fmt","","",124,null],[11,"new","","Creates a new empty `String`.",189,{"inputs":[],"output":{"name":"string"}}],[11,"with_capacity","","Creates a new empty `String` with a particular capacity.",189,{"inputs":[{"name":"usize"}],"output":{"name":"string"}}],[11,"from_utf8","","Converts a vector of bytes to a `String`.",189,{"inputs":[{"name":"vec"}],"output":{"name":"result"}}],[11,"from_utf8_lossy","","Converts a slice of bytes to a string, including invalid characters.",189,null],[11,"from_utf16","","Decode a UTF-16 encoded vector `v` into a `String`, returning `Err`\nif `v` contains any invalid data.",189,null],[11,"from_utf16_lossy","","Decode a UTF-16 encoded vector `v` into a string, replacing\ninvalid data with the replacement character (U+FFFD).",189,null],[11,"from_raw_parts","","Creates a new `String` from a length, capacity, and pointer.",189,null],[11,"from_utf8_unchecked","","Converts a vector of bytes to a `String` without checking that the\nstring contains valid UTF-8.",189,{"inputs":[{"name":"vec"}],"output":{"name":"string"}}],[11,"into_bytes","","Converts a `String` into a byte vector.",189,null],[11,"as_str","","Extracts a string slice containing the entire string.",189,null],[11,"as_mut_str","","Extracts a string slice containing the entire string.",189,null],[11,"push_str","","Appends a given string slice onto the end of this `String`.",189,null],[11,"capacity","","Returns this `String`&#39;s capacity, in bytes.",189,null],[11,"reserve","","Ensures that this `String`&#39;s capacity is at least `additional` bytes\nlarger than its length.",189,null],[11,"reserve_exact","","Ensures that this `String`&#39;s capacity is `additional` bytes\nlarger than its length.",189,null],[11,"shrink_to_fit","","Shrinks the capacity of this `String` to match its length.",189,null],[11,"push","","Appends the given `char` to the end of this `String`.",189,null],[11,"as_bytes","","Returns a byte slice of this `String`&#39;s contents.",189,null],[11,"truncate","","Shortens this `String` to the specified length.",189,null],[11,"pop","","Removes the last character from the string buffer and returns it.",189,null],[11,"remove","","Removes a `char` from this `String` at a byte position and returns it.",189,null],[11,"insert","","Inserts a character into this `String` at a byte position.",189,null],[11,"as_mut_vec","","Returns a mutable reference to the contents of this `String`.",189,null],[11,"len","","Returns the length of this `String`, in bytes.",189,null],[11,"is_empty","","Returns `true` if this `String` has a length of zero.",189,null],[11,"clear","","Truncates this `String`, removing all contents.",189,null],[11,"drain","","Create a draining iterator that removes the specified range in the string\nand yields the removed chars.",189,null],[11,"into_boxed_str","","Converts this `String` into a `Box&lt;str&gt;`.",189,null],[11,"into_bytes","","Returns the bytes that were attempted to convert to a `String`.",123,null],[11,"utf8_error","","Fetch a `Utf8Error` to get more details about the conversion failure.",123,null],[11,"fmt","","",123,null],[11,"fmt","","",124,null],[11,"clone","","",189,null],[11,"clone_from","","",189,null],[11,"from_iter","","",189,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",189,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",189,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"extend","","",189,null],[11,"extend","","",189,null],[11,"extend","","",189,null],[11,"extend","","",189,null],[11,"eq","","",189,null],[11,"ne","","",189,null],[11,"eq","","",189,null],[11,"ne","","",189,null],[11,"eq","","",189,null],[11,"ne","","",189,null],[11,"eq","collections::borrow","",188,null],[11,"ne","","",188,null],[11,"eq","","",188,null],[11,"ne","","",188,null],[11,"eq","","",188,null],[11,"ne","","",188,null],[11,"eq","collections::string","",189,null],[11,"ne","","",189,null],[11,"default","","",189,{"inputs":[],"output":{"name":"string"}}],[11,"fmt","","",189,null],[11,"fmt","","",189,null],[11,"hash","","",189,null],[11,"add","","",189,null],[11,"index","","",189,null],[11,"index","","",189,null],[11,"index","","",189,null],[11,"index","","",189,null],[11,"index","","",189,null],[11,"index","","",189,null],[11,"index_mut","","",189,null],[11,"index_mut","","",189,null],[11,"index_mut","","",189,null],[11,"index_mut","","",189,null],[11,"index_mut","","",189,null],[11,"index_mut","","",189,null],[11,"deref","","",189,null],[11,"deref_mut","","",189,null],[11,"from_str","","",189,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"clone","","",125,null],[11,"fmt","","",125,null],[11,"fmt","","",125,null],[11,"eq","","",125,null],[11,"as_ref","","",189,null],[11,"as_ref","","",189,null],[11,"from","","",189,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[11,"from","collections::borrow","",188,{"inputs":[{"name":"str"}],"output":{"name":"cow"}}],[11,"from","","",188,{"inputs":[{"name":"string"}],"output":{"name":"cow"}}],[11,"into","collections::string","",189,null],[11,"write_str","","",189,null],[11,"write_char","","",189,null],[11,"drop","","",366,null],[11,"next","","",366,null],[11,"size_hint","","",366,null],[11,"next_back","","",366,null],[11,"new","collections::vec","Constructs a new, empty `Vec&lt;T&gt;`.",161,{"inputs":[],"output":{"name":"vec"}}],[11,"with_capacity","","Constructs a new, empty `Vec&lt;T&gt;` with the specified capacity.",161,{"inputs":[{"name":"usize"}],"output":{"name":"vec"}}],[11,"from_raw_parts","","Creates a `Vec&lt;T&gt;` directly from the raw components of another vector.",161,null],[11,"capacity","","Returns the number of elements the vector can hold without\nreallocating.",161,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted\nin the given `Vec&lt;T&gt;`. The collection may reserve more space to avoid\nfrequent reallocations.",161,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to\nbe inserted in the given `Vec&lt;T&gt;`. Does nothing if the capacity is already\nsufficient.",161,null],[11,"shrink_to_fit","","Shrinks the capacity of the vector as much as possible.",161,null],[11,"into_boxed_slice","","Converts the vector into Box&lt;[T]&gt;.",161,null],[11,"truncate","","Shorten a vector to be `len` elements long, dropping excess elements.",161,null],[11,"as_slice","","Extracts a slice containing the entire vector.",161,null],[11,"as_mut_slice","","Extracts a mutable slice of the entire vector.",161,null],[11,"set_len","","Sets the length of a vector.",161,null],[11,"swap_remove","","Removes an element from anywhere in the vector and return it, replacing\nit with the last element.",161,null],[11,"insert","","Inserts an element at position `index` within the vector, shifting all\nelements after it to the right.",161,null],[11,"remove","","Removes and returns the element at position `index` within the vector,\nshifting all elements after it to the left.",161,null],[11,"retain","","Retains only the elements specified by the predicate.",161,null],[11,"push","","Appends an element to the back of a collection.",161,null],[11,"pop","","Removes the last element from a vector and returns it, or `None` if it\nis empty.",161,null],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",161,null],[11,"drain","","Create a draining iterator that removes the specified range in the vector\nand yields the removed items.",161,null],[11,"clear","","Clears the vector, removing all values.",161,null],[11,"len","","Returns the number of elements in the vector.",161,null],[11,"is_empty","","Returns `true` if the vector contains no elements.",161,null],[11,"split_off","","Splits the collection into two at the given index.",161,null],[11,"resize","","Resizes the `Vec` in-place so that `len()` is equal to `new_len`.",161,null],[11,"extend_from_slice","","Clones and appends all elements in a slice to the `Vec`.",161,null],[11,"dedup","","Removes consecutive repeated elements in the vector.",161,null],[11,"clone","","",161,null],[11,"clone_from","","",161,null],[11,"hash","","",161,null],[11,"index","","",161,null],[11,"index_mut","","",161,null],[11,"index","","",161,null],[11,"index","","",161,null],[11,"index","","",161,null],[11,"index","","",161,null],[11,"index","","",161,null],[11,"index","","",161,null],[11,"index_mut","","",161,null],[11,"index_mut","","",161,null],[11,"index_mut","","",161,null],[11,"index_mut","","",161,null],[11,"index_mut","","",161,null],[11,"index_mut","","",161,null],[11,"deref","","",161,null],[11,"deref_mut","","",161,null],[11,"from_iter","","",161,{"inputs":[{"name":"i"}],"output":{"name":"vec"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of\nthe vector (from start to end). The vector cannot be used after calling\nthis.",161,null],[11,"extend","","",161,null],[11,"extend","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","collections::borrow","",188,null],[11,"ne","","",188,null],[11,"eq","","",188,null],[11,"ne","","",188,null],[11,"eq","","",188,null],[11,"ne","","",188,null],[11,"eq","collections::vec","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"partial_cmp","","",161,null],[11,"cmp","","",161,null],[11,"drop","","",161,null],[11,"default","","",161,{"inputs":[],"output":{"name":"vec"}}],[11,"fmt","","",161,null],[11,"as_ref","","",161,null],[11,"as_mut","","",161,null],[11,"as_ref","","",161,null],[11,"as_mut","","",161,null],[11,"from","","",161,null],[11,"from","","",161,{"inputs":[{"name":"str"}],"output":{"name":"vec"}}],[11,"from","collections::borrow","",188,null],[11,"from","","",188,{"inputs":[{"name":"vec"}],"output":{"name":"cow"}}],[11,"from_iter","","",188,{"inputs":[{"name":"i"}],"output":{"name":"cow"}}],[11,"next","collections::vec","",367,null],[11,"size_hint","","",367,null],[11,"count","","",367,null],[11,"next_back","","",367,null],[11,"clone","","",367,null],[11,"drop","","",367,null],[11,"next","","",368,null],[11,"size_hint","","",368,null],[11,"next_back","","",368,null],[11,"drop","","",368,null],[11,"cause","void::coreprovider::error","The lower-level cause of this error, if any.",121,null],[8,"ResultVoidExt","void","Extensions to `Result&lt;T, Void&gt;`",null,null],[10,"void_unwrap","","Get the value out of a wrapper.",369,null],[8,"ResultVoidErrExt","","Extensions to `Result&lt;Void, E&gt;`",null,null],[10,"void_unwrap_err","","Get the error out of a wrapper.",370,null],[11,"clone","","",371,null],[11,"fmt","","",371,null],[11,"fmt","","",371,null],[11,"eq","","",371,null],[11,"partial_cmp","","",371,null],[11,"description","","",371,null],[11,"cause","","",371,null],[11,"void_unwrap","core::result","Get the value out of an always-ok Result.",68,null],[11,"void_unwrap_err","","Get the error out of an always-err Result.",68,null]],"paths":[[3,"Wrapping"],[3,"ParseFloatError"],[4,"FpCategory"],[3,"TryFromIntError"],[3,"ParseIntError"],[3,"NonZero"],[3,"Unique"],[3,"Shared"],[3,"PhantomData"],[3,"RangeFull"],[3,"Range"],[3,"RangeFrom"],[3,"RangeTo"],[4,"RangeInclusive"],[3,"RangeToInclusive"],[4,"Ordering"],[8,"Any"],[3,"TypeId"],[3,"AtomicBool"],[3,"AtomicPtr"],[4,"Ordering"],[3,"AtomicI8"],[3,"AtomicU8"],[3,"AtomicI16"],[3,"AtomicU16"],[3,"AtomicI32"],[3,"AtomicU32"],[3,"AtomicI64"],[3,"AtomicU64"],[3,"AtomicIsize"],[3,"AtomicUsize"],[3,"Cell"],[4,"BorrowState"],[3,"RefCell"],[3,"Ref"],[3,"RefMut"],[3,"UnsafeCell"],[3,"EscapeUnicode"],[3,"EscapeDefault"],[3,"EncodeUtf8"],[3,"EncodeUtf16"],[3,"StepBy"],[3,"Repeat"],[3,"Empty"],[3,"Once"],[3,"Rev"],[3,"Cloned"],[3,"Cycle"],[3,"Chain"],[3,"Zip"],[3,"Map"],[3,"Filter"],[3,"FilterMap"],[3,"Enumerate"],[3,"Peekable"],[3,"SkipWhile"],[3,"TakeWhile"],[3,"Skip"],[3,"Take"],[3,"Scan"],[3,"FlatMap"],[3,"Fuse"],[3,"Inspect"],[4,"Option"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"TraitObject"],[4,"Result"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"Split"],[3,"SplitMut"],[3,"SplitN"],[3,"RSplitN"],[3,"SplitNMut"],[3,"RSplitNMut"],[3,"Windows"],[3,"Chunks"],[3,"ChunksMut"],[4,"SearchStep"],[3,"CharSearcher"],[3,"CharSliceSearcher"],[3,"CharPredicateSearcher"],[3,"StrSearcher"],[3,"ParseBoolError"],[3,"Utf8Error"],[3,"Chars"],[3,"CharIndices"],[3,"Bytes"],[3,"Split"],[3,"RSplit"],[3,"SplitTerminator"],[3,"RSplitTerminator"],[3,"SplitN"],[3,"RSplitN"],[3,"MatchIndices"],[3,"RMatchIndices"],[3,"Matches"],[3,"RMatches"],[3,"Lines"],[3,"LinesAny"],[3,"SipHasher13"],[3,"SipHasher24"],[3,"SipHasher"],[3,"BuildHasherDefault"],[4,"Alignment"],[3,"DebugStruct"],[3,"DebugTuple"],[3,"DebugSet"],[3,"DebugList"],[3,"DebugMap"],[3,"Error"],[3,"Arguments"],[3,"Formatter"],[8,"Write"],[8,"PartialEq"],[8,"PartialOrd"],[8,"Error"],[3,"Box"],[3,"FromUtf8Error"],[3,"FromUtf16Error"],[4,"ParseError"],[3,"DecodeUtf16Error"],[3,"EscapeDefault"],[4,"LocalKeyState"],[3,"LocalKey"],[3,"Key"],[3,"Key"],[3,"Builder"],[3,"Thread"],[3,"JoinHandle"],[3,"HashMap"],[3,"Iter"],[3,"Keys"],[3,"Values"],[3,"IterMut"],[3,"IntoIter"],[3,"ValuesMut"],[3,"Drain"],[4,"Entry"],[3,"OccupiedEntry"],[3,"VacantEntry"],[3,"RandomState"],[3,"DefaultHasher"],[3,"HashSet"],[3,"Iter"],[3,"IntoIter"],[3,"Drain"],[3,"Intersection"],[3,"Difference"],[3,"SymmetricDifference"],[3,"Union"],[3,"PeekMut"],[3,"BinaryHeap"],[3,"Iter"],[3,"IntoIter"],[3,"Drain"],[3,"Vec"],[3,"VecDeque"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Drain"],[3,"Iter"],[3,"IntoIter"],[3,"LinkedList"],[3,"IterMut"],[3,"FrontPlace"],[3,"BackPlace"],[3,"Vars"],[3,"VarsOs"],[4,"VarError"],[3,"SplitPaths"],[3,"JoinPathsError"],[3,"Args"],[3,"ArgsOs"],[3,"CString"],[3,"CStr"],[3,"NulError"],[3,"FromBytesWithNulError"],[3,"IntoStringError"],[3,"Error"],[3,"OsString"],[3,"OsStr"],[4,"Cow"],[3,"String"],[3,"Metadata"],[3,"OpenOptions"],[3,"Permissions"],[3,"FileType"],[3,"File"],[3,"ReadDir"],[3,"DirEntry"],[3,"DirBuilder"],[3,"BufReader"],[3,"IntoInnerError"],[3,"BufWriter"],[3,"LineWriter"],[3,"Cursor"],[4,"ErrorKind"],[3,"Empty"],[3,"Repeat"],[3,"Sink"],[3,"Stdin"],[3,"StdinLock"],[3,"Stdout"],[3,"StdoutLock"],[3,"Stderr"],[3,"StderrLock"],[4,"SeekFrom"],[3,"Chain"],[3,"Take"],[3,"Bytes"],[4,"CharsError"],[3,"Chars"],[3,"Split"],[3,"Lines"],[4,"IpAddr"],[4,"Ipv6MulticastScope"],[3,"Ipv4Addr"],[3,"Ipv6Addr"],[4,"SocketAddr"],[3,"SocketAddrV4"],[3,"SocketAddrV6"],[3,"TcpStream"],[3,"TcpListener"],[3,"Incoming"],[3,"UdpSocket"],[3,"AddrParseError"],[4,"Shutdown"],[3,"LookupHost"],[3,"stat"],[3,"Command"],[3,"ExitStatus"],[3,"Stdio"],[3,"ChildStdin"],[3,"ChildStdout"],[3,"ChildStderr"],[3,"SocketAddr"],[3,"UnixStream"],[3,"UnixListener"],[3,"Incoming"],[3,"UnixDatagram"],[3,"AssertUnwindSafe"],[4,"Prefix"],[3,"PrefixComponent"],[4,"Component"],[3,"Components"],[3,"Iter"],[3,"PathBuf"],[3,"Path"],[3,"StripPrefixError"],[3,"Display"],[3,"Output"],[3,"Child"],[3,"Select"],[3,"Handle"],[3,"SendError"],[3,"RecvError"],[4,"TryRecvError"],[4,"RecvTimeoutError"],[4,"TrySendError"],[3,"Sender"],[3,"SyncSender"],[3,"Receiver"],[3,"Iter"],[3,"IntoIter"],[3,"Barrier"],[3,"BarrierWaitResult"],[3,"WaitTimeoutResult"],[3,"Condvar"],[3,"StaticCondvar"],[3,"Mutex"],[3,"StaticMutex"],[3,"MutexGuard"],[3,"Once"],[3,"OnceState"],[3,"RwLock"],[3,"StaticRwLock"],[3,"RwLockReadGuard"],[3,"RwLockWriteGuard"],[3,"Duration"],[3,"Instant"],[3,"SystemTime"],[3,"SystemTimeError"],[3,"PoisonError"],[4,"TryLockError"],[3,"utimbuf"],[3,"timeval"],[3,"timespec"],[3,"rlimit"],[3,"rusage"],[3,"in_addr"],[3,"in6_addr"],[3,"ip_mreq"],[3,"ipv6_mreq"],[3,"hostent"],[3,"iovec"],[3,"pollfd"],[3,"winsize"],[3,"sockaddr"],[3,"sockaddr_in"],[3,"sockaddr_in6"],[3,"sockaddr_un"],[3,"sockaddr_storage"],[3,"addrinfo"],[3,"sockaddr_nl"],[3,"sockaddr_ll"],[3,"fd_set"],[3,"tm"],[3,"sched_param"],[3,"Dl_info"],[3,"epoll_event"],[3,"utsname"],[3,"lconv"],[3,"dirent"],[3,"dirent64"],[3,"rlimit64"],[3,"glob_t"],[3,"ifaddrs"],[3,"pthread_mutex_t"],[3,"pthread_rwlock_t"],[3,"pthread_mutexattr_t"],[3,"pthread_cond_t"],[3,"passwd"],[3,"statvfs"],[3,"dqblk"],[3,"signalfd_siginfo"],[3,"fsid_t"],[3,"mq_attr"],[3,"cpu_set_t"],[3,"sigaction"],[3,"stack_t"],[3,"siginfo_t"],[3,"glob64_t"],[3,"ucred"],[3,"statfs"],[3,"msghdr"],[3,"termios"],[3,"flock"],[3,"ipc_perm"],[3,"shmid_ds"],[3,"sigset_t"],[3,"sysinfo"],[3,"stat"],[3,"stat64"],[3,"pthread_attr_t"],[3,"_libc_fpxreg"],[3,"_libc_xmmreg"],[3,"_libc_fpstate"],[3,"mcontext_t"],[3,"ucontext_t"],[3,"PanicInfo"],[3,"Location"],[3,"ToLowercase"],[3,"ToUppercase"],[3,"DecodeUtf16"],[3,"Rc"],[3,"Weak"],[3,"ExchangeHeapSingleton"],[3,"IntermediateBox"],[3,"EncodeUtf16"],[3,"Drain"],[3,"IntoIter"],[3,"Drain"],[8,"ResultVoidExt"],[8,"ResultVoidErrExt"],[4,"Void"]]};
searchIndex["bitflags"] = {"doc":"A typesafe bitmask flag generator.","items":[[14,"bitflags!","bitflags","The `bitflags!` macro generates a `struct` that holds a set of C-style\nbitmask flags. It is useful for creating typesafe wrappers for C APIs.",null,null]],"paths":[]};
initSearch(searchIndex);
